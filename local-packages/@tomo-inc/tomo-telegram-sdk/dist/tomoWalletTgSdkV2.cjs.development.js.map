{"version":3,"file":"tomoWalletTgSdkV2.cjs.development.js","sources":["../src/v2/provider/BasicProvider.ts","../src/v2/provider/SolanaProvider/SolanaProvider.ts","../src/v2/utils/hexToBase64.ts","../src/v2/utils/ton/index.ts","../src/v2/utils/ton/jetton.ts","../src/v2/utils/isValidHex.ts","../src/v2/utils/base64toHex.ts","../src/v2/provider/TonProvider/TonProvider.ts","../src/config/sui.ts","../src/v2/provider/SuiProvider/SuiProvider.ts","../src/v2/index.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { Account, initOptions } from '../types/types';\nimport ProviderUtils from './ProviderUtils';\nimport { BASE_URL } from '../constant';\n\nexport default class BasicProvider extends EventEmitter {\n  isConnected: boolean;\n  utils: ProviderUtils;\n  constructor(options?: initOptions) {\n    super();\n    this.utils = new ProviderUtils({\n      ...BASE_URL,\n      ...options,\n    });\n    this.isConnected = false;\n  }\n\n  async connect(\n    method: string,\n    params?: {\n      tonProof?: string;\n      email?: string;\n      domain?: string;\n      chainId?: number;\n    }\n  ) {\n    const [chainType, operation] = this.utils.getMethodInfo(method);\n    if (this.utils._accounts && this.utils._accounts[chainType]) {\n      const account = this.utils._accounts[chainType];\n      this.utils._account = account;\n      this.isConnected = true;\n      return account;\n    }\n    const res: Account = await this.utils.request({\n      method,\n      params: params ? [params] : [],\n    }) as any;\n    this.isConnected = true;\n    return res;\n  }\n\n  async disconnect(method: string) {\n    const [chainType, operation] = this.utils.getMethodInfo(method);\n    this.utils._account = null;\n    this.utils.removeAccount(chainType);\n    this.emit('accountsChanged', []);\n    this.emit('disconnect', '');\n  }\n}\n","import { Transaction, VersionedTransaction } from '@solana/web3.js';\nimport {\n  mockSolEvmChainId,\n  getSolBalance,\n  sendTransaction as sendTx,\n} from '../../../config/sol';\nimport { initOptions } from '../../types/types';\nimport BasicProvider from '../BasicProvider';\nimport PrioviderUtils from '../ProviderUtils';\n\ninterface SolTransferParam {\n  from: string;\n  to: string;\n  value: string;\n  // chainId: number;\n  contract?: string;\n}\n\nexport default class SolanaProvider extends BasicProvider {\n  isConnected: boolean = false;\n  utils: PrioviderUtils;\n  account: {\n    address: string;\n  };\n  chainId: number;\n\n  constructor(options: initOptions) {\n    super(options);\n    this.chainId = mockSolEvmChainId;\n    this.isConnected = false;\n    this._initialize();\n  }\n\n  private _initialize() {\n    const account = this.utils.storage.get(`accounts`)?.sol;\n    if (account) {\n      this.account = account;\n      this.isConnected = true;\n    }\n  }\n\n  async connectWallet(params?: { email: string }) {\n    const res = await super.connect('sol_connectWallet', params);\n    this.isConnected = true;\n    this.account = res as any;\n    return res;\n  }\n\n  async disconnectWallet() {\n    await this.disconnect();\n    this.isConnected = false;\n    return true;\n  }\n\n  async sendTransaction(tx: string) {\n    const res = await sendTx(tx);\n    return res;\n  }\n\n  async getBalance(address?: string) {\n    if (!address && !this.account?.address)\n      return { balance: '0', formatted: '0' };\n    const res = await getSolBalance({\n      address: address || this.account.address,\n      token: '',\n    });\n    return res;\n  }\n\n  async signMessage(message: string) {\n    const res = await this.utils.request({\n      method: 'sol_signMessage',\n      params: [message, this.getAddress()],\n    });\n    return res.result;\n  }\n\n  getAddress() {\n    return this.account?.address || '';\n  }\n\n  async signTransaction(tx: Transaction | SolTransferParam) {\n    // fall back to transfer\n    if (typeof (tx as any)?.serialize != 'function')\n    { \n      console.error(`warning: signTransaction using plain js object will be deprecated\\nsignTransaction will only accept a Transaction Instance in the future\\nfor simple transfer ops, please use 'transfer' method`);\n      return this.transfer(tx as SolTransferParam);\n    }\n    const txHex = (tx as Transaction)\n      .serialize({ requireAllSignatures: false, verifySignatures: false })\n      .toString('hex');\n\n    const res = await this.utils.request({\n      method: 'sol_signTx',\n      params: [{ chainId: this.chainId, txHex }],\n    });\n    return res.result;\n  }\n\n  async transfer(params: SolTransferParam) {\n    const param = {\n      method: 'sol_signTransaction', // 'sol_transfer'\n      params: [{ ...params, chainId: this.chainId }],\n    };\n    const res = await this.utils.request(param);\n    return res.result;\n  }\n\n  async transferToken(params: SolTransferParam) {\n    return this.transfer(params);\n  }\n\n  // TODO:\n  // async signTransactions(params: any[]) {\n  //   const res = await this.utils.request({\n  //     method: 'sol_signTransaction',\n  //     params: params,\n  //   });\n  //   return res.result;\n  // }\n\n  async disconnect() {\n    this.account = null;\n    super.disconnect('sol_disconnect');\n  }\n}\n","export function hexToBase64(hex: string) {\n  // Convert hex to bytes\n  const bytes = Buffer.from(hex, 'hex');\n\n  // Encode bytes to Base64\n  return bytes.toString('base64');\n}\n","import { Cell } from '@ton/core';\nimport { hexToBase64 } from '../hexToBase64';\n\nexport function parsingTonTxPayload(payloadHex: string) {\n  const cell = Cell.fromBase64(hexToBase64(payloadHex));\n  const slice = cell.beginParse();\n  const operationCode = slice.loadUint(32);\n  const queryId = slice.loadUintBig(64);\n  const amount = slice.loadCoins();\n  const destination = slice.loadAddress();\n\n  return {\n    operationCode,\n    queryId,\n    amount,\n    destination,\n  };\n}\n\nexport async function getJettonMinterAddress(userAddress) {\n  const ton = await import('@ton/ton');\n  const client = new ton.TonClient({\n    endpoint: 'https://toncenter.com/api/v2/jsonRPC',\n  });\n  try {\n    const result = await client.runMethod(userAddress, 'get_wallet_data');\n    const slice = (result.stack as any).items[2].cell.beginParse();\n    const minterAddress = slice.loadAddress();\n\n    return minterAddress;\n  } catch (error) {\n    console.error('Can not get Jetton Minter Address:', error);\n    return '';\n  }\n}\n","import TonWeb from 'tonweb';\nimport { tonRpc, tonRpcApiKey } from '../../../config/ton';\nimport { Address, Cell, Slice, fromNano } from '@ton/core';\n\nexport async function checkIsJettonWallet(jettonWalletAddress: string) {\n  const tonweb = new TonWeb(\n    new TonWeb.HttpProvider()\n  );\n  const jettonWallet = new TonWeb.token.jetton.JettonWallet(tonweb.provider, {\n    address: jettonWalletAddress,\n  } as any);\n  try {\n    const data = await jettonWallet.getData();\n    const jettonMinterAddress = data.jettonMinterAddress.toString(\n      true,\n      true,\n      true\n    );\n    console.log('Jetton Minter Address:', jettonMinterAddress);\n    console.log('This address is a valid Jetton Wallet address.');\n    return jettonMinterAddress\n  } catch (error) {\n    console.error(error)\n    console.log(`${jettonWalletAddress} doesn't seems to be a jetton`);\n    return false\n  }\n}\n\nexport function isJUSDT(address: string) {\n  const usdtAddress = 'EQCxE6mUtQJKFnGfaROTKOt1lZbDiiX1kCixRv7Nw2Id_sDs';\n  if (\n    usdtAddress === address ||\n    Address.parse(address).toString() ===\n      Address.parse(usdtAddress).toString() ||\n    Address.parse(usdtAddress).toString() === address ||\n    Address.parse(address).toString() === usdtAddress\n  ) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport function roughlyGuessJettonDecimal(address: string) {\n  return isJUSDT(address) ? 6 : 9;\n}\n","export function isValidHex(str) {\n  return /^[0-9A-Fa-f]+$/.test(str);\n}","export function base64ToHex(base64: string) {\n  // Decode the Base64 string to a binary string\n  const binaryString = atob(base64)\n  let hexString = ''\n\n  // Convert each character in the binary string to hexadecimal\n  for (let i = 0; i < binaryString.length; i++) {\n    const hexChar = binaryString.charCodeAt(i).toString(16)\n    // Ensure two-digit representation\n    hexString += hexChar.length === 2 ? hexChar : '0' + hexChar\n  }\n\n  return hexString.toUpperCase() // Convert to uppercase for consistency\n}\n","import { fromNano } from '@ton/core';\nimport {\n  getTonBalance,\n  mockTonChainId,\n  mockTonTestnetChainId,\n  sendTransaction as sendTonTx,\n} from '../../../config/ton';\nimport {\n  initOptions,\n  TonTransferBodyLegacy,\n  TonTxBodyType,\n  TonTxParams,\n  TonTxRequestStandard,\n  TonTxRequest,\n} from '../../types/types';\nimport { parsingTonTxPayload } from '../../utils/ton';\nimport BasicProvider from '../BasicProvider';\nimport ProviderUtils from '../ProviderUtils';\nimport { checkIsJettonWallet } from '../../utils/ton/jetton';\nimport { isValidHex } from '../../utils/isValidHex';\nimport { base64ToHex } from '../../utils/base64toHex';\n\nexport class TonProvider extends BasicProvider {\n  utils: ProviderUtils;\n  account: {\n    address: string;\n    publicKey?: string;\n    tonProof?: any;\n  };\n  chainId: number;\n  isConnected: boolean;\n\n  constructor(options: initOptions) {\n    super(options);\n    this.chainId = mockTonChainId;\n    this.isConnected = false;\n    this._initialize();\n  }\n\n  private _initialize() {\n    const account = this.utils.storage.get(`accounts`)?.ton;\n    if (account) {\n      this.account = account;\n      this.isConnected = true;\n      this.chainId = account.chainId || mockTonChainId;\n    }\n  }\n\n  // @ts-ignore this is still not elegant\n  async connect(params?: {\n    tonProof?: string;\n    domain?: string;\n    chainId?: number;\n    email?: string;\n    workChain?: number;\n    network?: string;\n  }) {\n    if (params?.network === 'testnet') {\n      this.chainId = mockTonTestnetChainId;\n      params.chainId = mockTonTestnetChainId;\n    }\n    if (params?.tonProof) {\n      params.domain = params.domain || window.location.hostname;\n      params.workChain = params.workChain ?? 0;\n      params.chainId = mockTonChainId;\n    }\n\n    const res: any = (await super.connect('ton_connectWallet', params)) || {\n      address: '',\n    };\n\n    if (res.address) {\n      this.account = res;\n      this.isConnected = true;\n    }\n\n    return res;\n  }\n\n  get connected() {\n    return this.isConnected;\n  }\n\n  async restoreConnection() {\n    return this.getAddress();\n  }\n\n  getAddress() {\n    return this.account?.address || '';\n  }\n\n  async getBalance(address?: string) {\n    if (!address && !this.account?.address)\n      return { balance: '0', formatted: '0' };\n    const res = await getTonBalance({ tonAddress: address || this.account.address, chainId: this.chainId });\n    return res;\n  }\n\n  private async signTransaction(txs: TonTxRequest[]) {\n    const newTxs = txs.map(v => ({\n      chainId: this.chainId,\n      publicKey: this.account.publicKey,\n      ...v,\n    }));\n    const res = await this.utils.request({\n      method: 'ton_signTransaction',\n      params: [...newTxs],\n    });\n    return res;\n  }\n\n  private async signTx(txs: TonTxRequest[]) {\n    console.log('this.chainId', this.chainId);\n    const newTxs = txs.map(v => ({\n      chainId: this.chainId,\n      publicKey: this.account.publicKey,\n      ...v,\n    }));\n    const res = await this.utils.request({\n      method: 'ton_signTx',\n      params: [...newTxs],\n    });\n    return res;\n  }\n\n  async sendTransaction(params: TonTxParams) {\n    return this.sendTx(params);\n  }\n\n  async sendTx(params: TonTxParams) {\n    if (!params.from) params.from = this.getAddress();\n    const { messages, from } = params;\n    if (messages.length === 0) {\n      throw new Error('No messages');\n    }\n\n    const txParam = await this.parsePayloadAsStandard(params);\n    this.checkValue(txParam);\n    console.log({ txParam });\n    const signRes = await this.signTx([txParam]);\n    const res = await sendTonTx(signRes.result, '', this.chainId);\n    return res;\n  }\n\n  private checkValue(param: Partial<TonTxRequestStandard>) {\n    try {\n      fromNano(param.body.messages[0].amount);\n    } catch (e) {\n      throw new Error('amount must in the format of nanoTon');\n    }\n  }\n\n  /**\n   * @deprecated no longer maintained in the future\n   */\n  private parsePayloadAsJSON(\n    body: TonTransferBodyLegacy,\n    payload: string\n  ): TonTransferBodyLegacy {\n    const payloadObj = JSON.parse(payload);\n    const { contractAddr, precision, forwardAmount, memo } = payloadObj;\n    return {\n      ...body,\n      contractAddress: contractAddr,\n      precision,\n      forwardAmount,\n      memo,\n      type: TonTxBodyType.JETTON_PAYLOAD_JSON_LEGACY,\n    };\n  }\n\n  private async parsePayloadAsStandard(\n    tonTx: TonTxParams\n  ): Promise<Partial<TonTxRequestStandard>> {\n    const {\n      messages: [{ payload, address: toAddress }],\n    } = tonTx;\n\n    const result: Partial<TonTxRequestStandard> = {\n      type: TonTxBodyType.STANDARD,\n      body: tonTx,\n    };\n\n    if (!payload) return result;\n\n    let payloadHex = payload;\n    if (!isValidHex(payloadHex)) {\n      // auto convert base64 to hex\n      payloadHex = base64ToHex(payloadHex);\n      result.body.messages[0].payload = payloadHex;\n    }\n\n    const jettonMinterAddress = await checkIsJettonWallet(toAddress);\n    // check is jetton and try parse as jetton\n    if (!jettonMinterAddress) return result;\n    try {\n      const { amount, destination } = parsingTonTxPayload(payloadHex);\n\n      result.jettonInfo = {\n        recipientAddress: destination.toString(),\n        amount: amount.toString(),\n        jettonMinterAddress,\n      };\n    } catch (e) {\n      console.log('parse payload failed, pass');\n      // throw 'call contract other than jetton is not supported yet';\n    }\n\n    return result;\n  }\n\n  async disconnect() {\n    this.account = null;\n    super.disconnect('ton_disconnect');\n  }\n}\n","import {\n  SuiClient,\n  SuiTransactionBlockResponse,\n} from '@mysten/sui/client';\nimport { SUI_TYPE_ARG } from '@mysten/sui/utils';\nconst suiEndPoint = 'https://fullnode.mainnet.sui.io:443';\nexport const SUI_TOKEN_ADDRESS = SUI_TYPE_ARG;\nlet suiClient: SuiClient = new SuiClient({ url: suiEndPoint });\nexport const suiScanUrl = 'https://suiscan.xyz/mainnet/tx/';\nexport const mockSuiEvmChainId = 784;\nexport function getSuiClient(): SuiClient {\n  if (suiClient) {\n    return suiClient;\n  }\n  const client = new SuiClient({ url: suiEndPoint });\n  suiClient = client;\n  return suiClient;\n}\n\nexport const sendSuiTx = async ({\n  bytes,\n  signature,\n}: {\n  bytes: Uint8Array;\n  signature: string;\n}): Promise<SuiTransactionBlockResponse> => {\n  const res = await suiClient.executeTransactionBlock({\n    transactionBlock: bytes,\n    signature: signature,\n  });\n  return res;\n};\n\n// only form send\nexport interface GetSuiSendGasType {\n  fromAddress: string;\n  toAddress: string;\n  amount: string;\n  coinType?: string;\n}","import { Transaction } from '@mysten/sui/transactions';\nimport {\n  sendSuiTx\n} from '../../../config/sui';\nimport { initOptions } from '../../types/types';\nimport BasicProvider from '../BasicProvider';\nimport PrioviderUtils from '../ProviderUtils';\n\n// txBytes与txSerialize为transactionBlock的序列化\n// 和transactionBlock传入一种即可无需同时传入\ninterface SuiSignTransactionBlockInput {\n  transactionBlock: Transaction;\n  chain: string;\n  txBytes?: Uint8Array;\n  txSerialize?: Uint8Array;\n  options?: {\n    showEffects: boolean;\n  };\n}\n\nexport default class SuiProvider extends BasicProvider {\n  isConnected: boolean = false;\n  utils: PrioviderUtils;\n  account: {\n    address: string;\n  };\n  chainId: number;\n\n  constructor(options: initOptions) {\n    super(options);\n    this.chainId = 784;\n    this.isConnected = false;\n    this._initialize();\n  }\n\n  private _initialize() {\n    const account = this.utils.storage.get(`accounts`)?.sui;\n    if (account) {\n      this.account = account;\n      this.isConnected = true;\n    }\n  }\n\n  // change name to connect? like okx? \n  async connectWallet(params?: { email: string }) {\n    const res = await super.connect('sui_connectWallet', params);\n    this.isConnected = true;\n    this.account = res as any;\n    console.log('sui connect res', res);\n    return res;\n  }\n\n  // change name to disconnect? like okx?\n  async disconnectWallet() {\n    await this.disconnect();\n    this.isConnected = false;\n    return true;\n  }\n\n  getAccount() {\n    return this.account;\n  }\n\n  // remove?\n  getAddress() {\n    return this.account?.address || '';\n  }\n\n  async sendTransaction(p: { bytes: Uint8Array, signature: string }) {\n    const res = await sendSuiTx(p);\n    return res;\n  }\n\n  // message type align with okx?\n  async signMessage(message: string) {\n    const res = await this.utils.request({\n      method: 'sui_signMessage',\n      params: [message],\n    });\n    return res.result;\n  }\n\n  // message type align with okx?\n  async signPersonalMessage(message: string) {\n    return this.signMessage(message);\n  }\n\n  async signTransaction(params: SuiSignTransactionBlockInput) {\n    const res = await this.utils.request({\n      method: 'sui_signTransaction',\n      params: [\n        { ...params, chainId: this.chainId },\n      ],\n    });\n    return res.result;\n  }\n\n  async signAndExecuteTransaction(params: SuiSignTransactionBlockInput) {\n    const tx = await this.signTransaction(params);\n    return this.sendTransaction({ bytes: params.txBytes, signature: tx });\n  }\n\n  async disconnect() {\n    this.account = null;\n    super.disconnect('sui_disconnect');\n  }\n}\n","import Eventemitter3 from 'eventemitter3';\nimport { AppInfo, BASE_URL } from './constant';\n\nimport { EthereumProvider } from './provider/EthereumProvider/EthereumProvider';\nimport SolanaProvider from './provider/SolanaProvider/SolanaProvider';\nimport { TonProvider } from './provider/TonProvider/TonProvider';\nimport SuiProvider from './provider/SuiProvider/SuiProvider';\nimport { TomoOptions } from './types/types';\n\nclass WalletTgSdk extends Eventemitter3 {\n  version = AppInfo.version;\n  ethereum: EthereumProvider;\n  solana: SolanaProvider;\n  tomo_ton: TonProvider;\n  tomo_sui: SuiProvider;\n  connectUrl: string;\n  bridgeUrl: string;\n  connect_direct_link: string;\n  injected: boolean;\n  metaData\n  getAppInfo = () => {\n    return {\n      ...AppInfo,\n    };\n  };\n  constructor(options?: TomoOptions) {\n    super();\n\n    const metaData = options?.metaData;\n    this.connectUrl = options?.connect || BASE_URL.connect;\n    this.bridgeUrl = options?.bridge || BASE_URL.bridge;\n    this.connect_direct_link =\n      options?.connect_direct_link || BASE_URL.connect_direct_link;\n    this.injected = options?.injected || false;\n    this.metaData = {\n      icon: metaData?.icon,\n      name: metaData?.name,\n      url: metaData?.url,\n      direct_link: metaData?.direct_link,\n      description: metaData?.description,\n    };\n    this._initialize();\n  }\n  _initialize() {\n    //initialize provider\n    this.ethereum = new EthereumProvider({\n      connect: this.connectUrl,\n      bridge: this.bridgeUrl,\n      connect_direct_link: this.connect_direct_link,\n      metaData: this.metaData,\n    });\n    this.solana = new SolanaProvider({\n      connect: this.connectUrl,\n      bridge: this.bridgeUrl,\n      connect_direct_link: this.connect_direct_link,\n      metaData: this.metaData,\n    });\n    this.tomo_ton = new TonProvider({\n      connect: this.connectUrl,\n      bridge: this.bridgeUrl,\n      connect_direct_link: this.connect_direct_link,\n      metaData: this.metaData,\n    });\n    this.tomo_sui = new SuiProvider({\n      connect: this.connectUrl,\n      bridge: this.bridgeUrl,\n      connect_direct_link: this.connect_direct_link,\n      metaData: this.metaData,\n    });\n    // this.bitcoin = new BitcoinProvider({\n    //   connect: this.connectUrl,\n    //   bridge: this.bridgeUrl,\n    //   connect_direct_link: this.connect_direct_link,\n    //   metaData: this.metaData,\n    // });\n    if (this.injected) {\n      if (!window.ethereum) {\n        window.ethereum = this.ethereum;\n        // window.tg_tomo_btc = this.bitcoin;\n        dispatchEvent(new Event('ethereum#initialized'));\n      }\n      if (!window.tomo_sol) {\n        window.tomo_sol = this.solana;\n        dispatchEvent(new Event('tomo_sol#initialized'));\n      }\n      if (!window.tomo_ton) {\n        window.tomo_ton = this.tomo_ton;\n        dispatchEvent(new Event('tomo_ton#initialized'));\n      }\n      if (!window.tomo_sui) {\n        window.tomo_sui = this.tomo_sui;\n        dispatchEvent(new Event('tomo_sui#initialized'));\n      }\n    }\n    this.emit('_initialized');\n  }\n}\n\nexport default WalletTgSdk;\n"],"names":["BasicProvider","_EventEmitter","options","_this","call","utils","ProviderUtils","_extends","BASE_URL","isConnected","_inheritsLoose","_proto","prototype","connect","_connect","_asyncToGenerator","_regeneratorRuntime","mark","_callee","method","params","_this$utils$getMethod","chainType","operation","account","res","wrap","_callee$","_context","prev","next","getMethodInfo","_accounts","_account","abrupt","request","sent","stop","_x","_x2","apply","arguments","disconnect","_disconnect","_callee2","_this$utils$getMethod2","_callee2$","_context2","removeAccount","emit","_x3","EventEmitter","SolanaProvider","_BasicProvider","chainId","mockSolEvmChainId","_initialize","_this$utils$storage$g","storage","get","sol","connectWallet","_connectWallet","disconnectWallet","_disconnectWallet","sendTransaction","_sendTransaction","_callee3","tx","_callee3$","_context3","sendTx","getBalance","_getBalance","_callee4","address","_this$account","_callee4$","_context4","balance","formatted","getSolBalance","token","signMessage","_signMessage","_callee5","message","_callee5$","_context5","getAddress","result","_x4","_this$account2","signTransaction","_signTransaction","_callee6","txHex","_callee6$","_context6","serialize","console","error","transfer","requireAllSignatures","verifySignatures","toString","_x5","_transfer","_callee7","param","_callee7$","_context7","_x6","transferToken","_transferToken","_callee8","_callee8$","_context8","_x7","_callee9","_callee9$","_context9","hexToBase64","hex","bytes","Buffer","from","parsingTonTxPayload","payloadHex","cell","Cell","fromBase64","slice","beginParse","operationCode","loadUint","queryId","loadUintBig","amount","loadCoins","destination","loadAddress","checkIsJettonWallet","_checkIsJettonWallet","jettonWalletAddress","tonweb","jettonWallet","data","jettonMinterAddress","TonWeb","HttpProvider","jetton","JettonWallet","provider","getData","log","t0","isValidHex","str","test","base64ToHex","base64","binaryString","atob","hexString","i","length","hexChar","charCodeAt","toUpperCase","TonProvider","mockTonChainId","ton","_params$workChain","network","mockTonTestnetChainId","tonProof","domain","window","location","hostname","workChain","restoreConnection","_restoreConnection","getTonBalance","tonAddress","txs","_this2","newTxs","map","v","publicKey","concat","signTx","_signTx","_this3","_sendTx","messages","txParam","signRes","Error","parsePayloadAsStandard","checkValue","sendTonTx","fromNano","body","e","parsePayloadAsJSON","payload","payloadObj","JSON","parse","contractAddr","precision","forwardAmount","memo","contractAddress","type","TonTxBodyType","JETTON_PAYLOAD_JSON_LEGACY","_parsePayloadAsStandard","tonTx","_tonTx$messages","_tonTx$messages$","toAddress","_parsingTonTxPayload","STANDARD","jettonInfo","recipientAddress","_createClass","key","suiEndPoint","suiClient","SuiClient","url","sendSuiTx","_ref2","_ref","signature","executeTransactionBlock","transactionBlock","SuiProvider","sui","getAccount","p","signPersonalMessage","_signPersonalMessage","signAndExecuteTransaction","_signAndExecuteTransaction","txBytes","WalletTgSdk","_Eventemitter","AppInfo","version","metaData","connectUrl","bridgeUrl","bridge","connect_direct_link","injected","icon","name","direct_link","description","ethereum","EthereumProvider","solana","tomo_ton","tomo_sui","dispatchEvent","Event","tomo_sol","Eventemitter3"],"mappings":"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"}