{"version":3,"file":"EthereumProvider-225fd49a.js","sources":["../src/config/sol.ts","../src/state/useLocalStore.ts","../src/state/index.ts","../src/api/index.ts","../src/state/storageKey.ts","../src/config/btc.ts","../src/config/ton.ts","../src/util/const.ts","../src/v2/ProxyLocalStorage.ts","../src/v2/constant.ts","../src/v2/utils/utils.ts","../src/v2/metaData.ts","../src/v2/types/types.ts","../src/v2/message.ts","../src/v2/utils/properties.ts","../src/v2/provider/ProviderUtils.ts","../src/v2/utils/validator.ts","../src/v2/provider/AbstractProvider.ts","../src/v2/provider/EthereumProvider/EthereumProvider.ts"],"sourcesContent":["import base58 from 'bs58';\n\nlet connection: any;\nexport const SolMainAddress = '11111111111111111111111111111111';\nexport const mockSolEvmChainId = 501;\nexport const solDecimals = 9;\nexport const solTokenName = 'SOL';\nexport const solEndpoint =\n  'https://rpc.ankr.com/solana/ac79e83cf02a544dbb9b3f4c5d5478b2510b921e7d5739ded8791a932e8de0a6';\nexport const solScanUrl = 'https://solscan.io/tx/';\nexport function getConnection() {\n  if (connection) {\n    return connection;\n  }\n  (async function() {\n    const solanaWeb3 = await import('@solana/web3.js');\n    // connection = new Connection(solEndpoint, 'recent')\n    connection = new solanaWeb3.Connection(solEndpoint, 'finalized');\n  })();\n  return connection;\n}\n\nexport async function getSolFees() {\n  try {\n    const conn = getConnection();\n    const { feeCalculator } = await conn.getRecentBlockhash();\n    return {\n      totalFee: feeCalculator.lamportsPerSignature.toString() as string,\n    };\n  } catch (e) {\n    return { totalFee: '0' };\n  }\n}\n\nexport async function sendSolTx(\n  fromAddress: string,\n  toAddress: string,\n  amount: bigint, // bigint number\n  mintAddress?: string\n) {\n  try {\n    getConnection();\n    const solanaWeb3 = await import('@solana/web3.js');\n    const tx = new solanaWeb3.Transaction();\n    const PublicKey = solanaWeb3.PublicKey;\n    const fromPublicKey = new PublicKey(fromAddress);\n    const toPublicKey = new PublicKey(toAddress);\n    if (!tx.feePayer) {\n      tx.feePayer = fromPublicKey;\n    }\n    if (mintAddress) {\n      const tokenPublicKey = new PublicKey(mintAddress);\n      tx.recentBlockhash = (\n        await connection.getRecentBlockhash('max')\n      ).blockhash;\n      const solanaSpl = await import('@solana/spl-token');\n      tx.add(\n        solanaSpl.createTransferInstruction(\n          tokenPublicKey,\n          toPublicKey,\n          fromPublicKey,\n          amount\n        )\n      );\n    } else {\n      tx.recentBlockhash = (\n        await connection.getRecentBlockhash('max')\n      ).blockhash;\n      tx.add(\n        solanaWeb3.SystemProgram.transfer({\n          fromPubkey: fromPublicKey,\n          toPubkey: toPublicKey,\n          lamports: amount,\n        })\n      );\n    }\n    const txHex = tx\n      .serialize({ requireAllSignatures: false, verifySignatures: false })\n      .toString('hex');\n    return txHex;\n  } catch (e) {\n    return null;\n  }\n}\n\nexport const getSolTokenDetail = async (mintAddress: string) => {\n  try {\n    getConnection();\n    const TOKEN_LIST_URL =\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/src/tokens/solana.tokenlist.json';\n    const response = await fetch(TOKEN_LIST_URL);\n    const tokenList = await response.json();\n    const tokenDetail = tokenList.tokens.find(\n      (token: any) => token.address === mintAddress\n    );\n    if (tokenDetail) {\n      console.log('Token Symbol:', tokenDetail.symbol);\n      console.log('Token Name:', tokenDetail.name);\n      console.log('Token Decimals:', tokenDetail.decimals);\n      return {\n        symbol: tokenDetail.symbol,\n        decimals: tokenDetail.decimals,\n      };\n    } else {\n      console.log('Token not found in Token List');\n      return null;\n    }\n  } catch (e) {\n    console.log(e);\n    return null;\n  }\n};\n\nasync function getTokenAmount(client: any, mint: any, owner: any) {\n  const solanaSpl = await import('@solana/spl-token');\n  const tokenAccount = await solanaSpl.getAssociatedTokenAddress(mint, owner);\n\n  const info = await client.getAccountInfo(tokenAccount);\n  if (info == null) {\n    return null;\n  } else {\n    return await client.getTokenAccountBalance(tokenAccount);\n  }\n}\nexport async function getSolTokenAccount(client: any, mint: any, owner: any) {\n  const solanaSpl = await import('@solana/spl-token');\n  const tokenAccount = await solanaSpl.getAssociatedTokenAddress(mint, owner);\n\n  return await client.getAccountInfo(tokenAccount);\n}\nexport const getSolBalance = async ({\n  address,\n  token,\n}: {\n  address: string | undefined;\n  token: string | undefined;\n}) => {\n  if (address) {\n    const PublicKey = (await import('@solana/web3.js')).PublicKey;\n    if (token) {\n      const connection = getConnection();\n      const owner = new PublicKey(address);\n      const mint = new PublicKey(token);\n\n      const tokenAccount = await getTokenAmount(connection, mint, owner);\n\n      if (tokenAccount == null) {\n        return {\n          amount: BigInt(0),\n          token,\n          format: '0',\n          decimals: undefined,\n        };\n      } else {\n        return {\n          amount: BigInt(tokenAccount.value.amount),\n          format: tokenAccount.value.uiAmountString,\n          decimals: tokenAccount.value.decimals,\n          token,\n        };\n      }\n    } else {\n      const connection = getConnection();\n      const publicKey = new PublicKey(address);\n      const balance = await connection.getBalance(publicKey);\n      if (!balance) {\n        return {\n          balance: '0',\n          formatted: '0',\n        };\n      }\n      const solBalance = {\n        balance: '' + balance,\n        formatted: '' + balance / 10 ** 9,\n      };\n      return solBalance;\n    }\n  }\n  return undefined;\n};\n\nfunction getInstructions(data: any) {\n  let instruction;\n  (async function() {\n    const solanaWeb3 = await import('@solana/web3.js');\n    const PublicKey = solanaWeb3.PublicKey;\n    instruction = new solanaWeb3.TransactionInstruction({\n      programId: new PublicKey(data.programId),\n      data: Buffer.from(data.data),\n      keys: [],\n    });\n    for (let j = 0; j < data.keys.length; j++) {\n      instruction.keys.push({\n        pubkey: new PublicKey(data.keys[j].pubkey),\n        isSigner: data.keys[j].isSigner,\n        isWritable: data.keys[j].isWritable,\n      });\n    }\n  })();\n  return instruction;\n}\n\n// @ts-ignore\nexport const ToSerializeTransaction = async (data: any) => {\n  const SolanaWeb3 = await import('@solana/web3.js');\n  const PublicKey = SolanaWeb3.PublicKey;\n  const txMsg = new SolanaWeb3.TransactionMessage({\n    recentBlockhash: data.tx.recentBlockhash,\n    payerKey: new PublicKey(data.tx.from),\n    instructions: [],\n  });\n\n  for (let i = 0; i < data.tx.instructions.length; i++) {\n    txMsg.instructions.push(getInstructions(data.tx.instructions[i]));\n  }\n\n  if (data.tx && data.tx.txType == 'LEGACY') {\n    const tx = SolanaWeb3.Transaction.populate(txMsg.compileToLegacyMessage());\n\n    data.tx.signatures.forEach((signature: any) => {\n      tx.addSignature(\n        new PublicKey(signature.publicKey),\n        Buffer.from(signature.signature)\n      );\n    });\n    // tx.message.recentBlockhash = recentBlockhash\n    return Buffer.from(tx.serialize({ requireAllSignatures: false })).toString(\n      'hex'\n    );\n  } else if (data.tx && data.tx.txType == 'VERSIONED') {\n    const tx = SolanaWeb3.VersionedTransaction.deserialize(\n      data.tx.serializedMessage\n    );\n    // const tx = new VersionedTransaction(data.tx.serializedMessage)\n    // data.tx.signatures.forEach(signature => {\n    //     tx.addSignature(new PublicKey(signature.publicKey), Buffer.from(signature.signature))\n    // });\n    // tx.feePayer = new PublicKey(data.tx.from)\n\n    return Buffer.from(tx.serialize()).toString('hex');\n  }\n};\n\nexport async function getSendSplToken(\n  mint: string | undefined,\n  from: string | undefined,\n  to: string | undefined,\n  amount: bigint | undefined\n) {\n  const connection = getConnection();\n  const SolanaWeb3 = await import('@solana/web3.js');\n  const PublicKey = SolanaWeb3.PublicKey;\n  const solanaSpl = await import('@solana/spl-token');\n\n  const mintPublicKey = mint && new PublicKey(mint);\n  const fromPublicKey = from && new PublicKey(from);\n  const toPublicKey = to && new PublicKey(to);\n\n  if (mintPublicKey && fromPublicKey && toPublicKey && amount) {\n    const fromATA = await solanaSpl.getAssociatedTokenAddress(\n      mintPublicKey,\n      fromPublicKey\n    );\n\n    const fromInfo = await connection.getAccountInfo(fromATA);\n\n    if (fromInfo == null) {\n      console.warn('from not token accmount');\n      return null;\n    }\n    const fromTokenAccount = await connection.getTokenAccountBalance(fromATA);\n    if (fromTokenAccount.value.amount < amount) {\n      return null;\n    }\n\n    const transaction = new SolanaWeb3.TransactionMessage({\n      payerKey: fromPublicKey,\n      recentBlockhash: (await connection.getLatestBlockhash()).blockhash,\n      instructions: [],\n    });\n\n    const toATA = await solanaSpl.getAssociatedTokenAddress(\n      mintPublicKey,\n      toPublicKey\n    );\n    const toInfo = await connection.getAccountInfo(toATA);\n    const TOKEN_PROGRAM_ID = new PublicKey(\n      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'\n    );\n\n    if (toInfo == null) {\n      const ASSOCIATED_TOKEN_PROGRAM_ID = new PublicKey(\n        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'\n      );\n      transaction.instructions.push(\n        solanaSpl.createAssociatedTokenAccountInstruction(\n          fromPublicKey,\n          toATA,\n          toPublicKey,\n          mintPublicKey,\n          TOKEN_PROGRAM_ID,\n          ASSOCIATED_TOKEN_PROGRAM_ID\n        )\n      );\n    }\n\n    transaction.instructions.push(\n      solanaSpl.createTransferCheckedInstruction(\n        fromATA,\n        mintPublicKey,\n        toATA,\n        fromPublicKey,\n        amount,\n        fromTokenAccount.value.decimals,\n        [],\n        TOKEN_PROGRAM_ID\n      )\n    );\n\n    const versionedTransaction = new SolanaWeb3.VersionedTransaction(\n      transaction.compileToV0Message()\n    );\n\n    // return base58.encode(versionedTransaction.serialize())\n    return Buffer.from(versionedTransaction.serialize()).toString('hex');\n  }\n\n  return undefined;\n}\nexport async function sendTransaction(rawTransaction: string) {\n  getConnection();\n  const result = await connection.sendRawTransaction(\n    Buffer.from(rawTransaction, 'hex')\n  );\n  return result;\n}\n","import { create } from 'zustand';\r\nimport { devtools, persist } from 'zustand/middleware';\r\nimport { UserType } from '../types/types';\r\nimport { IChainId, ITransactionType } from './type';\r\n\r\ninterface StoreState {\r\n  user: UserType | undefined;\r\n  setUser: (user: UserType | undefined) => void;\r\n  deviceId: string | undefined;\r\n  setDeviceId: (deviceId: string | undefined) => void;\r\n  transactions: {\r\n    [key in IChainId]?: ITransactionType[];\r\n  };\r\n  setTransactions: (\r\n    deviceId:\r\n      | {\r\n          [key in IChainId]?: ITransactionType[];\r\n        }\r\n      | undefined\r\n  ) => void;\r\n}\r\n\r\nconst persistedState = persist<StoreState>(\r\n  set => ({\r\n    deviceId: undefined,\r\n    setDeviceId: (deviceId: string | undefined) => set({ deviceId: deviceId }),\r\n    user: undefined,\r\n    setUser: (user: UserType | undefined) => set({ user: user }),\r\n    transactions: {},\r\n    setTransactions: (\r\n      transactions: {\r\n        [key in IChainId]?: ITransactionType[];\r\n      }\r\n    ) => set({ transactions: transactions }),\r\n  }),\r\n  { name: 'tomo-local' }\r\n);\r\n\r\nconst useLocalStore = create(devtools(persistedState));\r\n\r\nexport const localStore = useLocalStore;\r\n\r\nexport default useLocalStore;\r\n","import { localStore } from './useLocalStore';\nexport const getUserToken = () => {\n  try {\n    const store = localStore.getState();\n\n    const user = store?.user;\n    if (user) {\n      return user?.token ?? '';\n    } else {\n      return '';\n    }\n  } catch (e) {\n    return '';\n  }\n};\nexport const getDeviceId = () => {\n  try {\n    const store = localStore.getState();\n    const deviceId = store?.deviceId;\n    if (deviceId) {\n      return deviceId;\n    } else {\n      return '';\n    }\n  } catch (e) {\n    return '';\n  }\n};\n","import axios, { AxiosInstance } from 'axios';\nimport { passkeyKey } from '../state/storageKey';\nimport { getUserToken } from '../state';\nimport {\n  BtcCreateSendBtcPsbt,\n  BtcSignPsbt,\n  CustomTokenParams,\n  CustonTokenType,\n  SolSendTx,\n  SwapResult,\n  TokenType,\n} from './type';\nimport { IChainId } from '../state/type';\n\nlet globalEndpoints: string[] = [];\nlet globalTmaUserId = '';\nlet globalTmaUserKey = '';\nexport const successCode = 8000;\nexport const api: {\n  index: AxiosInstance | undefined;\n  bot: AxiosInstance | undefined;\n  auth: AxiosInstance | undefined;\n  tomo: AxiosInstance | undefined;\n  pk: AxiosInstance | undefined;\n  sun: AxiosInstance | undefined;\n  init: (endpoints: [string], tmaid: string, tmakey: string) => void;\n} = {\n  index: undefined,\n  bot: undefined,\n  tomo: undefined,\n  auth: undefined,\n  pk: undefined,\n  sun: undefined,\n  init(endpoints: [string], tmaid, tmakey) {\n    const endPoints = {\n      bot: endpoints[0] + 'moon/',\n      auth: endpoints[0] + 'wind/',\n      pk: endpoints[0] + 'rain/',\n      sun: endpoints[0] + 'sun/',\n      tomo: endpoints[0] + 'sky/api/',\n    };\n    this.bot = axios.create({ baseURL: endPoints.bot });\n    this.auth = axios.create({ baseURL: endPoints.auth });\n    this.pk = axios.create({ baseURL: endPoints.pk });\n    this.sun = axios.create({ baseURL: endPoints.sun });\n    this.tomo = axios.create({\n      baseURL: endPoints.tomo,\n    });\n    globalEndpoints = endpoints;\n    globalTmaUserId = tmaid;\n    globalTmaUserKey = tmakey;\n    [this.index, this.tomo, this.auth, this.bot, this.pk, this.sun].forEach(\n      (apiItem: AxiosInstance | undefined) => {\n        if (!apiItem) return;\n        apiItem.interceptors.request.use(\n          config => {\n            // if (config.baseURL != endpoints[0] + 'bot-server/') {\n            Object.defineProperty(config.headers, 'X-TOMO-TMA-USERID', {\n              value: tmaid,\n              writable: true,\n              enumerable: true,\n              configurable: true,\n            });\n\n            Object.defineProperty(config.headers, 'X-TOMO-TMA-KEY', {\n              value: tmakey,\n              writable: true,\n              enumerable: true,\n              configurable: true,\n            });\n            // }\n            const passKey = getPassKey();\n\n            if (passKey && config.baseURL === endPoints.pk) {\n              config.headers.mfa = passKey;\n            }\n            if (\n              passKey &&\n              config.baseURL === endPoints.tomo &&\n              config.url != 'token/swapList'\n            ) {\n              config.headers.mfa = passKey;\n            }\n            const token = getUserToken();\n\n            if (token && config.url != 'token/swapList') {\n              config.headers.Authorization = `Bearer ${token}`;\n            }\n\n            return config;\n          },\n          error => {\n            console.log('null', error);\n\n            if (error?.response?.status === 401) {\n              return Promise.reject(error);\n            }\n            return null;\n          }\n        );\n      }\n    );\n  },\n};\n\nexport class GatewayError extends Error {\n  code: number;\n\n  constructor(message: string, code: number = 0) {\n    super(message);\n    this.name = this.constructor.name;\n    this.code = code;\n  }\n}\nexport const pkCallback = async (callback: () => Promise<any>) => {\n  try {\n    const res = await callback();\n    if (!res || !res.data) {\n      throw new GatewayError('Failed to get data', 500);\n    }\n    return res.data;\n  } catch (err) {\n    console.error(err);\n    if (err?.response?.data?.message) {\n      throw new GatewayError(\n        err?.response?.data?.message,\n        err?.response?.data?.code\n      );\n    }\n    throw err;\n  }\n};\nexport const authCallback = async (callback: () => Promise<any>) => {\n  try {\n    const res = await callback();\n    if (!res || !res.data) {\n      throw new GatewayError('Failed to get data', 500);\n    }\n    return res.data;\n  } catch (err) {\n    console.error(err);\n    if (err?.response?.data?.message) {\n      throw new GatewayError(\n        err?.response?.data?.message,\n        err?.response?.data?.code\n      );\n    }\n    throw err;\n  }\n};\nexport const sunCallback = async (callback: () => Promise<any>) => {\n  try {\n    const res = await callback();\n    if (!res || !res.data) {\n      throw new GatewayError('Failed to get data', 500);\n    }\n    return res.data;\n  } catch (err) {\n    console.error(err);\n    if (err?.response?.data?.message) {\n      throw new GatewayError(\n        err?.response?.data?.message,\n        err?.response?.data?.code\n      );\n    }\n    throw err;\n  }\n};\nexport const tomoCallback = async (callback: () => Promise<any>) => {\n  const res = await callback();\n  if (res.code != 10000) {\n    throw new GatewayError(res.message, res.code);\n  }\n  return res;\n};\nexport const getPassKey = () => {\n  try {\n    const token = localStorage.getItem(passkeyKey);\n    return token ?? '';\n  } catch (e) {\n    return null;\n  }\n};\n\nexport const loginApi = async (initData: string) => {\n  try {\n    const res = await api.bot?.get(`login?${initData}`);\n    return res?.data;\n  } catch (err) {\n    console.error(err);\n    if (err.response.status == 401) {\n      throw new GatewayError(err.response.data, 401);\n    }\n    throw err;\n  }\n};\n\nexport const checkLoginByCodeApi = async (session_code: string) => {\n  try {\n    const res = await api.bot?.get(`session/token`, {\n      headers: {\n        'session-code': session_code,\n      },\n    });\n    return res?.data;\n  } catch (err) {\n    console.error(err);\n    if (err.response.status == 401) {\n      throw new GatewayError('Not logged in', 401);\n    }\n    throw err;\n  }\n};\n\nexport const pkRegApi = async (device_no: string) => {\n  return await pkCallback(async () => {\n    return await api.pk?.post('v2/reg/' + device_no, {});\n  });\n};\n\nexport const pkCreateApi = async (data: {\n  device_no: string;\n  pubkey: string;\n}) => {\n  return await authCallback(async () => {\n    return await api.auth?.post('v2/passkey/create/', data);\n  });\n};\nexport const pkCheckApi = async (device_no: string) => {\n  return await authCallback(async () => {\n    return await api.auth?.get('v2/passkey/check/' + device_no);\n  });\n};\n\nexport const pkSignApi = async (\n  data: {\n    message: string;\n    device_no?: string;\n  },\n  headers: any = {}\n) => {\n  return await pkCallback(async () => {\n    return await api.pk?.post('v2/sign', data, { headers });\n  });\n};\n\nexport const pkValidateApi = async (\n  data: {\n    device_no?: string;\n    message: string;\n    sig: string;\n  },\n  headers: any = {}\n) => {\n  return await authCallback(async () => {\n    return await api.auth?.post('v2/passkey/validate/', data, { headers });\n  });\n};\n\nexport const btcSignPsbtAndPush = async (params: BtcSignPsbt) => {\n  return await tomoCallback(async () => {\n    const { data } = await api.tomo?.post(\n      `socialLogin/projectWallet/bitcoin/signPsbtAndPush`,\n      params\n    );\n    return data;\n  });\n};\n\nexport const sendEvmTransactionApi = async (\n  mfa: string,\n  data: {\n    transaction: { [key: string]: any };\n    chainId: number;\n    rpc: string;\n  }\n) => {\n  return await tomoCallback(async () => {\n    const token = getUserToken();\n\n    const res = await api.tomo?.post(\n      'socialLogin/projectWallet/ethereum/sendTransaction',\n      data,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          MFA: mfa,\n        },\n      }\n    );\n    return res.data;\n  });\n};\n\nexport const signEvmTransactionApi = async (\n  mfa: string,\n  data: {\n    transaction: { [key: string]: any };\n    chainId: number;\n    rpc: string;\n  }\n) => {\n  return await tomoCallback(async () => {\n    const token = getUserToken();\n\n    const res = await api.tomo?.post(\n      'socialLogin/projectWallet/ethereum/signTransaction',\n      data,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          MFA: mfa,\n        },\n      }\n    );\n    return res.data;\n  });\n};\n\nexport const tonSignMessage = async (\n  mfa: string,\n  data: { signingMessageBoc: string }\n) => {\n  return await tomoCallback(async () => {\n    const token = getUserToken();\n\n    const res = await api.tomo?.post(\n      '/socialLogin/projectWallet/ton/signTransaction',\n      data,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          MFA: mfa,\n        },\n      }\n    );\n    return res.data;\n  });\n};\n\nexport const solSignRawTransaction = async (params: SolSendTx) => {\n  return await tomoCallback(async () => {\n    const { data } = await api.tomo?.post(\n      `socialLogin/projectWallet/solana/signRawTransaction`,\n      params\n    );\n    return data;\n  });\n};\n\n// send BTC\nexport const btcCreateSendBtcPsbt = async (params: BtcCreateSendBtcPsbt) => {\n  return await tomoCallback(async () => {\n    const { data } = await api.tomo?.post(\n      `socialLogin/projectWallet/bitcoin/createSendBitcoinPsbt`,\n      params\n    );\n    return data;\n  });\n};\n\nexport const btcSignMessage = async (params: any) => {\n  return await tomoCallback(async () => {\n    const { data } = await api.tomo?.post(\n      `socialLogin/projectWallet/bitcoin/signMessage`,\n      params\n    );\n    return data;\n  });\n};\n\nexport const btcSignPsbt = async (params: BtcSignPsbt) => {\n  return await tomoCallback(async () => {\n    const { data } = await api.tomo?.post(\n      `socialLogin/projectWallet/bitcoin/signPsbt`,\n      params\n    );\n    return data;\n  });\n};\n\nexport const decodeInfoByHex = async (params: any) => {\n  return await tomoCallback(async () => {\n    const { data } = await api.tomo?.post(\n      `socialLogin/projectWallet/bitcoin/decode`,\n      params\n    );\n    return data;\n  });\n};\n\nexport const v2PkRegApi = async (device_no: string) => {\n  return await pkCallback(async () => {\n    return await api.pk?.post('v2/reg/' + device_no, {});\n  });\n};\n\nexport const v2PkSignApi = async (data: {\n  message: string;\n  device_no: string;\n}) => {\n  return await pkCallback(async () => {\n    return await api.pk?.post('v2/sign', data);\n  });\n};\n\nexport const v2PkValidateApi = async (data: {\n  device_no: string;\n  message: string;\n  sig: string;\n}) => {\n  return await authCallback(async () => {\n    return await api.auth?.post('v2/passkey/validate/', data);\n  });\n};\n\nexport const v2PkCreateApi = async (data: {\n  device_no: string;\n  pubkey: string;\n}) => {\n  return await authCallback(async () => {\n    return await api.auth?.post('v2/passkey/create/', data);\n  });\n};\n\nexport const v2PkCheckApi = async (device_no: string) => {\n  return await authCallback(async () => {\n    return await api.auth?.get('v2/passkey/check/' + device_no);\n  });\n};\n\nexport const checkPaymentPasswd = async () => {\n  return await authCallback(async () => {\n    return await api.auth?.get('v1/payment/passwd/check', {});\n  });\n};\nexport const setPaymentPasswd = async (data: { passwd: string }) => {\n  return await authCallback(async () => {\n    return await api.auth?.post('v1/payment/passwd/set', data);\n  });\n};\nexport const changePaymentPasswd = async (data: {\n  old_passwd: string;\n  new_passwd: string;\n}) => {\n  return await authCallback(async () => {\n    return await api.auth?.post('v1/payment/passwd/change', data);\n  });\n};\nexport const validatePaymentPasswd = async (data: { passwd: string }) => {\n  return await authCallback(async () => {\n    return await api.auth?.post('v1/payment/passwd/validate', data);\n  });\n};\nexport const bindEmailCodeVerify = async (params: {\n  email: string;\n  code: string;\n}) => {\n  return await tomoCallback(async () => {\n    const { data } = await api.tomo?.post(\n      `socialLogin/projectUser/bindEmailCodeVerify`,\n      params\n    );\n    return data;\n  });\n};\nexport const bindEmailCodeSend = async (email: string) => {\n  return await tomoCallback(async () => {\n    const { data } = await api.tomo?.get(\n      `socialLogin/projectUser/bindEmailCode?email=${email}`\n    );\n    return data;\n  });\n};\n\nexport const getSwapAllTokens = async (): Promise<any> => {\n  return await tomoCallback(async () => {\n    const ret = await api.tomo?.get(`socialLogin/teleGram/wallet/tokens`, {});\n    return ret.data;\n  });\n};\n\nexport const getSwapAllTokensSearch = async (\n  queryParameters: {\n    content: string;\n    chain?: string;\n  },\n  config: { url: string; tmaid: string; tmakey: string }\n): Promise<any> => {\n  const ret = await axios.get(`${config.url}wallet/tokens/search`, {\n    params: queryParameters,\n    headers: {\n      'X-TOMO-TMA-USERID': config.tmaid,\n      'X-TOMO-TMA-KEY': config.tmakey,\n    },\n  });\n  return ret.data;\n};\n\nexport const buildSwapTxApi = async (params: {\n  fromChainid: number;\n  toChainid: number;\n  fromAddress: string;\n  toAddress: string;\n  amount: string;\n  slippage: number;\n  fromWalletAddress: string;\n  toWalletAddress: string;\n}): Promise<SwapResult> => {\n  const res = await sunCallback(async () => {\n    return await api.sun?.get(`v1/buildTx`, {\n      params,\n    });\n  });\n  return res.data;\n};\n\nexport const getSystemTokens = async (params: {\n  evm_address: string;\n  solana_address: string;\n}): Promise<TokenType[]> => {\n  const res = await authCallback(async () => {\n    return await api.auth?.get(`v1/token/balance`, { params });\n  });\n  return res.data;\n};\n\nexport const v1AddAssetApi = async (data: CustomTokenParams) => {\n  return await authCallback(async () => {\n    return await api.auth?.post('v1/asset/add', data);\n  });\n};\n\nexport const v1AllAssetApi = async (params: {\n  page: number;\n  pageSize: number;\n  chain_ids?: number[];\n}): Promise<CustonTokenType[]> => {\n  const res = await authCallback(async () => {\n    return await api.auth?.get('v1/asset/all', { params });\n  });\n  return res.data;\n};\n\nexport const mfaAuthVerificationApi = async (data: any) => {\n  return await tomoCallback(async () => {\n    const res = await api.tomo?.post('socialLogin/mfa/auth/verification', data);\n    return res.data;\n  });\n};\n\nexport const getSwapAllTokensV3 = async (params: {\n  chain: string;\n}): Promise<{\n  result: any[];\n}> => {\n  // if (globalEndpoints.length == 0) {\n  //   return {\n  //     result: [],\n  //   };\n  // }\n  return await tomoCallback(async () => {\n    const token = getUserToken();\n\n    const ret = await api.tomo?.get(`token/swapList`, {\n      params,\n    });\n    return ret.data;\n  });\n};\nexport const sendBindEmailCodeApi = async (params: { email: string }) => {\n  return await tomoCallback(async () => {\n    const ret = await api.tomo?.get(`socialLogin/teleGram/bindEmailCode`, {\n      params,\n    });\n    return ret.data;\n  });\n};\n\nexport const verifyBindEmailCodeApi = async (data: {\n  email: string;\n  code: string;\n  tradePassword: string;\n}) => {\n  return await tomoCallback(async () => {\n    const res = await api.tomo?.post(\n      'socialLogin/teleGram/bindEmailCodeVerify',\n      data\n    );\n    return res.data;\n  });\n};\n\nexport const getTelegramUserInfoApi = async () => {\n  return await tomoCallback(async () => {\n    const res = await api.tomo?.get(`socialLogin/teleGram/userInfo`);\n    return res.data;\n  });\n};\n\nexport const getConfigChainsAll = async (): Promise<{\n  chain_id_name: {\n    [key in IChainId]?: string;\n  };\n}> => {\n  const { data } = await axios.get(\n    `https://common-service.mobus.workers.dev/chain/all`\n  );\n  return data.result;\n};\n","export const userKey = 'tomo_user';\nexport const deviceIdKey = 'tomo_deviceId';\nexport const passkeyKey = 'tomo_passkey';\n","import {\n  btcCreateSendBtcPsbt,\n  btcSignMessage,\n  btcSignPsbt,\n  btcSignPsbtAndPush,\n  decodeInfoByHex,\n} from '../api';\nimport {\n  BtcCreateSendBtcPsbt,\n  BTCNetworkAddressType,\n  BTCNetworkType,\n  BtcSignPsbt,\n} from '../api/type';\n\nexport type IBtcAddressType =\n  | 'bitcoinP2Wpkh'\n  | 'bitcoinP2Sh'\n  | 'bitcoinP2Tr'\n  | 'bitcoinP2Pkh';\n\nexport const btcAddressTypeMaps: IBtcAddressType[] = [\n  'bitcoinP2Wpkh',\n  'bitcoinP2Sh',\n  'bitcoinP2Tr',\n  'bitcoinP2Pkh',\n];\n\nexport const mockBtcEvmChainId = 0;\nexport const btcDecimals = 8;\n\nexport const signMessage = async (params: {\n  addressType: string;\n  message: string;\n}) => {\n  return await btcSignMessage({\n    networkType: 'SIGNET',\n    addressType: params.addressType,\n    message: params.message,\n  });\n  //res.message\n};\n\nexport const sendTx = async ({\n  network,\n  addressType,\n  toAddress,\n  amount,\n}: {\n  network: BTCNetworkType;\n  addressType: BTCNetworkAddressType | undefined;\n  toAddress: string;\n  amount: string;\n}) => {\n  const params: BtcCreateSendBtcPsbt = {\n    networkType: network,\n    addressType,\n    toAddress,\n    amount,\n  };\n  const txInfo = await btcCreateSendBtcPsbt(params);\n  /**\n   * if (txInfo.code == 10000 && txInfo.message === \"Success\") {\n   *       setInputs(txInfo.result.decodeInfo.inputInfos);\n   *       setOutputs(txInfo.result.decodeInfo.outputInfos);\n   *       setPsbtHex(txInfo.result.psbtHex);\n   *       setFee(txInfo.result.decodeInfo.fee);\n   *       setFeeRate(txInfo.result.decodeInfo.feeRate);\n   *     }\n   */\n\n  return txInfo;\n};\n\nexport const getSignTxInfoByHex = async ({\n  network,\n  psbtHex,\n}: {\n  network: string;\n  psbtHex: string;\n}) => {\n  const params = {\n    networkType: network.toUpperCase(),\n    psbtHex: psbtHex + '',\n  };\n  const txInfo = await decodeInfoByHex(params);\n  /**\n   * if (txInfo.message === \"Success\") {\n   *       setInputs(txInfo.result.inputInfos);\n   *       setOutputs(txInfo.result.outputInfos);\n   *       setPsbtHex(txInfo.result.psbtHex);\n   *       setFee(txInfo.result.fee);\n   *       setFeeRate(txInfo.result.feeRate);\n   *\n   *       const curAddress = txInfo.result.inputInfos[0].address;\n   *       const totalOutputsValue = txInfo.result.outputInfos.reduce(\n   *         (acc: any, cur: any) => {\n   *           return cur.address !== curAddress ? acc + cur.value : acc;\n   *         },\n   *         0\n   *       );\n   *       setSendAmount(satsToBtc(totalOutputsValue));\n   *     }\n   */\n  return txInfo;\n};\n\nexport const sendPsbtTx = async ({\n  networkType,\n  addressType,\n  psbtHex,\n}: {\n  networkType: BTCNetworkType;\n  addressType: BTCNetworkAddressType;\n  psbtHex: string;\n}) => {\n  const params: BtcSignPsbt = {\n    networkType: networkType,\n    addressType,\n    autoFinalized: true,\n    psbtHex: psbtHex,\n  };\n  const signAndPushRes = await btcSignPsbtAndPush(params);\n  return signAndPushRes;\n  // if (signAndPushRes.message === 'Success') {\n  //   handleUpdateSignData(\n  //     true,\n  //     signAndPushRes.result,\n  //     'Transaction sent',\n  //     'success',\n  //     true\n  //   )\n  // }\n};\n\nexport const signPsbt = async ({\n  networkType,\n  addressType,\n  psbtHex,\n}: {\n  networkType: BTCNetworkType;\n  addressType: BTCNetworkAddressType;\n  psbtHex: string;\n}) => {\n  const params: BtcSignPsbt = {\n    networkType: networkType,\n    addressType,\n    autoFinalized: true,\n    psbtHex: psbtHex,\n  };\n  const signRes = await btcSignPsbt(params);\n  return signRes;\n};\n\nexport const getBTCSendHash = async (psbtHex: string) => {\n  const psbtHaxTest =\n    '70736274ff0100730200000001c3a727f5f05aa5e4e18bee6fb604a21928371295d274c4739afbf308fb110b660000000000ffffffff02102700000000000017a914772f6a083785c0f06a647a90ecb39e57e64ef73787ce7607000000000017a914bb377855e1d01a2692339bcf823d5cf39b3712cf87000000000001012020a107000000000017a914bb377855e1d01a2692339bcf823d5cf39b3712cf87010717160014eb4da06dc422e023e6245378cfbc28a1fdb8f749000000';\n  // const psbt = bitcoin.Psbt.fromHex(psbtHex)\n  const bitcoin = await import('bitcoinjs-lib');\n  const psbt = bitcoin.Psbt.fromHex(psbtHaxTest);\n\n  const extractedTx = psbt.extractTransaction();\n\n  const txid = extractedTx.getId();\n\n  return txid;\n};\n","import TonWeb, { AddressType } from 'tonweb';\nimport { formatUnits } from 'viem';\nimport axios from 'axios';\nimport { Cell } from 'tonweb/dist/types/boc/cell';\nimport { SendMode } from '@ton/core';\n\nexport type TonSigningTransactionType = {\n  fromAddress: string;\n  publicKey: string;\n  value: bigint;\n  toAddress: string;\n  memo: string | Uint8Array | Cell;\n  tokenContractAddress?: string;\n  tokenPrecision?: number;\n};\n\nexport const mockTonChainId = 1100;\nexport const mockTonTestnetChainId = 1101;\nexport const tonDecimals = 9;\n\nconst apiKey: string =\n  '1b312c91c3b691255130350a49ac5a0742454725f910756aff94dfe44858388e';\nexport const tonRpc: string = 'https://toncenter.com/api/v2/jsonRPC';\nexport const hashHttp: string = 'https://toncenter.com/api/index/v1';\n\nasync function getTonWebProvider() {\n  return new TonWeb(new TonWeb.HttpProvider(tonRpc, { apiKey: apiKey }));\n}\n\nconst apiKeyTest: string =\n  '227f87a614319d10e4c20f0f485cd101eca12989bf59da0e33b3c3da8ad534b2';\nconst tonRpcTest: string = 'https://testnet.toncenter.com/api/v2/jsonRPC';\nconst hashHttpTest: string = 'https://testnet.toncenter.com/api/index/v1';\n\nasync function getTonTestWebProvider() {\n  return new TonWeb(\n    new TonWeb.HttpProvider(tonRpcTest, { apiKey: apiKeyTest })\n  );\n}\n\nexport const getTonBalance = async ({\n  tonAddress,\n  tokenContractAddress,\n  tokenPrecision,\n  chainId,\n}: {\n  tonAddress: string;\n  tokenContractAddress?: AddressType;\n  tokenPrecision?: number;\n  chainId?: number;\n}) => {\n  // get the decentralized RPC endpoint\n  const tonWeb =\n    chainId === mockTonTestnetChainId\n      ? await getTonTestWebProvider()\n      : await getTonWebProvider();\n  const wallet = tonWeb.wallet.create({ address: tonAddress }); // if your know only address at this moment\n  // const wallet = tonWeb.wallet.create({publicKey: TonWeb.utils.hexToBytes(publicKey)});\n\n  const address = await wallet.getAddress();\n  if (tokenContractAddress) {\n    // @ts-ignore\n    const jettonMinter = new TonWeb.token.jetton.JettonMinter(tonWeb.provider, {\n      address: tokenContractAddress,\n    });\n    const jettonWalletAddress = await jettonMinter.getJettonWalletAddress(\n      address\n    );\n    // console.log('My jetton wallet for ' + name + ' is ' + jettonWalletAddress.toString(true, true, true));\n    const jettonWallet = new TonWeb.token.jetton.JettonWallet(tonWeb.provider, {\n      address: jettonWalletAddress,\n    });\n    const balance = (await jettonWallet.getData()).balance;\n    return {\n      balance,\n      formatted: Number(balance.toString()) / 10 ** tokenPrecision,\n    };\n  }\n\n  const balance = await tonWeb.getBalance(address);\n  return { balance, formatted: TonWeb.utils.fromNano(balance) };\n};\n\n/**\n * build transfer signing message\n * @param transactionInfo  {publicKey: \"be91c0...\",value: 300000,toAddress: \"EQC4d8D4...\",memo: \"1111\"}\n * @returns\n */\nexport async function createSigningTransaction(\n  transactionInfo: TonSigningTransactionType\n) {\n  const amount = formatUnits(transactionInfo.value, tonDecimals);\n  const tonWeb = await getTonWebProvider();\n  const WalletClass = tonWeb.wallet.all['v4R2'];\n  //\n  const wallet = new WalletClass(tonWeb.provider, {\n    publicKey: tonWeb.utils.hexToBytes(transactionInfo.publicKey),\n    wc: 0,\n  });\n  //\n  const seqno = (await wallet.methods.seqno().call()) || 0;\n  let stateInit = null;\n  if (seqno == 0) {\n    const deploy = await wallet.createStateInit();\n    stateInit = deploy.stateInit;\n  }\n\n  let signingMessage;\n  let stateInitBoc;\n  let sendmode = SendMode.PAY_GAS_SEPARATELY + SendMode.IGNORE_ERRORS; // 3\n\n  if (\n    transactionInfo.tokenContractAddress &&\n    transactionInfo.tokenContractAddress.trim().length > 0 &&\n    transactionInfo.tokenPrecision\n  ) {\n    const jettonMinter = new TonWeb.token.jetton.JettonMinter(\n      tonWeb.provider,\n      // @ts-ignore\n      { address: transactionInfo.tokenContractAddress }\n    );\n    //\n    const walletAddress = await wallet.getAddress();\n    const jettonWalletAddress = await jettonMinter.getJettonWalletAddress(\n      walletAddress\n    );\n    //\n    const jettonWallet = new TonWeb.token.jetton.JettonWallet(tonWeb.provider, {\n      address: jettonWalletAddress.toString(true, true, false),\n    });\n\n    let comment;\n    if (typeof transactionInfo.memo === 'string') {\n      comment = new Uint8Array([\n        ...new TextEncoder().encode(transactionInfo.memo || '0'),\n      ]);\n    } else {\n      comment = transactionInfo.memo;\n    }\n\n    //\n    const tokenAmount = Number(amount) * 10 ** transactionInfo.tokenPrecision;\n    const convertedAmount = TonWeb.utils.toNano(\n      (tokenAmount / 10 ** 9).toString()\n    );\n    //\n    const transferBody = await jettonWallet.createTransferBody({\n      queryId: seqno,\n      // @ts-ignore\n      jettonAmount: convertedAmount,\n      toAddress: new TonWeb.utils.Address(transactionInfo.toAddress),\n      forwardPayload: comment,\n      forwardAmount: TonWeb.utils.toNano('0.0001'),\n      responseAddress: walletAddress,\n    });\n    //\n    const externalMessage = await wallet.createTransferMessage(\n      new Uint8Array(), //\n      jettonWalletAddress.toString(true, true, false),\n      TonWeb.utils.toNano('0.05'), //\n      seqno,\n      transferBody,\n      sendmode, //3, // sendmode\n      true, //\n      stateInit as any\n    );\n    /**\n         sendMode\n          0: Default Send Mode\n          1: Send as External Message\n          2: Send as Internal Message\n          3: Send as Bounceable Message\n          */\n\n    const cellBase64 = await externalMessage.signingMessage.toBoc(false);\n\n    if (stateInit) {\n      const cellBase641 = await stateInit.toBoc(false);\n      stateInitBoc = tonWeb.utils.bytesToHex(cellBase641);\n    }\n    signingMessage = tonWeb.utils.bytesToHex(cellBase64);\n    return {\n      signingMessageBoc: signingMessage,\n      stateInitBoc,\n    };\n  } else {\n    let toAddress: AddressType = new TonWeb.utils.Address(\n      transactionInfo.toAddress\n    ).toString(true, true, true);\n    const info = await tonWeb.provider.getAddressInfo(\n      transactionInfo.toAddress\n    );\n    if (info.state !== 'active') {\n      toAddress = new TonWeb.utils.Address(transactionInfo.toAddress).toString(\n        true,\n        true,\n        false\n      ); // convert to non-bounce\n    }\n\n    // const buffer = tonWeb.utils.base64ToBytes(transactionInfo.memo)\n    // const comment = tonWeb.boc.Cell.oneFromBoc(buffer)\n\n    const externalMessage = await wallet.createTransferMessage(\n      new Uint8Array(),\n      toAddress,\n      TonWeb.utils.toNano(amount),\n      seqno,\n      transactionInfo.memo, //\n      sendmode, //3,\n      true,\n      stateInit as any\n    );\n    const cellBase64 = await externalMessage.signingMessage.toBoc(false);\n    signingMessage = tonWeb.utils.bytesToHex(cellBase64);\n    // const hash = await externalMessage.signingMessage.hash();\n    if (stateInit) {\n      const cellBase641 = await stateInit.toBoc(false);\n      stateInitBoc = tonWeb.utils.bytesToHex(cellBase641);\n    }\n  }\n  return {\n    signingMessageBoc: signingMessage,\n    stateInitBoc,\n  };\n}\n\n// {'@type': 'ok', '@extra': '1724056253.9801953:10:0.38478557394306645', 'msgHash': ''};\nexport async function sendTransaction(\n  signedTransaction: string,\n  walletAddress?: string,\n  chainId?: number\n) {\n  const tonWeb =\n    chainId == mockTonTestnetChainId\n      ? await getTonTestWebProvider()\n      : await getTonWebProvider();\n\n  const cell = tonWeb.boc.Cell.fromBoc(\n    tonWeb.utils.base64ToBytes(signedTransaction)\n  )[0];\n  const msgHash = tonWeb.utils.bytesToBase64(await cell.hash());\n\n  let lt = '';\n  // if(walletAddress){\n  //   const addressInfo = await tonWeb.provider.getAddressInfo(walletAddress);\n  //   lt = addressInfo.last_transaction_id.lt || ''\n  // }\n\n  const result = await tonWeb.provider.sendBoc(signedTransaction);\n  return { ...result, msgHash, lt };\n}\n\n// {@extra: \"1723608477.1462789:0:0.6971379973574183\", @type: \"query.fees\", destination_fees: [], source_fees: {@type: \"fees\",fwd_fee: 0,gas_fee: 0,in_fwd_fee: 1006800,storage_fee:618}}\nexport async function sendMessageFee(\n  address: string,\n  signedTransaction: string\n) {\n  const tonWeb = await getTonWebProvider();\n  return tonWeb.provider.getEstimateFee({\n    address: address,\n    body: signedTransaction,\n  });\n}\n\nexport async function getTransactionsByInMessageHash(msg_hash: string) {\n  const transRes = await axios.get(\n    `${hashHttp}/getTransactionsByInMessageHash?msg_hash=${encodeURIComponent(\n      msg_hash\n    )}&include_msg_body=false&include_block=false`,\n    {\n      headers: {\n        'X-API-Key': apiKey,\n      },\n    }\n  );\n  return transRes?.data || [];\n}\n\nexport const tonRpcApiKey = apiKey;\n","import { mockSolEvmChainId } from '../config/sol';\nimport { mockBtcEvmChainId } from '../config/btc';\nimport { mockTonChainId } from '../config/ton';\nexport const mockEvmChainIds = {\n  SOL: mockSolEvmChainId,\n  BTC: mockBtcEvmChainId,\n  TON: mockTonChainId,\n};\n\nexport enum CONNECT_MAP {\n  TOMO_MINI_APP = 'Tomo Mini App',\n  OKX_CONNECT = 'OKX Connect',\n  TON_CONNECT = 'TON Connect',\n  BITGET_WALLET = 'Bitget Wallet',\n  UXUY_WALLET = 'UXUY',\n}\n\nexport const ChainIdWithConnectsMap = {\n  SOL: [CONNECT_MAP.TOMO_MINI_APP],\n  BTC: [],\n  TON: [CONNECT_MAP.TOMO_MINI_APP, CONNECT_MAP.OKX_CONNECT, CONNECT_MAP.TON_CONNECT],\n  EVM: [CONNECT_MAP.TOMO_MINI_APP, CONNECT_MAP.OKX_CONNECT, CONNECT_MAP.BITGET_WALLET, CONNECT_MAP.UXUY_WALLET],\n};\n","import { useEffect, useState } from 'react';\n\nexport default class ProxyLocalStorage {\n  Telegram;\n  prefix: string = 'tomo-tg-wallet-sdk-';\n  userId: string = '';\n  constructor() {\n    if (typeof window != 'undefined') {\n      this.Telegram = window.Telegram;\n      if (!this.Telegram) {\n        throw `[TOMO] please include https://telegram.org/js/telegram-web-app.js in your project`;\n      }\n      const initDataUnsafe = this.Telegram.WebApp.initDataUnsafe || {\n        user: { id: '' },\n      };\n      const userId = initDataUnsafe?.user?.id || '';\n      this.userId = userId;\n    }\n  }\n  get(key, withTgUserId: boolean = true) {\n    if (typeof window === 'undefined') return null;\n    const oKey = withTgUserId\n      ? `${this.prefix}${key}_${this.userId}`\n      : `${this.prefix}${key}`;\n    try {\n      let value = localStorage.getItem(oKey);\n      return value ? JSON.parse(value) : null;\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n  }\n  set(key, value, withTgUserId: boolean = true) {\n    if (typeof window === 'undefined') return null;\n    const oKey = withTgUserId\n      ? `${this.prefix}${key}_${this.userId}`\n      : `${this.prefix}${key}`;\n    try {\n      localStorage.setItem(oKey, JSON.stringify(value));\n      return value;\n    } catch (error) {\n      return null;\n    }\n  }\n}\n\nexport function useProxyLocalStorage() {\n  const [storage, setStorage] = useState(({\n    get() {\n      console.warn('local storage proxy not created yet');\n      return '';\n    },\n    set() {\n      console.warn('local storage proxy not created yet');\n      return '';\n    },\n  } as unknown) as InstanceType<typeof ProxyLocalStorage>);\n\n  useEffect(() => {\n    setStorage(new ProxyLocalStorage());\n  }, []);\n\n  return storage;\n}\n","export const AppInfo = {\n  id: 'tomo',\n  version: '1.1.4',\n  name: 'Tomo Wallet',\n  homepage: 'https://tomo.inc',\n  logo: '',\n  description: 'Multi-Chain Wallet based on Telegram, by tomo team 🧑‍🤝‍🧑',\n  downloadLinks: {\n    android: '',\n    googlePlay: '',\n    ios: '',\n    appleStore: '',\n    testflight: '',\n    telegram: '',\n    browserExtension: {\n      chrome: '',\n      edge: '',\n    },\n  },\n  deepLinks: {\n    scheme: 'tomo://',\n    universallink: 'https://',\n    direct_link: 'https://t.me/tomowalletbot/tomo_wallet',\n  },\n};\n\n// Prod\nexport const BASE_URL = {\n  bridge: 'https://bridge.anyconn.org/v1/sub',\n  connect: 'https://tg.tomo.inc/bot-server/sdk/signature',\n  connect_direct_link: 'https://t.me/tomowalletbot/tomo_wallet',\n};\n\nexport const LOCALES = [\n  'en_US',\n  'ru_RU',\n  'zh_CN',\n  'zh',\n  'ar_AE',\n  'cs_CZ',\n  'de_DE',\n  'es_ES',\n  'es_LAT',\n  'fr_FR',\n  'id_ID',\n  'it_IT',\n  'nl_NL',\n  'pl_PL',\n  'pt_BR',\n  'pt_PT',\n  'ro_RO',\n  'tr_TR',\n  'uk_UA',\n  'vi_VN',\n];\n\nexport const supportedEvmChainIdDefault = [\n  1,\n  56,\n  42161,\n  10,\n  8453,\n  59144,\n  81457,\n  137,\n  43114,\n  5003,\n  11155111,\n  11155420,\n  331239,\n  534352,\n  8333,\n  324,\n  202105,\n  5545,\n  47763,\n  686868,\n  4200,\n  2649,\n  2648,\n  200901,\n  200810,\n  1513,\n  80084,\n  3636,\n  480,\n];\n","import qs from 'qs';\nimport * as UUID from 'uuid';\n\nimport { LOCALES } from '../constant';\nimport { CONNECT_MAP } from '../../util/const';\n\nexport const tgUtils = {\n  decodeTelegramUrlParameters: function decodeTelegramUrlParameters(\n    encodedParameters,\n    isObject = true\n  ) {\n    const decodedParams = encodedParameters\n      .replaceAll('--', '%')\n      .replaceAll('__', '=')\n      .replaceAll('-', '&')\n      .replaceAll('%5F', '_')\n      .replaceAll('%2D', '-')\n      .replaceAll('%2E', '.');\n    if (isObject) return qs.parse(decodedParams);\n    return decodedParams;\n  },\n  stringify: function stringify(obj) {\n    const params = new URLSearchParams();\n\n    function buildParams(prefix, value) {\n      if (Array.isArray(value)) {\n        value.forEach((v, i) => {\n          if (/\\[\\]$/.test(prefix)) {\n            params.append(prefix, v);\n          } else {\n            buildParams(`${prefix}[${typeof v === 'object' ? i : ''}]`, v);\n          }\n        });\n      } else if (typeof value === 'object') {\n        for (const key in value) {\n          buildParams(`${prefix}[${key}]`, value[key]);\n        }\n      } else {\n        params.append(prefix, value);\n      }\n    }\n\n    for (const key in obj) {\n      buildParams(key, obj[key]);\n    }\n\n    return params.toString();\n  },\n  encodeTelegramUrlParameters: function encodeTelegramUrlParameters(\n    parameters,\n    isObject = true\n  ) {\n    if (isObject) {\n      parameters = tgUtils.stringify(parameters);\n      //  parameters = qs.stringify(parameters)\n    }\n    return parameters\n      .replaceAll('.', '%2E')\n      .replaceAll('-', '%2D')\n      .replaceAll('_', '%5F')\n      .replaceAll('&', '-')\n      .replaceAll('=', '__')\n      .replaceAll('%', '--');\n  },\n  opendeepLink: function opendeepLink(\n    paramsStr,\n    {\n      domain = 'tomowalletbot', //\n      appname = 'app',\n    }\n  ) {\n    var protoUrl = `tg:\\/\\/resolve?domain=${domain}&mode=compact&appname=${appname}&startapp=${paramsStr}`;\n    if (true) {\n      var iframeContEl =\n        document.getElementById('tgme_frame_cont') || document.body;\n      var iframeEl = document.createElement('iframe');\n      iframeContEl.appendChild(iframeEl);\n      var pageHidden = false;\n      window.addEventListener(\n        'visibilitychange',\n        function() {\n          pageHidden =\n            document.hidden ||\n            document.webkitHidden ||\n            document.mozHidden ||\n            document.msHidden;\n        },\n        false\n      );\n      window.addEventListener(\n        'pagehide',\n        function() {\n          pageHidden = true;\n        },\n        false\n      );\n      window.addEventListener(\n        'blur',\n        function() {\n          pageHidden = true;\n        },\n        false\n      );\n      if (iframeEl !== null) {\n        iframeEl.src = protoUrl;\n      }\n      !false &&\n        setTimeout(function() {\n          if (!pageHidden) {\n            (window as any).location = protoUrl;\n          }\n        }, 2000);\n    } else if (protoUrl) {\n      setTimeout(function() {\n        (window as any).location = protoUrl;\n      }, 100);\n    }\n  },\n  getDeepLink: function({\n    tMeUrl,\n    params,\n    mode = 'compact',\n  }: {\n    tMeUrl: string;\n    params?: any;\n    mode?: string;\n    compact;\n  }) {\n    const [, domain, appname] = tMeUrl.match(/t\\.me\\/([^\\/]+)\\/([^\\/]+)/);\n    const paramsStr = params ? this.encodeTelegramUrlParameters(params) : '';\n\n    const deepLink = `tg:\\/\\/resolve?domain=${domain}&mode=${mode}&appname=${appname}`;\n\n    return paramsStr ? deepLink + `&startapp=${paramsStr}` : deepLink;\n  },\n};\n\nexport function getUUid() {\n  return UUID.v4();\n}\n\nexport function isMobileDevice() {\n  return /Mobi|Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n    navigator.userAgent\n  );\n}\n\nexport const isIOS = () => {\n  return (\n    /iPad|iPhone|iPod/.test(navigator.userAgent) && !(window as any).MSStream\n  );\n};\n\nexport function isTelegramInAppBrowser() {\n  return /Telegram/i.test(navigator.userAgent);\n}\n\nexport function isPcBrowser() {\n  return !isMobileDevice() && !isTelegramInAppBrowser();\n}\n\nexport function getOkxLanguage(lang: string = 'en_US') {\n  return LOCALES.includes(lang) ? lang : 'en_US';\n}\n\nexport function getDisplayName(name: string) {\n  const nameMap: Record<CONNECT_MAP, string> & { [name: string]: string } = {\n    'Tomo Mini App': 'Tomo Wallet',\n    'OKX Connect': 'OKX Wallet',\n    'TON Connect': 'TON Wallets',\n    'EVM Connect': 'EVM Wallets',\n    [CONNECT_MAP.BITGET_WALLET]: 'Bitget Wallet',\n    [CONNECT_MAP.UXUY_WALLET]: 'UXUY Wallet',\n  };\n  return nameMap[name] || name;\n}\n\nexport function getDisplayDescription(name: string) {\n  const nameMap: Record<CONNECT_MAP, string> & { [name: string]: string } = {\n    'Tomo Mini App': 'Multichain',\n    'OKX Connect': 'TG & App',\n    'TON Connect': '',\n    'EVM Connect': '',\n    [CONNECT_MAP.BITGET_WALLET]: 'mini app',\n    [CONNECT_MAP.UXUY_WALLET]: 'mini app',\n  };\n  return nameMap[name] || '';\n}\n\nexport default {};\n","import { initOptions } from \"./types/types\";\n\nexport function getSyncSiteMetadata(metaData?:initOptions[\"metaData\"]) {\n\n    let hostname = window.location.hostname\n    try {\n        hostname =  new URL(metaData?.url || \"\")?.hostname || hostname\n    } catch (error) {\n        console.warn(`new URL(${metaData?.url}) error`)\n    }\n\n    \n\n    return {\n        url: metaData?.url || \"\",\n        hostname,\n        name: metaData?.name || 'DApp',\n        icon: metaData?.icon || getSyncSiteIcon(window),\n        direct_link: metaData?.direct_link,\n        description: metaData?.description\n\n    };\n}\n\n/**\n * Get site metadata.\n *\n * @returns The site metadata.\n */\nexport async function getSiteMetadata() {\n    return {\n        hostname: window.location.hostname,\n        name: getSiteName(window),\n        icon: await getSiteIcon(window),\n    };\n}\n\n/**\n * Extract a name for the site from the DOM.\n *\n * @param windowObject - The window object to extract the site name from.\n * @returns The site name.\n */\nfunction getSiteName(windowObject: typeof window): string {\n    const { document } = windowObject;\n\n    const siteName: HTMLMetaElement | null = document.querySelector(\n        'head > meta[property=\"og:site_name\"]',\n    );\n    if (siteName) {\n        return siteName.content;\n    }\n\n    const metaTitle: HTMLMetaElement | null = document.querySelector(\n        'head > meta[name=\"title\"]',\n    );\n    if (metaTitle) {\n        return metaTitle.content;\n    }\n\n    if (document.title && document.title.length > 0) {\n        return document.title;\n    }\n\n    return window.location.hostname;\n}\n\nfunction getSyncSiteIcon(\n    windowObject: typeof window,\n): String | null {\n    const { document } = windowObject;\n    const icons: NodeListOf<HTMLLinkElement> = document.querySelectorAll(\n        'head > link[rel~=\"icon\"]',\n    );\n    for (const icon of Array.from(icons)) {\n        if (icon) {\n            return icon.href;\n        }\n    }\n    return null;\n}\n\n\n/**\n * Extract an icon for the site from the DOM.\n *\n * @param windowObject - The window object to extract the site icon from.\n * @returns An icon URL, if one exists.\n */\nasync function getSiteIcon(\n    windowObject: typeof window,\n): Promise<string | null> {\n    const { document } = windowObject;\n\n    const icons: NodeListOf<HTMLLinkElement> = document.querySelectorAll(\n        'head > link[rel~=\"icon\"]',\n    );\n    for (const icon of Array.from(icons)) {\n        if (icon && (await imgExists(icon.href))) {\n            return icon.href;\n        }\n    }\n\n    return null;\n}\n\n\n/**\n * Return whether the given image URL exists.\n *\n * @param url - The url of the image.\n * @returns Whether the image exists.\n */\nasync function imgExists(url: string): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n        try {\n            const img = document.createElement('img');\n            img.onload = () => resolve(true);\n            img.onerror = () => resolve(false);\n            img.src = url;\n        } catch (error) {\n            reject(error);\n        }\n    });\n}","// Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\n\nimport { Address } from '@ton/core';\n\ninterface Tag<T extends string, RealType> {\n  __tag__: T;\n  __realType__: RealType;\n}\n\nexport type OpaqueType<T extends string, U> = U & Tag<T, U>;\n\nexport function OpaqueType<T extends Tag<any, any>>() {\n  return (value: T extends Tag<any, infer U> ? U : never): T => value as T;\n}\n\nexport type HexString = OpaqueType<'HexString', string>;\nexport const HexString = OpaqueType<HexString>();\n\nexport type AddressString = OpaqueType<'AddressString', string>;\nexport const AddressString = OpaqueType<AddressString>();\n\nexport type BigIntString = OpaqueType<'BigIntString', string>;\nexport const BigIntString = OpaqueType<BigIntString>();\n\nexport type IntNumber = OpaqueType<'IntNumber', number>;\nexport function IntNumber(num: number): IntNumber {\n  return Math.floor(num) as IntNumber;\n}\n\nexport type RegExpString = OpaqueType<'RegExpString', string>;\nexport const RegExpString = OpaqueType<RegExpString>();\n\nexport type Callback<T> = (err: Error | null, result: T | null) => void;\n\nexport const PROVIDER_ALLIANCE = {\n  EVM: 'evm',\n  SOL: 'sol',\n  TON: 'ton',\n};\n\nexport type Account = {\n  address: string;\n  chainId?: string | number;\n  chainKey?: string;\n  alliance: string;\n  chainName?: string;\n  chainSymbol?: string;\n  name?: string;\n  symbol?: string;\n  publicKey?: string;\n};\n\nexport type SwitchEthereumChainParams = {\n  chainId: number;\n};\n\nexport type initOptions = {\n  bridge?: string;\n  chainId?: number;\n  connect?: string;\n  connect_direct_link?: string;\n  eventTimeout?: number;\n  injected?: boolean;\n  metaData: MetaData;\n};\n\nexport interface MetaData {\n  hostname?: string;\n  icon: string;\n  name: string;\n  url?: string;\n  direct_link?: string;\n  description?: string;\n}\nexport interface TomoOptions {\n  bridge?: string;\n  connect?: string;\n  connect_direct_link?: string;\n  metaData: MetaData;\n  injected: boolean;\n}\n\nexport interface TonTxParams {\n  valid_until?: number | bigint;\n  validUntil?: number | bigint;\n  network?: string;\n  from?: string;\n  messages: {\n    address: string;\n    amount: string;\n    stateInit?: string;\n    payload?: string;\n  }[];\n}\n\nexport enum TonTxBodyType {\n  JETTON_PAYLOAD_JSON_LEGACY = 'JETTON_PAYLOAD_JSON_LEGACY',\n  STANDARD = 'STANDARD',\n}\n\nexport interface TonTransferBodyLegacy {\n  from: string;\n  to: string | Address;\n  value: string | bigint | number;\n  memo?: string;\n  contractAddress?: string;\n  precision?: string;\n  forwardAmount?: string;\n  type?: TonTxBodyType.JETTON_PAYLOAD_JSON_LEGACY;\n  chainId?: number;\n  publicKey?: string;\n}\n\nexport interface TonTxRequestStandard {\n  type: TonTxBodyType.STANDARD;\n  jettonInfo: {\n    recipientAddress: string;\n    amount: string;\n    jettonMinterAddress: string;\n  };\n  body: TonTxParams;\n  chainId: number;\n  publicKey: string;\n}\n\nexport type TonTxRequest = TonTransferBodyLegacy | Partial<TonTxRequestStandard>;\n\ntype SendTransactionResponse =\n  | SendTransactionResponseSuccess\n  | SendTransactionResponseError;\n\ninterface SendTransactionResponseSuccess {\n  result: string;\n  id: string;\n}\n\ninterface SendTransactionResponseError {\n  error: { code: number; message: string };\n  id: string;\n}\n\nexport interface TonProvider {\n  connected: boolean;\n  account: {\n    address: string;\n    publicKey: string;\n  };\n  sendTransaction: (param: TonTxParams) => SendTransactionResponse;\n  disconnect: any;\n  getBalance: any;\n}\n\nexport type IWeb3Type = 'EVM' | 'SOL' | 'BTC' | 'SUI' | 'ALL' | 'TON';\n\nexport interface OutputDef {\n  config: {\n    accounts: Record<string, Account>;\n  };\n  hash: string;\n  salt: string;\n  signature: string;\n  id: string;\n  method: string;\n  params: any[];\n  result: any;\n  options: {\n    account: Account;\n    metaData: {\n      hostname: string;\n      icon: string;\n      name: string;\n      url: string;\n    };\n  };\n}\n\nexport type SupportedProvider = 'EVM' | 'TON' | 'Solana' | 'SUI';\nexport type ConnectType = 'OKX' | 'TOMO' | 'TON' | 'BITGET' | 'UXUY'\n\nexport enum TomoProviderEventName {\n  TOMO_EVM_PROVIDER_DISCONNECTED = 'TOMO_EVM_PROVIDER_DISCONNECTED',\n  TOMO_EVM_PROVIDER_CONNECTED = 'TOMO_EVM_PROVIDER_DISCONNECTED',\n}\n","\nexport const messages = {\n  errors: {\n    disconnected: () =>\n      'ToMoWallet: Disconnected from chain. Attempting to connect.',\n    permanentlyDisconnected: () =>\n      'ToMoWallet: Disconnected from ToMoWallet background. Page reload required.',\n    sendSiteMetadata: () =>\n      `ToMoWallet: Failed to send site metadata. This is an internal error, please report this bug.`,\n    unsupportedSync: (method: string) =>\n      `ToMoWallet: The ToMoWallet Ethereum provider does not support synchronous methods like ${method} without a callback parameter.`,\n    invalidDuplexStream: () => 'Must provide a Node.js-style duplex stream.',\n    invalidNetworkParams: () =>\n      'ToMoWallet: Received invalid network parameters. Please report this bug.',\n    invalidRequestArgs: () => `Expected a single, non-array, object argument.`,\n    invalidRequestMethod: () => `'args.method' must be a non-empty string.`,\n    invalidRequestParams: () =>\n      `'args.params' must be an object or array if provided.`,\n    invalidLoggerObject: () => `'args.logger' must be an object if provided.`,\n    invalidLoggerMethod: (method: string) =>\n      `'args.logger' must include required method '${method}'.`,\n    invalidChains: (chainId: string) =>\n      `'ToMoWallet: not supported chain with ID '${chainId}'. try connect wallet to supported chain.`,\n    timeOut: (method: string) =>\n      `'ToMoWallet: Timed out while waiting for response from '${method}'.`,\n\n  },\n  info: {\n    connected: (chainId: string) =>\n      `ToMoWallet: Connected to chain with ID \"${chainId}\".`,\n  },\n  warnings: {\n    // deprecated properties\n    chainIdDeprecation: `ToMoWallet: 'ethereum.chainId' is deprecated and may be removed in the future. Please use the 'eth_chainId' RPC method instead.`,\n    networkVersionDeprecation: `ToMoWallet: 'ethereum.networkVersion' is deprecated and may be removed in the future. Please use the 'net_version' RPC method instead.`,\n    selectedAddressDeprecation: `ToMoWallet: 'ethereum.selectedAddress' is deprecated and may be removed in the future. Please use the 'eth_accounts' RPC method instead.`,\n    // deprecated methods\n    enableDeprecation: `ToMoWallet: 'ethereum.enable()' is deprecated and may be removed in the future. Please use the 'eth_requestAccounts' RPC method instead.`,\n    sendDeprecation: `ToMoWallet: 'ethereum.send(...)' is deprecated and may be removed in the future. Please use 'ethereum.sendAsync(...)' or 'ethereum.request(...)' instead.`,\n    // deprecated events\n    events: {\n      close: `ToMoWallet: The event 'close' is deprecated and may be removed in the future. Please use 'disconnect' instead.`,\n      data: `ToMoWallet: The event 'data' is deprecated and will be removed in the future. Use 'message' instead.`,\n      networkChanged: `ToMoWallet: The event 'networkChanged' is deprecated and may be removed in the future. Use 'chainChanged' instead.`,\n      notification: `ToMoWallet: The event 'notification' is deprecated and may be removed in the future. Use 'message' instead.`,\n    },\n    rpc: {\n      ethDecryptDeprecation: `ToMoWallet: The RPC method 'eth_decrypt' is deprecated and may be removed in the future.`,\n      ethGetEncryptionPublicKeyDeprecation: `ToMoWallet: The RPC method 'eth_getEncryptionPublicKey' is deprecated and may be removed in the future.`,\n      walletWatchAssetNFTExperimental: `ToMoWallet: The RPC method 'wallet_watchAsset' is experimental for ERC721/ERC1155 assets and may change in the future.`,\n    },\n    // misc\n    experimentalMethods: `ToMoWallet: 'ethereum._ToMoWallet' exposes non-standard, experimental methods. They may be removed or changed without warning.`,\n  },\n\n};\nexport const errorCodes = {\n  rpc: {\n    timeoutRequest: -30008, // 超时\n    invalidInput: -32000,\n    resourceNotFound: -32001,\n    resourceUnavailable: -32002,\n    transactionRejected: -32003,\n    methodNotSupported: -32004,\n    limitExceeded: -32005,\n    parse: -32700,\n    invalidRequest: -32600,\n    methodNotFound: -32601,\n    invalidParams: -32602,\n    internal: -32603,\n  },\n  provider: {\n\n    unsupportedChain: 4002,\n    userRejectedRequest: 4001,\n    unauthorized: 4100,\n    unsupportedMethod: 4200,\n    disconnected: 4900,\n    chainDisconnected: 4901,\n  },\n};\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport const errorValues = {\n  '-32700': {\n    standard: 'JSON RPC 2.0',\n    message:\n      'Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.',\n  },\n  '-32600': {\n    standard: 'JSON RPC 2.0',\n    message: 'The JSON sent is not a valid Request object.',\n  },\n  '-32601': {\n    standard: 'JSON RPC 2.0',\n    message: 'The method does not exist / is not available.',\n  },\n  '-32602': {\n    standard: 'JSON RPC 2.0',\n    message: 'Invalid method parameter(s).',\n  },\n  '-32603': {\n    standard: 'JSON RPC 2.0',\n    message: 'Internal JSON-RPC error.',\n  },\n  '-32000': {\n    standard: 'EIP-1474',\n    message: 'Invalid input.',\n  },\n  '-32001': {\n    standard: 'EIP-1474',\n    message: 'Resource not found.',\n  },\n  '-32002': {\n    standard: 'EIP-1474',\n    message: 'Resource unavailable.',\n  },\n  '-32003': {\n    standard: 'EIP-1474',\n    message: 'Transaction rejected.',\n  },\n  '-32004': {\n    standard: 'EIP-1474',\n    message: 'Method not supported.',\n  },\n  '-32005': {\n    standard: 'EIP-1474',\n    message: 'Request limit exceeded.',\n  },\n  '4001': {\n    standard: 'EIP-1193',\n    message: 'User rejected the request.',\n  },\n  '4100': {\n    standard: 'EIP-1193',\n    message:\n      'The requested account and/or method has not been authorized by the user.',\n  },\n  '4200': {\n    standard: 'EIP-1193',\n    message: 'The requested method is not supported by this Ethereum provider.',\n  },\n  '4900': {\n    standard: 'EIP-1193',\n    message: 'The provider is disconnected from all chains.',\n  },\n  '4901': {\n    standard: 'EIP-1193',\n    message: 'The provider is disconnected from the specified chain.',\n  },\n};\n\n\n\nexport const FALLBACK_MESSAGE = 'Unspecified error message. This is a bug, please report it.';\nexport const rpcErrors = {\n  // timeoutRequest: function ({ code, message, data }: { code?: number | string, message?: string, data?: any }) {\n  //   code = (code || errorCodes.rpc.invalidRequest).toString()\n  //   return {\n  //     code: errorCodes.rpc.invalidRequest,\n  //     message: message || errorValues[code as ErrorValueKey].message || FALLBACK_MESSAGE,\n  //     data\n  //   }\n  // },\n  invalidRequest: function ({ code, message, data }: { code?: number | string, message?: string, data?: any }) {\n    code = (code || errorCodes.rpc.invalidRequest).toString()\n    return {\n      code: code,\n      message: message || errorValues[code as ErrorValueKey].message || FALLBACK_MESSAGE,\n      data\n    }\n  },\n  methodNotSupported: function ({ code, message, data }: { code?: number, message?: string, data?: any }) {\n    return {\n      code: errorCodes.rpc.invalidRequest,\n      message: FALLBACK_MESSAGE || messages.errors.invalidRequestArgs,\n      data\n    }\n  }\n\n}\n\n\nexport type ErrorValueKey = keyof typeof errorValues\n\n","import { Account, IWeb3Type, OutputDef } from '../types/types';\n\nconst outputDef: OutputDef = {\n  config: {\n    accounts: {\n      eth: {\n        address: '',\n        alliance: 'evm',\n        name: '',\n        chainId: undefined,\n        symbol: '',\n      },\n    },\n  },\n  hash: '',\n  salt: '',\n  signature: '',\n  id: '',\n  method: '',\n  params: [],\n  result: [],\n  options: {\n    account: {\n      address: '',\n      alliance: 'evm',\n      name: '',\n      chainId: undefined,\n      symbol: '',\n      chainKey: '',\n      chainName: '',\n      chainSymbol: '',\n    },\n    metaData: {\n      hostname: '',\n      icon: '',\n      name: '',\n      url: '',\n    },\n  },\n};\nexport const loginDefineProperties = (\n  request: any,\n  response: any,\n  chain: IWeb3Type = 'EVM',\n  isTonProof = false\n) => {\n  const output = { ...outputDef }; //keep deep link\n  output.hash = request.hash;\n  output.salt = request.salt;\n  output.signature = request.signature;\n  output.id = request.id;\n  output.method = request.method;\n  output.params = request.params;\n  if (response.code === 10000) {\n    if (chain === 'EVM') {\n      output.config.accounts = {\n        eth: {\n          address:\n            response.result.defaultEthereumAddress ?? response.result.v2Address,\n          alliance: 'evm',\n          name: 'ethereum',\n          chainId: 1,\n          symbol: 'ETH',\n        },\n      };\n    } else {\n      const res = isTonProof ? response.result.user : response.result;\n      output.config.accounts = formatAccount(\n        chain,\n        res,\n        request.params?.[0]?.chainId\n      );\n    }\n\n    output.result =\n      chain === 'EVM'\n        ? [response.result.defaultEthereumAddress ?? response.result.v2Address]\n        : output.config.accounts[chain.toLowerCase()];\n\n    if (isTonProof) {\n      output.result.tonProof = response.result.tonProof;\n      output.result.stateInit = response.result.stateInit;\n    }\n  } else {\n    throw new Error(JSON.stringify(response));\n  }\n  output.options.account =\n    output.config.accounts[chain === 'EVM' ? 'eth' : chain.toLowerCase()];\n  return output;\n};\n\nexport const signDefineProperties = (\n  request: any,\n  response: any,\n  source: any,\n  chain: IWeb3Type = 'EVM'\n) => {\n  const output = { ...outputDef };\n  if (chain === 'EVM') {\n    output.config.accounts = {\n      eth: source,\n    };\n  } else {\n    output.config.accounts = {\n      [chain.toLowerCase()]: source,\n    };\n  }\n  output.hash = request.hash;\n  output.salt = request.salt;\n  output.signature = request.signature;\n  output.id = request.id;\n  output.method = request.method;\n  output.params = request.params;\n  output.result = response ?? {\n    code: -1,\n    message: 'Network error',\n    result: undefined,\n  };\n  output.options.account =\n    output.config.accounts[chain === 'EVM' ? 'eth' : chain.toLowerCase()];\n  return output;\n};\n\nexport const formatAccount = (\n  chain: IWeb3Type,\n  res,\n  chainId\n): Record<string, Account> => {\n  switch (chain) {\n    case 'BTC':\n      return {\n        btc: {\n          address: res.defaultBtcAddress,\n          alliance: 'btc',\n          name: 'bitcoin',\n          chainId: chainId || 0,\n          symbol: 'BTC',\n        },\n      };\n    case 'SOL':\n      return {\n        sol: {\n          address: res.solanaAddress,\n          alliance: 'sol',\n          name: 'solana',\n          chainId: chainId || 501,\n          symbol: 'SOL',\n        },\n      };\n    case 'TON':\n      return {\n        ton: {\n          // TODO: testnet address need to be changed\n          address: chainId === 1101 ? res.tonAddressTest : res.tonAddress,\n          publicKey: res.tonPublicKey,\n          alliance: 'ton',\n          name: 'ton',\n          chainId: chainId || 1100,\n          symbol: 'TON',\n        },\n      };\n    case 'SUI':\n      return {\n        sui: {\n          address: res.suiAddress,\n          alliance: 'sui',\n          name: 'sui',\n          chainId: chainId || 784,\n          symbol: 'SUI',\n        },\n      };\n    default:\n      return {\n        eth: {\n          address: res.defaultEthereumAddress ?? res.v2Address,\n          alliance: 'evm',\n          name: 'ethereum',\n          chainId: 1,\n          symbol: 'ETH',\n        },\n      };\n  }\n};\n","import { AppInfo } from '../constant';\nimport { getSyncSiteMetadata } from '../metaData';\nimport { Account, initOptions, PROVIDER_ALLIANCE } from '../types/types';\nimport ProxyLocalStorage from '../ProxyLocalStorage';\nimport EventEmitter from 'eventemitter3';\nimport axios from 'axios';\nimport { errorCodes, messages, rpcErrors } from '../message';\nimport { tgUtils } from '../utils/utils';\nimport {\n  loginDefineProperties,\n  signDefineProperties,\n} from '../utils/properties';\ninterface RequestOptions {\n  account: Account;\n  metaData: initOptions['metaData'];\n  timeStamp?: number;\n}\n\nfunction transfer16(val: string | number = 0) {\n  val = isNaN(Number(val)) ? 1 : Number(val);\n  return '0x' + val.toString(16);\n}\n\n/** for clear walletPromise when timeout or promise finally */\nconst walletPromiseTimeoutClear = (() => {\n  const walletPromiseMap: Map<string, Promise<Record<string, any>>> = new Map();\n\n  return (id, fn, timeout = 1000) => {\n    if (walletPromiseMap.has(id)) return walletPromiseMap.get(id);\n    const promise: Promise<Record<string, any>> = fn();\n    walletPromiseMap.set(id, promise);\n    setTimeout(() => {\n      walletPromiseMap.delete(id);\n    }, timeout);\n    return promise.finally(() => {\n      walletPromiseMap.delete(id);\n    });\n  };\n})();\n\nconst defaultAccount: Account = {\n  address: '',\n  chainId: '0x1',\n  chainKey: 'ethereum',\n  alliance: PROVIDER_ALLIANCE.EVM,\n  chainName: 'Ethereum netWork',\n  chainSymbol: 'ETH',\n};\n\nexport default class ProviderUtils extends EventEmitter {\n  eventTimeout: number;\n  storage: ProxyLocalStorage;\n  metaData: initOptions['metaData'];\n  connectUrl: string;\n  bridgeUrl: string;\n  connect_direct_link: string;\n  private _isRetryCount: number = 0;\n  get _lastTime() {\n    return isNaN(Number(this.storage.get('lastTime') || 0))\n      ? 0\n      : Number(this.storage.get('lastTime') || 0);\n  }\n  set _lastTime(value) {\n    this.storage.set('lastTime', value);\n  }\n\n  get _account() {\n    return this.storage.get('account') || defaultAccount;\n  }\n  set _account(account: Account | null) {\n    const oldAccount = { ...(this._account || defaultAccount) };\n\n    if (!account) {\n      account = {\n        ...oldAccount,\n        address: '',\n      };\n    }\n    this.storage.set('account', account);\n\n    if (transfer16(oldAccount?.chainId) != transfer16(account?.chainId)) {\n      this.emit('chainChanged', this?.chainId, account?.alliance, account);\n      this.emit('networkChanged', parseInt(this?.chainId), account?.alliance);\n    }\n    if (oldAccount?.address != account?.address) {\n      this.emit('accountsChanged', account?.address ? [account?.address] : []);\n    }\n  }\n\n  get _accounts() {\n    return (\n      this.storage.get(`accounts`) || {\n        ethereum: defaultAccount,\n      }\n    );\n  }\n  set _accounts(accounts: { [key: string]: Account }) {\n    this.storage.set(`accounts`, accounts);\n  }\n\n  get chainId() {\n    return this._account?.chainId ? transfer16(this._account?.chainId) : null;\n  }\n\n  constructor(options?: initOptions) {\n    super();\n    this.eventTimeout = options?.eventTimeout || 10 * 60 * 1000;\n    this.metaData = options?.metaData;\n    this.storage = new ProxyLocalStorage();\n    this.connectUrl = options.connect;\n    this.bridgeUrl = options.bridge;\n    this.connect_direct_link = options.connect_direct_link;\n  }\n\n  async request(payload: { method: string; params: any[] }) {\n    const { method, params = [] } = payload || {};\n\n    if (!payload || typeof payload !== 'object' || Array.isArray(payload)) {\n      throw rpcErrors.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: params,\n      });\n    }\n\n    if (typeof method !== 'string' || method.length === 0) {\n      throw rpcErrors.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: payload as any,\n      });\n    }\n\n    const requestKey = `${method}-${JSON.stringify(params || [])}`;\n    return walletPromiseTimeoutClear(requestKey, () =>\n      this.connectSse(method, params)\n    );\n  }\n\n  /** get sse token / add salt */\n  async getSseToken(method, params, options?: RequestOptions) {\n    const account = this._account;\n    const now = new Date().getTime();\n    this._lastTime = now;\n    options = {\n      account,\n      metaData: getSyncSiteMetadata(this.metaData),\n      ...options,\n      timeStamp: now,\n    };\n    const id =\n      new Date().getTime() + Math.floor(Math.random() * 1000).toString();\n\n    let salt = `salt-${Date.now()}-${id}`;\n    salt = Buffer.from(salt, 'utf-8')\n      .toString('base64')\n      .replace('==', '')\n      .replace('=', '');\n\n    const payload = {\n      id,\n      method,\n      params,\n      options,\n    };\n\n    // push参数\n    const publish_params = {\n      id: payload.id,\n      data: payload,\n      version: '1.0',\n      salt: salt,\n    };\n    const response = await axios.post(\n      this.connectUrl,\n      {\n        payload_base64: Buffer.from(\n          JSON.stringify(publish_params),\n          'utf-8'\n        ).toString('base64'),\n      },\n      {\n        headers: {\n          'X-Salt': salt,\n        },\n      }\n    );\n\n    const { hash, signature } = response.data;\n    return { hash, signature, salt };\n  }\n\n  /** connect sse */\n  async connectSse(method, params, options?: RequestOptions) {\n    // add salt\n    const { salt, hash, signature } = await this.getSseToken(\n      method,\n      params,\n      options\n    );\n    // deepLink param\n    const direct_params = {\n      method,\n      params: [salt, hash, signature],\n    };\n    const id =\n      new Date().getTime() + Math.floor(Math.random() * 1000).toString();\n    const request = {\n      id,\n      method,\n      params,\n      options,\n      hash,\n      signature,\n      salt,\n    };\n    return this.createEventSource(\n      hash,\n      signature,\n      salt,\n      direct_params,\n      request\n    );\n  }\n\n  /** create EventSource */\n  createEventSource(hash, signature, salt, direct_params, request) {\n    const eventSource = new EventSource(\n      `${this.bridgeUrl}?appid=${hash}&signature=${signature}&salt=${salt}`\n    );\n    return new Promise((resolve, reject) => {\n      const timer =\n        this.eventTimeout > 0\n          ? setTimeout(() => {\n              reject(\n                rpcErrors.invalidRequest({\n                  code: errorCodes?.rpc?.timeoutRequest,\n                  message: messages.errors.timeOut(request.method),\n                  data: request as any,\n                })\n              );\n              eventSource.close();\n            }, this.eventTimeout || 60000)\n          : null;\n\n      eventSource.addEventListener('message', event => {\n        if (event?.data === 'hi' || event?.data === 'close') return;\n        if (!event?.data) {\n          this._isRetryCount += 1;\n          eventSource.close();\n          clearTimeout(timer);\n          if (this._isRetryCount > 4) {\n            this._isRetryCount = 0;\n            throw new Error('Tomo Wallet Request error');\n          }\n          // retry, max 4 times\n          return this.createEventSource(\n            hash,\n            signature,\n            salt,\n            direct_params,\n            request\n          );\n        }\n\n        const [chain, operation] = request.method.split('_');\n\n        try {\n          const decodedString = atob(event?.data);\n          let data = JSON.parse(decodedString);\n\n          const source = this.storage.get('account');\n\n          if (operation.includes('connect')) {\n            const isTonProof = request.params[0]?.tonProof;\n            data = loginDefineProperties(request, data, chain.toUpperCase(), isTonProof);\n            this.storage.set('account', data.options.account);\n            // add useId in storage key\n            this.storage.set(`accounts`, {\n              ...(this.storage.get(`accounts`) || {}),\n              [chain.toLowerCase()]: data.options.account,\n            });\n          } else {\n            data = signDefineProperties(request, data, source, chain);\n          }\n\n          if (data?.id == request.id || salt == data?.salt) {\n            eventSource?.close();\n\n            clearTimeout(timer);\n            if (data.reConnect || !data.error) {\n              ProxyResponse.call(this, data);\n            }\n\n            this._isRetryCount = 0;\n            data.error ? reject(data.error) : resolve({ ...data.result });\n            return;\n          } else {\n            return console.log('Tomo wallet data error');\n          }\n        } catch (error) {\n          console.log(error);\n          reject(error)\n        }\n      });\n\n      this.openAuthBot(direct_params);\n    });\n  }\n\n  /** open auth bot */\n  openAuthBot(direct_params: { method: string; params: any[] }) {\n    let base64Content = { method: direct_params.method, params: direct_params.params };\n    let base64ContentStr = JSON.stringify(base64Content);\n    const utf8Array = new TextEncoder().encode(base64ContentStr);\n    const base64Encoded = btoa(String.fromCharCode(...utf8Array));\n\n    if (!this._isRetryCount) {\n      const Telegram = window.Telegram;\n      // check is tg web app sdk available\n      if (!Telegram) {\n        throw `[TOMO] please include https://telegram.org/js/telegram-web-app.js in your project`\n      }\n      const url = `${\n        this.connect_direct_link\n      }?startapp=${base64Encoded}&mode=compact`;\n      Telegram.WebApp.initData && Telegram?.WebApp?.openTelegramLink?.(url);\n\n      if (!Telegram.WebApp.initData) {\n        const match = this.connect_direct_link.match(\n          /t\\.me\\/([^\\/]+)\\/([^\\/]+)/\n        );\n        if (match[1] && match[2]) {\n          !Telegram.WebApp.initData &&\n            tgUtils.opendeepLink(base64Encoded, {\n              domain: match[1],\n              appname: match[2],\n            });\n        } else {\n          !Telegram.WebApp.initData && tgUtils.opendeepLink(base64Encoded, {});\n        }\n      }\n    }\n  }\n\n  /** get tomo bot app infp */\n  getAppInfo() {\n    return {\n      ...AppInfo,\n    };\n  }\n\n  removeAccount(chainType) {\n    this._accounts = { ...this._accounts, [chainType]: null };\n  }\n\n  getMethodInfo(methodString: string) {\n    return methodString.split('_') || [];\n  }\n}\n\nfunction ProxyResponse(reponsePayload) {\n  const { method, config, params, result } = reponsePayload || {};\n  const requestParams = config?.params?.[0] || {};\n  if (config) {\n    // console.log('ProxyResponse', reponsePayload);\n    const accounts = config?.accounts;\n    accounts && (this._accounts = { ...(this._accounts || {}), ...accounts });\n\n    return reponsePayload;\n  }\n}\n","\n//@ts-nocheck\n// todo  类型处理\ntype EIP712Types = {\n  [propsKey: string]: any\n}\nfunction _sanitizeData(data: EIP712Types) {\n  const TYPED_MESSAGE_SCHEMA = {\n      type: 'object',\n      properties: {\n          types: {\n              type: 'object',\n              additionalProperties: {\n                  type: 'array',\n                  items: {\n                      type: 'object',\n                      properties: {\n                          name: { type: 'string' },\n                          type: { type: 'string' },\n                      },\n                      required: ['name', 'type'],\n                  },\n              },\n          },\n          primaryType: { type: 'string' },\n          domain: { type: 'object' },\n          message: { type: 'object' },\n      },\n      required: ['types', 'primaryType', 'domain', 'message'],\n  };\n  const sanitizedData: EIP712Types = {};\n  for (const key in TYPED_MESSAGE_SCHEMA.properties) {\n      if (data[key]) {\n          sanitizedData[key] = data[key];\n      }\n  }\n  if ('types' in sanitizedData) {\n      sanitizedData.types = Object.assign({ EIP712Domain: [] }, sanitizedData.types);\n  }\n  return sanitizedData;\n}\n\n\n\n// eip712 过滤签名消息\nexport function vaildatorEIP712(EIP712Data: EIP712Types) {\n  try {\n      EIP712Data = typeof EIP712Data == 'string' ? JSON.parse(EIP712Data) : EIP712Data\n  } catch (error) {\n      console.log('EIP712Data is not a valid JSON string')\n  }\n  try {\n      // 保留标准结构\n      EIP712Data = _sanitizeData(EIP712Data)\n      // 生成真实签名数据\n      const extractedData: EIP712Types = {}\n      const realRequestFields = EIP712Data.types[EIP712Data.primaryType]\n      realRequestFields.map(({ name }: { name: any }) => {\n          extractedData[name] = EIP712Data.message[name]\n      })\n      EIP712Data.message = extractedData\n      return EIP712Data\n  } catch (err) {\n      console.error(\"parseEIP712 error\")\n  }\n  return EIP712Data\n\n}\n\n\n\n\nexport function resemblesEvmAddress(string = '') {\n  // hex prefix 2 + 20 bytes\n  return string.length === (2 + (20 * 2))\n}","// @ts-nocheck\nimport EventEmitter from 'eventemitter3';\n\nexport type AbstractAdapterOptions = {\n    protocol?: string\n}\nexport default class AbstractAdapter extends EventEmitter {\n  \n\n    constructor({protocol}: AbstractAdapterOptions) {\n        super();\n        this.protocol = protocol \n        this._initializeChannelMessage()\n    }\n\n    _initializeChannelMessage(){}\n}\n","/* eslint-disable @typescript-eslint/camelcase */\nimport axios from 'axios';\nimport { Buffer } from 'buffer';\nimport ProviderUtils from '../ProviderUtils';\nimport { BASE_URL } from '../../constant';\n\nimport {\n  Account,\n  MetaData,\n  PROVIDER_ALLIANCE,\n  SwitchEthereumChainParams,\n  TomoProviderEventName,\n  initOptions,\n} from '../../types/types';\nimport { messages, errorCodes, rpcErrors } from '../../message';\nimport { getSyncSiteMetadata } from '../../metaData';\nimport { vaildatorEIP712, resemblesEvmAddress } from '../../utils/validator';\nimport {\n  loginDefineProperties,\n  signDefineProperties,\n} from '../../utils/properties';\nimport { AppInfo } from '../../constant';\n\nimport AbstractProvider from '../AbstractProvider';\n\nfunction transfer16(val: string | number = 0) {\n  val = isNaN(Number(val)) ? 1 : Number(val);\n  return '0x' + val.toString(16);\n}\n\nconst defaultAccount: Account = {\n  address: '',\n  chainId: '0x1',\n  chainKey: 'ethereum',\n  alliance: PROVIDER_ALLIANCE.EVM,\n  chainName: 'Ethereum netWork',\n  chainSymbol: 'ETH',\n};\n\ninterface HttpProviderOptions {\n  chainId: string;\n  url: string;\n}\n\ninterface RequestOptions {\n  account: Account;\n  metaData: initOptions['metaData'];\n}\n\nasync function getChainList() {\n  return await axios.get(\n    'https://d13t1x9bdoguib.cloudfront.net/static/chainList.json'\n  );\n}\n\nclass HttpProvider {\n  options: HttpProviderOptions;\n  rpcMap: Map<number, string>;\n  peddingMap: Map<number, any>;\n  constructor(options?: HttpProviderOptions) {\n    this.options = options;\n    this.rpcMap = new Map();\n    this.peddingMap = new Map();\n    options?.chainId && this.setUrl(options.url, options.chainId);\n  }\n  setUrl(url, chainId) {\n    this.rpcMap.set(parseInt(chainId), url);\n  }\n  getUrl(chainId) {\n    return this.rpcMap.get(parseInt(chainId));\n  }\n\n  async send(\n    payload: {\n      method: string;\n      params: any[];\n      id?: number;\n    },\n    options: {\n      chainId: string;\n      chainKey?: string;\n      rpcUrl?: string;\n      account?: Account;\n    }\n  ) {\n    let { method, params, id } = payload;\n    const rpcUrl = options.rpcUrl || this.getUrl(options.chainId);\n    // const { chainId } = options\n    // const url = this.rpcMap.get(chainId)\n    const requestParams = {\n      jsonrpc: '2.0',\n      method,\n      params,\n      id: id || new Date().getTime(),\n    };\n\n    const response = await axios.post(rpcUrl, requestParams);\n\n    // return response.data\n    const { result, error } = response.data;\n    if (error) {\n      throw error;\n    }\n    return response.data.result;\n  }\n\n  async sendBatch(payloads, options = {}) {\n    const results = [];\n    for (const payload of payloads) {\n      const result = await this.send(payload, options as any);\n      results.push(result);\n    }\n    return results;\n  }\n}\n\nclass ProxyLocalStorage {\n  prefix = 'tomo-tg-wallet-';\n  constructor() {}\n  get(key) {\n    try {\n      let value = localStorage.getItem(`${this.prefix}${key}`);\n      return value ? JSON.parse(value) : null;\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n  }\n  set(key, value) {\n    try {\n      localStorage.setItem(`${this.prefix}${key}`, JSON.stringify(value));\n      return value;\n    } catch (error) {\n      return null;\n    }\n  }\n}\n\nfunction ProxyResponse(this: EthereumProvider, responsePayload) {\n  const { method, config, params, result } = responsePayload || {};\n  const requestParams = config?.params?.[0] || {};\n  if (config) {\n    const accounts = config?.accounts;\n    accounts && (this._accounts = accounts);\n\n    switch (method) {\n      case 'wallet_switchEthereumChain':\n      case 'wallet_addEthereumChain':\n        const isExist = Object.values(this._accounts || {}).find(\n          account =>\n            transfer16(account.chainId) === transfer16(requestParams.chainId)\n        );\n        if (isExist) {\n          this._account = {\n            ...isExist,\n          };\n        } else {\n          responsePayload.error = {\n            code: -32602,\n            message: `tomo wallet does not support  ${requestParams?.chainId}`,\n          };\n        }\n        break;\n      case 'eth_requestAccounts':\n        this._account =\n          this._accounts[this._account?.chainKey] ||\n          Object.values(this._accounts)[0];\n        break;\n      default:\n        break;\n    }\n    return responsePayload;\n  }\n}\n\nconst walletPromiseTimeoutClear = (() => {\n  const walletPromiseMap: Map<string, number> = new Map();\n\n  return (id, fn, timeout = 1000) => {\n    if (walletPromiseMap.has(id)) return walletPromiseMap.has(id);\n    const promise = fn();\n    walletPromiseMap.set(id, promise);\n    setTimeout(() => {\n      walletPromiseMap.delete(id);\n    }, timeout);\n    return promise.finally(() => {\n      walletPromiseMap.delete(id);\n    });\n  };\n})();\n\nconst isReConnect = (lastTime, timeout = 1000 * 60 * 15) => {\n  const now = new Date().getTime();\n  return now - lastTime > timeout;\n};\n\ninterface OverrideRpcUrl {\n  [chainId: number]: string;\n}\n\nexport class EthereumProvider extends AbstractProvider {\n  version: string;\n  // state: any\n  connectUrl: string;\n  bridgeUrl: string;\n  connect_direct_link: string;\n  httpProvider: HttpProvider;\n  storage: ProxyLocalStorage;\n  utils: ProviderUtils;\n  eventTimeout: number;\n  metaData: MetaData;\n\n  public autoRefreshOnNetworkChange = true;\n  public _isMetaMask = true;\n  public isMetaMask = true;\n  public _isConnected = false;\n  public isTomoWallet = true;\n  private _isRetryCount = 0;\n  private chainList: { id: number; name: string; rpcUrl }[] = [];\n  private overrideRpcUrl: OverrideRpcUrl = {};\n\n  // _accounts: {\n  //     [key: string]: Account\n  // }\n  // _account: Account | null\n  get _lastTime() {\n    return isNaN(Number(this.storage.get('lastTime') || 0))\n      ? 0\n      : Number(this.storage.get('lastTime') || 0);\n  }\n  set _lastTime(value) {\n    this.storage.set('lastTime', value);\n  }\n  get _account() {\n    return this.storage.get('evm_account') || defaultAccount;\n  }\n  set _account(account: Account | null) {\n    const oldAccount = { ...(this._account || defaultAccount) };\n\n    if (!account) {\n      account = {\n        ...oldAccount,\n        address: '',\n      };\n    }\n    this.storage.set('evm_account', account);\n\n    if (transfer16(oldAccount?.chainId) != transfer16(account?.chainId)) {\n      this.emit('chainChanged', this?.chainId, account?.alliance, account);\n      this.emit('networkChanged', parseInt(this?.chainId), account?.alliance);\n    }\n    if (oldAccount?.address != account?.address) {\n      this.emit('accountsChanged', account?.address ? [account?.address] : []);\n    }\n  }\n  get _accounts() {\n    return (\n      this.storage.get('evm_accounts') || {\n        ethereum: defaultAccount,\n      }\n    );\n  }\n  set _accounts(accounts: { [key: string]: Account }) {\n    this.storage.set('evm_accounts', accounts);\n  }\n\n  get networkVersion() {\n    return parseInt(this.chainId);\n  }\n\n  get chainId() {\n    const chainId = this.utils.storage.get('evm_chainId');\n    return transfer16(chainId);\n  }\n\n  get chainKey() {\n    return this._account?.chainKey || defaultAccount?.chainKey;\n  }\n\n  get connected() {\n    return this._account?.address ? true : false;\n  }\n  get selectedAddress() {\n    return this._account?.address || '';\n  }\n\n  constructor(options: initOptions & { overrideRpcUrl?: OverrideRpcUrl }) {\n    super({\n      protocol: PROVIDER_ALLIANCE.EVM,\n    });\n\n    if (options.overrideRpcUrl) this.overrideRpcUrl = options.overrideRpcUrl;\n\n    this.utils = new ProviderUtils({\n      ...BASE_URL,\n      ...options,\n    });\n\n    this.version = this.getAppInfo().version;\n\n    this.connectUrl = options.connect || BASE_URL.connect;\n    this.bridgeUrl = options.bridge || BASE_URL.bridge;\n    this.connect_direct_link =\n      options.connect_direct_link || BASE_URL.connect_direct_link;\n\n    this.eventTimeout = options?.eventTimeout || 10 * 60 * 1000;\n    this.metaData = options.metaData;\n\n    this.storage = new ProxyLocalStorage();\n    this.httpProvider = new HttpProvider({\n      chainId: '0x1',\n      url: 'https://rpc.ankr.com/eth',\n    });\n\n    this._initialize();\n    getChainList()\n      .then(response => (this.chainList = response.data as any))\n      .catch(() => {\n        // todo what if cannot fetch chain list\n      });\n    if (\n      typeof window !== 'undefined' &&\n      !window?.ethereum &&\n      options.injected\n    ) {\n      window.ethereum = this;\n      console.log('injected in evm provider');\n      dispatchEvent(new Event('ethereum#initialized'));\n    }\n  }\n\n  checkIsChainSupported(chainId: string | number) {\n    const chainIdNum = Number(chainId);\n    return !!this.chainList.find(c => c.id === chainIdNum);\n  }\n\n  _initialize() {\n    this.emit('connect', { chainId: this?.chainId });\n    this.emit('_initialized');\n  }\n\n  async _walletSwitchChain(payload: {\n    method: string;\n    params: Array<SwitchEthereumChainParams>;\n  }) {\n    const { method, params } = payload;\n    const requestParams = params[0];\n    let isExist = Object.values(this._accounts || {}).find(\n      account =>\n        transfer16(account.chainId) === transfer16(requestParams.chainId)\n    );\n    if (!isExist) {\n      await this.request({\n        method: 'eth_requestAccounts',\n      });\n      isExist = Object.values(this._accounts || {}).find(\n        account =>\n          transfer16(account.chainId) === transfer16(requestParams.chainId)\n      );\n      if (!isExist) {\n        throw rpcErrors.invalidRequest({\n          code: errorCodes.provider.unsupportedChain,\n          message: messages.errors.invalidChains(\n            requestParams?.chainId.toString()\n          ),\n          data: params,\n        });\n      }\n    }\n    this._account = isExist;\n    return null;\n  }\n\n  getAppInfo() {\n    return {\n      ...AppInfo,\n    };\n  }\n\n  async enable() {\n    return this.request({ method: 'eth_requestAccounts' });\n  }\n\n  get isConnected() {\n    return this.connected;\n  }\n\n  getRpcUrl() {\n    let rpcUrl = this.chainList.find(c => c.id === Number(this.chainId)).rpcUrl;\n    if (this.overrideRpcUrl[+this.chainId])\n      rpcUrl = this.overrideRpcUrl[+this.chainId];\n    return rpcUrl;\n  }\n\n  async request(payload: { method: string; params?: any[] }): Promise<any> {\n    const { method, params = [] } = payload || {};\n\n    if (!payload || typeof payload !== 'object' || Array.isArray(payload)) {\n      throw rpcErrors.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: params,\n      });\n    }\n\n    if (typeof method !== 'string' || method.length === 0) {\n      throw rpcErrors.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: payload as any,\n      });\n    }\n\n    try {\n      const requestKey = `${method}-${JSON.stringify(params || [])}`;\n\n      switch (method) {\n        case 'wallet_requestPermissions': // this is for rainbowkit\n          throw 'wallet_requestPermissions not supported';\n        case 'eth_requestAccounts':\n          const isRreConnected = isReConnect(this._lastTime, this.eventTimeout);\n          if (this?._account?.address && !isRreConnected) {\n            return [this._account.address];\n          }\n          return walletPromiseTimeoutClear(requestKey, () =>\n            this._request(method, params)\n          );\n        case 'eth_accounts':\n          return [this._account?.address];\n        case 'eth_chainId':\n          return this.chainId;\n        case 'wallet_switchEthereumChain':\n        case 'wallet_addEthereumChain': {\n          if (!this.connected) {\n            await this.request({\n              method: 'eth_requestAccounts',\n            });\n          }\n          const { chainId } = params[0] as any;\n          // const isChainSupported = this.checkIsChainSupported(chainId);\n          this.utils.storage.set('evm_chainId', chainId);\n          // if (!isChainSupported)\n          //  `chain ${chainId} is not supported`;\n          return null;\n        }\n        case 'wallet_watchAsset':\n        // case 'wallet_addSeed': // todo seems to be implemented already\n        case 'metamask_watchAsset':\n          return walletPromiseTimeoutClear(requestKey, () =>\n            this._request(method, params)\n          );\n        case 'personal_sign':\n        case 'eth_signETHTransaction':\n        case 'eth_signErc20Transaction':\n        case 'eth_signTypedData':\n        case 'eth_signTransaction':\n          if (!this.connected) {\n            await this.request({\n              method: 'eth_requestAccounts',\n            });\n          }\n          return walletPromiseTimeoutClear(requestKey, () =>\n            this._request(method, params)\n          );\n        case 'eth_sendTransaction': {\n          const param = params[0];\n          let { chainId: chainIdResolved } = param as any;\n          if (!chainIdResolved) chainIdResolved = this.chainId;\n          const signRes = await this.request({\n            method: 'eth_signTransaction',\n            params: [\n              {\n                ...param,\n                chainId: chainIdResolved,\n              },\n            ],\n          });\n\n          const rpc = this.getRpcUrl();\n          const signedTx = signRes.result;\n          return this.httpProvider.send(\n            {\n              method: 'eth_sendRawTransaction',\n              params: [signedTx],\n            },\n            {\n              chainId: chainIdResolved,\n              chainKey: this.chainKey,\n              rpcUrl: rpc, // TODO\n            }\n          );\n        }\n        case 'eth_signTypedData_v3':\n        case 'eth_signTypedData_v4':\n          if (!this.connected) {\n            await this.request({\n              method: 'eth_requestAccounts',\n            });\n          }\n          let signPersonalMessageV4 = payload.params[0];\n          if (\n            resemblesEvmAddress(payload.params[0]) &&\n            !resemblesEvmAddress(payload.params[1])\n          ) {\n            signPersonalMessageV4 = payload.params[1];\n          }\n          params[0] = vaildatorEIP712(signPersonalMessageV4);\n          return walletPromiseTimeoutClear(requestKey, () =>\n            this._request(method, params)\n          );\n        default: {\n          const rpcUrl = this.getRpcUrl();\n          return this.httpProvider.send(payload as any, {\n            chainId: this.chainId,\n            chainKey: this.chainKey,\n            rpcUrl, // TODO\n          });\n        }\n      }\n    } catch (error) {\n      console.log(error);\n      return Promise.reject(\n        typeof error == 'object'\n          ? error\n          : {\n              code: -32603,\n              message: error,\n            }\n      );\n    }\n  }\n\n  async _createEventSource(\n    hash,\n    signature,\n    salt: string,\n    direct_params: { method: string; params: any[] },\n    request\n  ) {\n    const eventSource = new EventSource(\n      `${this.bridgeUrl}?appid=${hash}&signature=${signature}&salt=${salt}`\n    );\n    return new Promise((resolve, reject) => {\n      const timer =\n        this.eventTimeout > 0\n          ? setTimeout(() => {\n              reject(\n                rpcErrors.invalidRequest({\n                  code: errorCodes?.rpc?.timeoutRequest,\n                  message: messages.errors.timeOut(direct_params.method),\n                  data: direct_params.params,\n                })\n              );\n              eventSource.close();\n            }, this.eventTimeout || 60000)\n          : null;\n      // @ts-ignore\n      eventSource.addEventListener('message', event => {\n        // @ts-ignore\n        if (event?.data === 'hi' || event?.data === 'close') return;\n        if (!event?.data) {\n          this._isRetryCount += 1;\n          eventSource.close();\n          clearTimeout(timer);\n          if (this._isRetryCount > 4) {\n            this._isRetryCount = 0;\n            throw new Error('Tomo Wallet Request error');\n          }\n          return this._createEventSource(\n            hash,\n            signature,\n            salt,\n            direct_params,\n            request\n          );\n        }\n        try {\n          const decodedString = atob(event?.data);\n          let data = JSON.parse(decodedString);\n          if (\n            request.method === 'eth_requestAccounts' ||\n            request.method === 'wallet_requestPermissions'\n          ) {\n            data = loginDefineProperties(request, data);\n          } else if (\n            request.method === 'eth_signETHTransaction' ||\n            request.method === 'eth_signTransaction'\n          ) {\n            const source = this._account;\n            data = signDefineProperties(request, data, source);\n          } else if (request.method === 'personal_sign') {\n            const source = this._account;\n            console.log('personal_sign data', data);\n            data = signDefineProperties(request, data.result, source);\n          } else if (request.method === 'eth_signErc20Transaction') {\n            const source = this._account;\n            data = signDefineProperties(request, data, source);\n          }\n          // not supposes to support\n          // else if (request.method === 'wallet_addSeed') {\n          // const source = this._account;\n          // data = signDefineProperties(request, data, source);\n          // const acc_ = this._accounts\n          // if (data.result.code === 10000) {\n          //   acc_.eth.account = data.result.result.wallet_address;\n          //   acc_.eth.address = data.result.result.wallet_address;\n          // this._accounts = acc_;\n          // this._account =  acc_.eth;\n          // }\n          // }\n          if (data?.id == request.id || salt == data?.salt) {\n            eventSource?.close();\n\n            clearTimeout(timer);\n            if (data.reConnect || !data.error) {\n              ProxyResponse.call(this, data);\n            }\n            this._isRetryCount = 0;\n            data.error ? reject(data.error) : resolve(data.result);\n          } else {\n            console.log('Tomo wallet data error');\n          }\n        } catch (error) {\n          console.log(error);\n        }\n      });\n\n      this.utils.openAuthBot(direct_params);\n    });\n  }\n\n  async _request(method, params, options?: RequestOptions) {\n    const account = this._account;\n    const now = new Date().getTime();\n    this._lastTime = now;\n    options = {\n      account: account,\n      metaData: getSyncSiteMetadata(this.metaData),\n      ...options,\n      timeStamp: now,\n    } as any;\n    const id =\n      new Date().getTime() + Math.floor(Math.random() * 1000).toString();\n\n    let salt = `salt-${Date.now()}-${id}`;\n    salt = Buffer.from(salt, 'utf-8')\n      .toString('base64')\n      .replace('==', '')\n      .replace('=', '');\n\n    const payload = {\n      id,\n      method,\n      params,\n      options,\n    };\n\n    // push参数\n    const publish_params = {\n      id: payload.id,\n      data: payload,\n      version: '1.0',\n      salt: salt,\n    };\n    const response = await axios.post(\n      this.connectUrl,\n      {\n        payload_base64: Buffer.from(\n          JSON.stringify(publish_params),\n          'utf-8'\n        ).toString('base64'),\n      },\n      {\n        headers: {\n          'X-Salt': salt,\n        },\n      }\n    );\n\n    const { hash, signature } = response.data;\n    //深度链参数\n    const direct_params = {\n      method,\n      params: [salt, hash, signature],\n    };\n    const request = {\n      ...payload,\n      hash,\n      signature,\n      salt,\n    };\n    return this._createEventSource(\n      hash,\n      signature,\n      salt,\n      direct_params,\n      request\n    );\n  }\n\n  disconnect() {\n    this._account = null;\n\n    this.emit('accountsChanged', []);\n    this.emit(TomoProviderEventName.TOMO_EVM_PROVIDER_DISCONNECTED, '');\n    // this.emit('close', \"\");\n  }\n}\n"],"names":["connection","useLocalStore","create","devtools","persist","set","deviceId","undefined","setDeviceId","user","setUser","transactions","setTransactions","name","localStore","getUserToken","_user$token","store","getState","token","e","api","index","bot","tomo","auth","pk","sun","init","endpoints","tmaid","tmakey","endPoints","this","axios","baseURL","forEach","apiItem","interceptors","request","use","config","Object","defineProperty","headers","value","writable","enumerable","configurable","passKey","getPassKey","mfa","url","Authorization","error","console","log","_error$response","response","status","Promise","reject","GatewayError","_Error","message","code","_this","call","constructor","_inheritsLoose","_wrapNativeSuper","Error","pkCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","callback","res","_err$response","_err$response2","_err$response3","wrap","_context","prev","next","sent","data","abrupt","t0","stop","_x","apply","arguments","authCallback","_ref2","_callee2","_err$response4","_err$response5","_err$response6","_context2","_x2","sunCallback","_ref3","_callee3","_err$response7","_err$response8","_err$response9","_context3","_x3","tomoCallback","_ref4","_callee4","_context4","_x4","localStorage","getItem","loginApi","_ref5","_callee5","initData","_api$bot","_context5","get","_x5","checkLoginByCodeApi","_ref6","_callee6","session_code","_api$bot2","_context6","session-code","_x6","pkRegApi","_ref7","_callee8","device_no","_context8","_callee7","_api$pk","_context7","post","_x7","pkCreateApi","_ref9","_callee10","_context10","_callee9","_api$auth","_context9","_x8","pkCheckApi","_ref11","_callee12","_context12","_callee11","_api$auth2","_context11","_x9","pkSignApi","_ref13","_callee14","_context14","_callee13","_api$pk2","_context13","_x10","_x11","pkValidateApi","_ref15","_callee16","_context16","_callee15","_api$auth3","_context15","_x12","_x13","btcSignPsbtAndPush","_ref17","_callee18","params","_context18","_callee17","_api$tomo","_context17","_x14","sendEvmTransactionApi","_ref19","_callee20","_context20","_callee19","_api$tomo2","_context19","MFA","_x15","_x16","signEvmTransactionApi","_ref21","_callee22","_context22","_callee21","_api$tomo3","_context21","_x17","_x18","tonSignMessage","_ref23","_callee24","_context24","_callee23","_api$tomo4","_context23","_x19","_x20","solSignRawTransaction","_ref25","_callee26","_context26","_callee25","_api$tomo5","_context25","_x21","btcCreateSendBtcPsbt","_ref27","_callee28","_context28","_callee27","_api$tomo6","_context27","_x22","btcSignMessage","_ref29","_callee30","_context30","_callee29","_api$tomo7","_context29","_x23","btcSignPsbt","_ref31","_callee32","_context32","_callee31","_api$tomo8","_context31","_x24","decodeInfoByHex","_ref33","_callee34","_context34","_callee33","_api$tomo9","_context33","_x25","v2PkRegApi","_ref35","_callee36","_context36","_callee35","_api$pk3","_context35","_x26","v2PkSignApi","_ref37","_callee38","_context38","_callee37","_api$pk4","_context37","_x27","v2PkValidateApi","_ref39","_callee40","_context40","_callee39","_api$auth4","_context39","_x28","v2PkCreateApi","_ref41","_callee42","_context42","_callee41","_api$auth5","_context41","_x29","v2PkCheckApi","_ref43","_callee44","_context44","_callee43","_api$auth6","_context43","_x30","checkPaymentPasswd","_ref45","_callee46","_context46","_callee45","_api$auth7","_context45","setPaymentPasswd","_ref47","_callee48","_context48","_callee47","_api$auth8","_context47","_x31","changePaymentPasswd","_ref49","_callee50","_context50","_callee49","_api$auth9","_context49","_x32","validatePaymentPasswd","_ref51","_callee52","_context52","_callee51","_api$auth10","_context51","_x33","bindEmailCodeVerify","_ref53","_callee54","_context54","_callee53","_api$tomo10","_context53","_x34","bindEmailCodeSend","_ref55","_callee56","email","_context56","_callee55","_api$tomo11","_context55","_x35","getSwapAllTokens","_ref57","_callee58","_context58","_callee57","_api$tomo12","_context57","getSwapAllTokensSearch","_ref59","_callee59","queryParameters","_context59","X-TOMO-TMA-USERID","X-TOMO-TMA-KEY","_x36","_x37","buildSwapTxApi","_ref60","_callee61","_context61","_callee60","_api$sun","_context60","_x38","getSystemTokens","_ref62","_callee63","_context63","_callee62","_api$auth11","_context62","_x39","v1AddAssetApi","_ref64","_callee65","_context65","_callee64","_api$auth12","_context64","_x40","v1AllAssetApi","_ref66","_callee67","_context67","_callee66","_api$auth13","_context66","_x41","mfaAuthVerificationApi","_ref68","_callee69","_context69","_callee68","_api$tomo13","_context68","_x42","getSwapAllTokensV3","_ref70","_callee71","_context71","_callee70","_api$tomo14","_context70","_x43","sendBindEmailCodeApi","_ref72","_callee73","_context73","_callee72","_api$tomo15","_context72","_x44","verifyBindEmailCodeApi","_ref74","_callee75","_context75","_callee74","_api$tomo16","_context74","_x45","getTelegramUserInfoApi","_ref76","_callee77","_context77","_callee76","_api$tomo17","_context76","getConfigChainsAll","_ref78","_callee78","_context78","result","sendTx","networkType","network","addressType","toAddress","amount","getConnection","Connection","_sendSolTx","fromAddress","mintAddress","solanaWeb3","tx","PublicKey","fromPublicKey","toPublicKey","tokenPublicKey","txHex","Transaction","feePayer","getRecentBlockhash","recentBlockhash","blockhash","add","createTransferInstruction","SystemProgram","transfer","fromPubkey","toPubkey","lamports","serialize","requireAllSignatures","verifySignatures","toString","getTokenAmount","_getTokenAmount","client","mint","owner","solanaSpl","tokenAccount","getAssociatedTokenAddress","getAccountInfo","getTokenAccountBalance","getSolBalance","address","_connection","_connection2","publicKey","balance","solBalance","BigInt","format","decimals","uiAmountString","getBalance","formatted","Math","pow","getInstructions","instruction","j","TransactionInstruction","programId","Buffer","from","keys","length","push","pubkey","isSigner","isWritable","ToSerializeTransaction","SolanaWeb3","txMsg","i","_tx","TransactionMessage","payerKey","instructions","txType","populate","compileToLegacyMessage","signatures","signature","addSignature","VersionedTransaction","deserialize","serializedMessage","_getSendSplToken","to","mintPublicKey","fromATA","fromTokenAccount","transaction","toATA","toInfo","TOKEN_PROGRAM_ID","ASSOCIATED_TOKEN_PROGRAM_ID","versionedTransaction","warn","t1","getLatestBlockhash","t2","t3","t4","createAssociatedTokenAccountInstruction","createTransferCheckedInstruction","compileToV0Message","_sendTransaction","rawTransaction","sendRawTransaction","apiKey","tonRpc","hashHttp","getTonWebProvider","_getTonWebProvider","TonWeb","HttpProvider","apiKeyTest","tonRpcTest","getTonTestWebProvider","_getTonTestWebProvider","getTonBalance","tonAddress","tokenContractAddress","tokenPrecision","tonWeb","wallet","jettonMinter","jettonWallet","_balance","chainId","getAddress","jetton","JettonMinter","provider","getJettonWalletAddress","JettonWallet","getData","Number","utils","fromNano","_createSigningTransaction","transactionInfo","seqno","stateInit","signingMessage","stateInitBoc","sendmode","walletAddress","jettonWalletAddress","comment","tokenAmount","convertedAmount","transferBody","externalMessage","cellBase64","_externalMessage","formatUnits","WalletClass","all","hexToBytes","wc","methods","createStateInit","SendMode","PAY_GAS_SEPARATELY","IGNORE_ERRORS","trim","memo","Uint8Array","concat","TextEncoder","encode","toNano","createTransferBody","queryId","jettonAmount","Address","forwardPayload","forwardAmount","responseAddress","createTransferMessage","toBoc","bytesToHex","signingMessageBoc","getAddressInfo","state","signedTransaction","cell","msgHash","lt","boc","Cell","fromBoc","base64ToBytes","hash","bytesToBase64","sendBoc","_extends","_getTransactionsByInMessageHash","msg_hash","transRes","encodeURIComponent","X-API-Key","CONNECT_MAP","ProxyLocalStorage","window","_initDataUnsafe$user","Telegram","initDataUnsafe","WebApp","id","userId","_proto","prototype","key","withTgUserId","oKey","prefix","JSON","parse","setItem","stringify","AppInfo","version","homepage","logo","description","downloadLinks","android","googlePlay","ios","appleStore","testflight","telegram","browserExtension","chrome","edge","deepLinks","scheme","universallink","direct_link","BASE_URL","bridge","connect","connect_direct_link","LOCALES","ChainIdWithConnectsMap","SOL","TOMO_MINI_APP","BTC","TON","OKX_CONNECT","TON_CONNECT","EVM","BITGET_WALLET","UXUY_WALLET","tgUtils","decodeTelegramUrlParameters","encodedParameters","isObject","decodedParams","replaceAll","qs","obj","URLSearchParams","buildParams","Array","isArray","v","test","append","encodeTelegramUrlParameters","parameters","opendeepLink","paramsStr","domain","_ref$appname","appname","protoUrl","_ref$domain","iframeContEl","document","getElementById","body","iframeEl","createElement","appendChild","pageHidden","addEventListener","hidden","webkitHidden","mozHidden","msHidden","src","setTimeout","location","getDeepLink","_ref2$mode","mode","_tMeUrl$match","tMeUrl","match","deepLink","getSyncSiteMetadata","metaData","hostname","_URL","URL","icon","getSyncSiteIcon","windowObject","icons","querySelectorAll","_i","_Array$from","href","OpaqueType","TonTxBodyType","TomoProviderEventName","HexString","AddressString","BigIntString","RegExpString","PROVIDER_ALLIANCE","messages","method","errorCodes","rpc","timeoutRequest","invalidInput","resourceNotFound","resourceUnavailable","transactionRejected","methodNotSupported","limitExceeded","invalidRequest","methodNotFound","invalidParams","internal","unsupportedChain","userRejectedRequest","unauthorized","unsupportedMethod","disconnected","chainDisconnected","errorValues","-32700","standard","-32600","-32601","-32602","-32603","-32000","-32001","-32002","-32003","-32004","-32005","4001","4100","4200","4900","4901","rpcErrors","outputDef","accounts","eth","alliance","symbol","salt","options","account","chainKey","chainName","chainSymbol","loginDefineProperties","chain","isTonProof","_response$result$defa2","_response$result$defa","_request$params","output","defaultEthereumAddress","v2Address","formatAccount","toLowerCase","tonProof","signDefineProperties","source","_output$config$accoun","btc","defaultBtcAddress","sol","solanaAddress","ton","tonAddressTest","tonPublicKey","sui","suiAddress","_res$defaultEthereumA","transfer16","val","isNaN","walletPromiseTimeoutClear","walletPromiseMap","Map","fn","timeout","has","promise","defaultAccount","ProviderUtils","_EventEmitter","eventTimeout","storage","connectUrl","bridgeUrl","_request","payload","_ref$params","requestKey","_this2","connectSse","getSseToken","_getSseToken","now","publish_params","_response$data","_account","Date","getTime","_lastTime","timeStamp","floor","random","replace","payload_base64","X-Salt","_connectSse","_yield$this$getSseTok","direct_params","createEventSource","eventSource","EventSource","resolve","timer","_this3","_errorCodes$rpc","close","event","_isRetryCount","clearTimeout","_request$method$split","split","operation","_data","_data2","decodedString","atob","includes","_request$params$","_extends2","toUpperCase","reConnect","ProxyResponse","openAuthBot","base64ContentStr","utf8Array","base64Encoded","btoa","String","fromCharCode","_Telegram$WebApp","openTelegramLink","getAppInfo","removeAccount","chainType","_accounts","_extends3","getMethodInfo","methodString","_createClass","_account2","_account3","_account5","_account6","oldAccount","emit","parseInt","_account4","ethereum","_this$_account","_this$_account2","EventEmitter","reponsePayload","vaildatorEIP712","EIP712Data","sanitizedData","types","type","additionalProperties","items","properties","required","primaryType","assign","EIP712Domain","_sanitizeData","extractedData","map","err","resemblesEvmAddress","string","AbstractAdapter","protocol","_initializeChannelMessage","_getChainList","rpcMap","peddingMap","setUrl","getUrl","send","_send","rpcUrl","requestParams","jsonrpc","sendBatch","_sendBatch","payloads","results","_iterator","_step","_createForOfIteratorHelperLoose","done","_proto2","responsePayload","_config$params","isExist","values","find","EthereumProvider","_AbstractProvider","overrideRpcUrl","httpProvider","_initialize","getChainList","then","chainList","_window","injected","dispatchEvent","Event","_proto3","checkIsChainSupported","chainIdNum","c","_walletSwitchChain","_walletSwitchChain2","enable","_enable","getRpcUrl","_request2","_this$_account3","_ref2$params","isRreConnected","param","chainIdResolved","signRes","signPersonalMessageV4","lastTime","connected","_createEventSource","_createEventSource2","_this4","_request3","_response$data2","disconnect","TOMO_EVM_PROVIDER_DISCONNECTED","_this$_account4","_this$_account5","_this$_account6","AbstractProvider","num","_nameMap2","Tomo Mini App","OKX Connect","TON Connect","EVM Connect","_nameMap","lang","navigator","userAgent","MSStream","_useState","useState","setStorage","useEffect"],"mappings":"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"}