{"version":3,"file":"EthereumProvider-0d47aac9.js","sources":["../src/state/storageKey.ts","../src/state/useLocalStore.ts","../src/state/index.ts","../src/api/index.ts","../src/config/btc.ts","../src/config/sol.ts","../src/config/ton.ts","../src/v2/ProxyLocalStorage.ts","../src/v2/constant.ts","../src/util/const.ts","../src/v2/utils/utils.ts","../src/v2/metaData.ts","../src/v2/types/types.ts","../src/v2/message.ts","../src/v2/utils/properties.ts","../src/v2/provider/ProviderUtils.ts","../src/v2/utils/validator.ts","../src/v2/provider/AbstractProvider.ts","../src/v2/provider/EthereumProvider/EthereumProvider.ts"],"sourcesContent":["export const userKey = 'tomo_user';\nexport const deviceIdKey = 'tomo_deviceId';\nexport const passkeyKey = 'tomo_passkey';\n","import { create } from 'zustand';\r\nimport { devtools, persist } from 'zustand/middleware';\r\nimport { UserType } from '../types/types';\r\nimport { IChainId, ITransactionType } from './type';\r\n\r\ninterface StoreState {\r\n  user: UserType | undefined;\r\n  setUser: (user: UserType | undefined) => void;\r\n  deviceId: string | undefined;\r\n  setDeviceId: (deviceId: string | undefined) => void;\r\n  transactions: {\r\n    [key in IChainId]?: ITransactionType[];\r\n  };\r\n  setTransactions: (\r\n    deviceId:\r\n      | {\r\n          [key in IChainId]?: ITransactionType[];\r\n        }\r\n      | undefined\r\n  ) => void;\r\n}\r\n\r\nconst persistedState = persist<StoreState>(\r\n  set => ({\r\n    deviceId: undefined,\r\n    setDeviceId: (deviceId: string | undefined) => set({ deviceId: deviceId }),\r\n    user: undefined,\r\n    setUser: (user: UserType | undefined) => set({ user: user }),\r\n    transactions: {},\r\n    setTransactions: (\r\n      transactions: {\r\n        [key in IChainId]?: ITransactionType[];\r\n      }\r\n    ) => set({ transactions: transactions }),\r\n  }),\r\n  { name: 'tomo-local' }\r\n);\r\n\r\nconst useLocalStore = create(devtools(persistedState));\r\n\r\nexport const localStore = useLocalStore;\r\n\r\nexport default useLocalStore;\r\n","import { localStore } from './useLocalStore';\nexport const getUserToken = () => {\n  try {\n    const store = localStore.getState();\n\n    const user = store?.user;\n    if (user) {\n      return user?.token ?? '';\n    } else {\n      return '';\n    }\n  } catch (e) {\n    return '';\n  }\n};\nexport const getDeviceId = () => {\n  try {\n    const store = localStore.getState();\n    const deviceId = store?.deviceId;\n    if (deviceId) {\n      return deviceId;\n    } else {\n      return '';\n    }\n  } catch (e) {\n    return '';\n  }\n};\n","import axios, { AxiosInstance } from 'axios';\nimport { passkeyKey } from '../state/storageKey';\nimport { getUserToken } from '../state';\nimport {\n  BtcCreateSendBtcPsbt,\n  BtcSignPsbt,\n  CustomTokenParams,\n  CustonTokenType,\n  SolSendTx,\n  SwapResult,\n  TokenType,\n} from './type';\nimport { IChainId } from '../state/type';\n\nlet globalEndpoints: string[] = [];\nlet globalTmaUserId = '';\nlet globalTmaUserKey = '';\nexport const successCode = 8000;\nexport const api: {\n  index: AxiosInstance | undefined;\n  bot: AxiosInstance | undefined;\n  auth: AxiosInstance | undefined;\n  tomo: AxiosInstance | undefined;\n  pk: AxiosInstance | undefined;\n  sun: AxiosInstance | undefined;\n  init: (endpoints: [string], tmaid: string, tmakey: string) => void;\n} = {\n  index: undefined,\n  bot: undefined,\n  tomo: undefined,\n  auth: undefined,\n  pk: undefined,\n  sun: undefined,\n  init(endpoints: [string], tmaid, tmakey) {\n    const endPoints = {\n      bot: endpoints[0] + 'moon/',\n      auth: endpoints[0] + 'wind/',\n      pk: endpoints[0] + 'rain/',\n      sun: endpoints[0] + 'sun/',\n      tomo: endpoints[0] + 'sky/api/',\n    };\n    this.bot = axios.create({ baseURL: endPoints.bot });\n    this.auth = axios.create({ baseURL: endPoints.auth });\n    this.pk = axios.create({ baseURL: endPoints.pk });\n    this.sun = axios.create({ baseURL: endPoints.sun });\n    this.tomo = axios.create({\n      baseURL: endPoints.tomo,\n    });\n    globalEndpoints = endpoints;\n    globalTmaUserId = tmaid;\n    globalTmaUserKey = tmakey;\n    [this.index, this.tomo, this.auth, this.bot, this.pk, this.sun].forEach(\n      (apiItem: AxiosInstance | undefined) => {\n        if (!apiItem) return;\n        apiItem.interceptors.request.use(\n          config => {\n            // if (config.baseURL != endpoints[0] + 'bot-server/') {\n            Object.defineProperty(config.headers, 'X-TOMO-TMA-USERID', {\n              value: tmaid,\n              writable: true,\n              enumerable: true,\n              configurable: true,\n            });\n\n            Object.defineProperty(config.headers, 'X-TOMO-TMA-KEY', {\n              value: tmakey,\n              writable: true,\n              enumerable: true,\n              configurable: true,\n            });\n            // }\n            const passKey = getPassKey();\n\n            if (passKey && config.baseURL === endPoints.pk) {\n              config.headers.mfa = passKey;\n            }\n            if (\n              passKey &&\n              config.baseURL === endPoints.tomo &&\n              config.url != 'token/swapList'\n            ) {\n              config.headers.mfa = passKey;\n            }\n            const token = getUserToken();\n\n            if (token && config.url != 'token/swapList') {\n              config.headers.Authorization = `Bearer ${token}`;\n            }\n\n            return config;\n          },\n          error => {\n            console.log('null', error);\n\n            if (error?.response?.status === 401) {\n              return Promise.reject(error);\n            }\n            return null;\n          }\n        );\n      }\n    );\n  },\n};\n\nexport class GatewayError extends Error {\n  code: number;\n\n  constructor(message: string, code: number = 0) {\n    super(message);\n    this.name = this.constructor.name;\n    this.code = code;\n  }\n}\nexport const pkCallback = async (callback: () => Promise<any>) => {\n  try {\n    const res = await callback();\n    if (!res || !res.data) {\n      throw new GatewayError('Failed to get data', 500);\n    }\n    return res.data;\n  } catch (err) {\n    console.error(err);\n    if (err?.response?.data?.message) {\n      throw new GatewayError(\n        err?.response?.data?.message,\n        err?.response?.data?.code\n      );\n    }\n    throw err;\n  }\n};\nexport const authCallback = async (callback: () => Promise<any>) => {\n  try {\n    const res = await callback();\n    if (!res || !res.data) {\n      throw new GatewayError('Failed to get data', 500);\n    }\n    return res.data;\n  } catch (err) {\n    console.error(err);\n    if (err?.response?.data?.message) {\n      throw new GatewayError(\n        err?.response?.data?.message,\n        err?.response?.data?.code\n      );\n    }\n    throw err;\n  }\n};\nexport const sunCallback = async (callback: () => Promise<any>) => {\n  try {\n    const res = await callback();\n    if (!res || !res.data) {\n      throw new GatewayError('Failed to get data', 500);\n    }\n    return res.data;\n  } catch (err) {\n    console.error(err);\n    if (err?.response?.data?.message) {\n      throw new GatewayError(\n        err?.response?.data?.message,\n        err?.response?.data?.code\n      );\n    }\n    throw err;\n  }\n};\nexport const tomoCallback = async (callback: () => Promise<any>) => {\n  const res = await callback();\n  if (res.code != 10000) {\n    throw new GatewayError(res.message, res.code);\n  }\n  return res;\n};\nexport const getPassKey = () => {\n  try {\n    const token = localStorage.getItem(passkeyKey);\n    return token ?? '';\n  } catch (e) {\n    return null;\n  }\n};\n\nexport const loginApi = async (initData: string) => {\n  try {\n    const res = await api.bot?.get(`login?${initData}`);\n    return res?.data;\n  } catch (err) {\n    console.error(err);\n    if (err.response.status == 401) {\n      throw new GatewayError(err.response.data, 401);\n    }\n    throw err;\n  }\n};\n\nexport const checkLoginByCodeApi = async (session_code: string) => {\n  try {\n    const res = await api.bot?.get(`session/token`, {\n      headers: {\n        'session-code': session_code,\n      },\n    });\n    return res?.data;\n  } catch (err) {\n    console.error(err);\n    if (err.response.status == 401) {\n      throw new GatewayError('Not logged in', 401);\n    }\n    throw err;\n  }\n};\n\nexport const pkRegApi = async (device_no: string) => {\n  return await pkCallback(async () => {\n    return await api.pk?.post('v2/reg/' + device_no, {});\n  });\n};\n\nexport const pkCreateApi = async (data: {\n  device_no: string;\n  pubkey: string;\n}) => {\n  return await authCallback(async () => {\n    return await api.auth?.post('v2/passkey/create/', data);\n  });\n};\nexport const pkCheckApi = async (device_no: string) => {\n  return await authCallback(async () => {\n    return await api.auth?.get('v2/passkey/check/' + device_no);\n  });\n};\n\nexport const pkSignApi = async (\n  data: {\n    message: string;\n    device_no?: string;\n  },\n  headers: any = {}\n) => {\n  return await pkCallback(async () => {\n    return await api.pk?.post('v2/sign', data, { headers });\n  });\n};\n\nexport const pkValidateApi = async (\n  data: {\n    device_no?: string;\n    message: string;\n    sig: string;\n  },\n  headers: any = {}\n) => {\n  return await authCallback(async () => {\n    return await api.auth?.post('v2/passkey/validate/', data, { headers });\n  });\n};\n\nexport const btcSignPsbtAndPush = async (params: BtcSignPsbt) => {\n  return await tomoCallback(async () => {\n    const { data } = await api.tomo?.post(\n      `socialLogin/projectWallet/bitcoin/signPsbtAndPush`,\n      params\n    );\n    return data;\n  });\n};\n\nexport const sendEvmTransactionApi = async (\n  mfa: string,\n  data: {\n    transaction: { [key: string]: any };\n    chainId: number;\n    rpc: string;\n  }\n) => {\n  return await tomoCallback(async () => {\n    const token = getUserToken();\n\n    const res = await api.tomo?.post(\n      'socialLogin/projectWallet/ethereum/sendTransaction',\n      data,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          MFA: mfa,\n        },\n      }\n    );\n    return res.data;\n  });\n};\n\nexport const signEvmTransactionApi = async (\n  mfa: string,\n  data: {\n    transaction: { [key: string]: any };\n    chainId: number;\n    rpc: string;\n  }\n) => {\n  return await tomoCallback(async () => {\n    const token = getUserToken();\n\n    const res = await api.tomo?.post(\n      'socialLogin/projectWallet/ethereum/signTransaction',\n      data,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          MFA: mfa,\n        },\n      }\n    );\n    return res.data;\n  });\n};\n\nexport const tonSignMessage = async (\n  mfa: string,\n  data: { signingMessageBoc: string }\n) => {\n  return await tomoCallback(async () => {\n    const token = getUserToken();\n\n    const res = await api.tomo?.post(\n      '/socialLogin/projectWallet/ton/signTransaction',\n      data,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          MFA: mfa,\n        },\n      }\n    );\n    return res.data;\n  });\n};\n\nexport const solSignRawTransaction = async (params: SolSendTx) => {\n  return await tomoCallback(async () => {\n    const { data } = await api.tomo?.post(\n      `socialLogin/projectWallet/solana/signRawTransaction`,\n      params\n    );\n    return data;\n  });\n};\n\n// send BTC\nexport const btcCreateSendBtcPsbt = async (params: BtcCreateSendBtcPsbt) => {\n  return await tomoCallback(async () => {\n    const { data } = await api.tomo?.post(\n      `socialLogin/projectWallet/bitcoin/createSendBitcoinPsbt`,\n      params\n    );\n    return data;\n  });\n};\n\nexport const btcSignMessage = async (params: any) => {\n  return await tomoCallback(async () => {\n    const { data } = await api.tomo?.post(\n      `socialLogin/projectWallet/bitcoin/signMessage`,\n      params\n    );\n    return data;\n  });\n};\n\nexport const btcSignPsbt = async (params: BtcSignPsbt) => {\n  return await tomoCallback(async () => {\n    const { data } = await api.tomo?.post(\n      `socialLogin/projectWallet/bitcoin/signPsbt`,\n      params\n    );\n    return data;\n  });\n};\n\nexport const decodeInfoByHex = async (params: any) => {\n  return await tomoCallback(async () => {\n    const { data } = await api.tomo?.post(\n      `socialLogin/projectWallet/bitcoin/decode`,\n      params\n    );\n    return data;\n  });\n};\n\nexport const v2PkRegApi = async (device_no: string) => {\n  return await pkCallback(async () => {\n    return await api.pk?.post('v2/reg/' + device_no, {});\n  });\n};\n\nexport const v2PkSignApi = async (data: {\n  message: string;\n  device_no: string;\n}) => {\n  return await pkCallback(async () => {\n    return await api.pk?.post('v2/sign', data);\n  });\n};\n\nexport const v2PkValidateApi = async (data: {\n  device_no: string;\n  message: string;\n  sig: string;\n}) => {\n  return await authCallback(async () => {\n    return await api.auth?.post('v2/passkey/validate/', data);\n  });\n};\n\nexport const v2PkCreateApi = async (data: {\n  device_no: string;\n  pubkey: string;\n}) => {\n  return await authCallback(async () => {\n    return await api.auth?.post('v2/passkey/create/', data);\n  });\n};\n\nexport const v2PkCheckApi = async (device_no: string) => {\n  return await authCallback(async () => {\n    return await api.auth?.get('v2/passkey/check/' + device_no);\n  });\n};\n\nexport const checkPaymentPasswd = async () => {\n  return await authCallback(async () => {\n    return await api.auth?.get('v1/payment/passwd/check', {});\n  });\n};\nexport const setPaymentPasswd = async (data: { passwd: string }) => {\n  return await authCallback(async () => {\n    return await api.auth?.post('v1/payment/passwd/set', data);\n  });\n};\nexport const changePaymentPasswd = async (data: {\n  old_passwd: string;\n  new_passwd: string;\n}) => {\n  return await authCallback(async () => {\n    return await api.auth?.post('v1/payment/passwd/change', data);\n  });\n};\nexport const validatePaymentPasswd = async (data: { passwd: string }) => {\n  return await authCallback(async () => {\n    return await api.auth?.post('v1/payment/passwd/validate', data);\n  });\n};\nexport const bindEmailCodeVerify = async (params: {\n  email: string;\n  code: string;\n}) => {\n  return await tomoCallback(async () => {\n    const { data } = await api.tomo?.post(\n      `socialLogin/projectUser/bindEmailCodeVerify`,\n      params\n    );\n    return data;\n  });\n};\nexport const bindEmailCodeSend = async (email: string) => {\n  return await tomoCallback(async () => {\n    const { data } = await api.tomo?.get(\n      `socialLogin/projectUser/bindEmailCode?email=${email}`\n    );\n    return data;\n  });\n};\n\nexport const getSwapAllTokens = async (): Promise<any> => {\n  return await tomoCallback(async () => {\n    const ret = await api.tomo?.get(`socialLogin/teleGram/wallet/tokens`, {});\n    return ret.data;\n  });\n};\n\nexport const getSwapAllTokensSearch = async (\n  queryParameters: {\n    content: string;\n    chain?: string;\n  },\n  config: { url: string; tmaid: string; tmakey: string }\n): Promise<any> => {\n  const ret = await axios.get(`${config.url}wallet/tokens/search`, {\n    params: queryParameters,\n    headers: {\n      'X-TOMO-TMA-USERID': config.tmaid,\n      'X-TOMO-TMA-KEY': config.tmakey,\n    },\n  });\n  return ret.data;\n};\n\nexport const buildSwapTxApi = async (params: {\n  fromChainid: number;\n  toChainid: number;\n  fromAddress: string;\n  toAddress: string;\n  amount: string;\n  slippage: number;\n  fromWalletAddress: string;\n  toWalletAddress: string;\n}): Promise<SwapResult> => {\n  const res = await sunCallback(async () => {\n    return await api.sun?.get(`v1/buildTx`, {\n      params,\n    });\n  });\n  return res.data;\n};\n\nexport const getSystemTokens = async (params: {\n  evm_address: string;\n  solana_address: string;\n}): Promise<TokenType[]> => {\n  const res = await authCallback(async () => {\n    return await api.auth?.get(`v1/token/balance`, { params });\n  });\n  return res.data;\n};\n\nexport const v1AddAssetApi = async (data: CustomTokenParams) => {\n  return await authCallback(async () => {\n    return await api.auth?.post('v1/asset/add', data);\n  });\n};\n\nexport const v1AllAssetApi = async (params: {\n  page: number;\n  pageSize: number;\n  chain_ids?: number[];\n}): Promise<CustonTokenType[]> => {\n  const res = await authCallback(async () => {\n    return await api.auth?.get('v1/asset/all', { params });\n  });\n  return res.data;\n};\n\nexport const mfaAuthVerificationApi = async (data: any) => {\n  return await tomoCallback(async () => {\n    const res = await api.tomo?.post('socialLogin/mfa/auth/verification', data);\n    return res.data;\n  });\n};\n\nexport const getSwapAllTokensV3 = async (params: {\n  chain: string;\n}): Promise<{\n  result: any[];\n}> => {\n  // if (globalEndpoints.length == 0) {\n  //   return {\n  //     result: [],\n  //   };\n  // }\n  return await tomoCallback(async () => {\n    const token = getUserToken();\n\n    const ret = await api.tomo?.get(`token/swapList`, {\n      params,\n    });\n    return ret.data;\n  });\n};\nexport const sendBindEmailCodeApi = async (params: { email: string }) => {\n  return await tomoCallback(async () => {\n    const ret = await api.tomo?.get(`socialLogin/teleGram/bindEmailCode`, {\n      params,\n    });\n    return ret.data;\n  });\n};\n\nexport const verifyBindEmailCodeApi = async (data: {\n  email: string;\n  code: string;\n  tradePassword: string;\n}) => {\n  return await tomoCallback(async () => {\n    const res = await api.tomo?.post(\n      'socialLogin/teleGram/bindEmailCodeVerify',\n      data\n    );\n    return res.data;\n  });\n};\n\nexport const getTelegramUserInfoApi = async () => {\n  return await tomoCallback(async () => {\n    const res = await api.tomo?.get(`socialLogin/teleGram/userInfo`);\n    return res.data;\n  });\n};\n\nexport const getConfigChainsAll = async (): Promise<{\n  chain_id_name: {\n    [key in IChainId]?: string;\n  };\n}> => {\n  const { data } = await axios.get(\n    `https://common-service.mobus.workers.dev/chain/all`\n  );\n  return data.result;\n};\n","import {\n  btcCreateSendBtcPsbt,\n  btcSignMessage,\n  btcSignPsbt,\n  btcSignPsbtAndPush,\n  decodeInfoByHex,\n} from '../api';\nimport {\n  BtcCreateSendBtcPsbt,\n  BTCNetworkAddressType,\n  BTCNetworkType,\n  BtcSignPsbt,\n} from '../api/type';\n\nexport type IBtcAddressType =\n  | 'bitcoinP2Wpkh'\n  | 'bitcoinP2Sh'\n  | 'bitcoinP2Tr'\n  | 'bitcoinP2Pkh';\n\nexport const btcAddressTypeMaps: IBtcAddressType[] = [\n  'bitcoinP2Wpkh',\n  'bitcoinP2Sh',\n  'bitcoinP2Tr',\n  'bitcoinP2Pkh',\n];\n\nexport const mockBtcEvmChainId = 0;\nexport const btcDecimals = 8;\n\nexport const signMessage = async (params: {\n  addressType: string;\n  message: string;\n}) => {\n  return await btcSignMessage({\n    networkType: 'SIGNET',\n    addressType: params.addressType,\n    message: params.message,\n  });\n  //res.message\n};\n\nexport const sendTx = async ({\n  network,\n  addressType,\n  toAddress,\n  amount,\n}: {\n  network: BTCNetworkType;\n  addressType: BTCNetworkAddressType | undefined;\n  toAddress: string;\n  amount: string;\n}) => {\n  const params: BtcCreateSendBtcPsbt = {\n    networkType: network,\n    addressType,\n    toAddress,\n    amount,\n  };\n  const txInfo = await btcCreateSendBtcPsbt(params);\n  /**\n   * if (txInfo.code == 10000 && txInfo.message === \"Success\") {\n   *       setInputs(txInfo.result.decodeInfo.inputInfos);\n   *       setOutputs(txInfo.result.decodeInfo.outputInfos);\n   *       setPsbtHex(txInfo.result.psbtHex);\n   *       setFee(txInfo.result.decodeInfo.fee);\n   *       setFeeRate(txInfo.result.decodeInfo.feeRate);\n   *     }\n   */\n\n  return txInfo;\n};\n\nexport const getSignTxInfoByHex = async ({\n  network,\n  psbtHex,\n}: {\n  network: string;\n  psbtHex: string;\n}) => {\n  const params = {\n    networkType: network.toUpperCase(),\n    psbtHex: psbtHex + '',\n  };\n  const txInfo = await decodeInfoByHex(params);\n  /**\n   * if (txInfo.message === \"Success\") {\n   *       setInputs(txInfo.result.inputInfos);\n   *       setOutputs(txInfo.result.outputInfos);\n   *       setPsbtHex(txInfo.result.psbtHex);\n   *       setFee(txInfo.result.fee);\n   *       setFeeRate(txInfo.result.feeRate);\n   *\n   *       const curAddress = txInfo.result.inputInfos[0].address;\n   *       const totalOutputsValue = txInfo.result.outputInfos.reduce(\n   *         (acc: any, cur: any) => {\n   *           return cur.address !== curAddress ? acc + cur.value : acc;\n   *         },\n   *         0\n   *       );\n   *       setSendAmount(satsToBtc(totalOutputsValue));\n   *     }\n   */\n  return txInfo;\n};\n\nexport const sendPsbtTx = async ({\n  networkType,\n  addressType,\n  psbtHex,\n}: {\n  networkType: BTCNetworkType;\n  addressType: BTCNetworkAddressType;\n  psbtHex: string;\n}) => {\n  const params: BtcSignPsbt = {\n    networkType: networkType,\n    addressType,\n    autoFinalized: true,\n    psbtHex: psbtHex,\n  };\n  const signAndPushRes = await btcSignPsbtAndPush(params);\n  return signAndPushRes;\n  // if (signAndPushRes.message === 'Success') {\n  //   handleUpdateSignData(\n  //     true,\n  //     signAndPushRes.result,\n  //     'Transaction sent',\n  //     'success',\n  //     true\n  //   )\n  // }\n};\n\nexport const signPsbt = async ({\n  networkType,\n  addressType,\n  psbtHex,\n}: {\n  networkType: BTCNetworkType;\n  addressType: BTCNetworkAddressType;\n  psbtHex: string;\n}) => {\n  const params: BtcSignPsbt = {\n    networkType: networkType,\n    addressType,\n    autoFinalized: true,\n    psbtHex: psbtHex,\n  };\n  const signRes = await btcSignPsbt(params);\n  return signRes;\n};\n\nexport const getBTCSendHash = async (psbtHex: string) => {\n  const psbtHaxTest =\n    '70736274ff0100730200000001c3a727f5f05aa5e4e18bee6fb604a21928371295d274c4739afbf308fb110b660000000000ffffffff02102700000000000017a914772f6a083785c0f06a647a90ecb39e57e64ef73787ce7607000000000017a914bb377855e1d01a2692339bcf823d5cf39b3712cf87000000000001012020a107000000000017a914bb377855e1d01a2692339bcf823d5cf39b3712cf87010717160014eb4da06dc422e023e6245378cfbc28a1fdb8f749000000';\n  // const psbt = bitcoin.Psbt.fromHex(psbtHex)\n  const bitcoin = await import('bitcoinjs-lib');\n  const psbt = bitcoin.Psbt.fromHex(psbtHaxTest);\n\n  const extractedTx = psbt.extractTransaction();\n\n  const txid = extractedTx.getId();\n\n  return txid;\n};\n","import base58 from 'bs58';\n\nlet connection: any;\nexport const SolMainAddress = '11111111111111111111111111111111';\nexport const mockSolEvmChainId = 501;\nexport const solDecimals = 9;\nexport const solTokenName = 'SOL';\nexport const solEndpoint =\n  'https://rpc.ankr.com/solana/ac79e83cf02a544dbb9b3f4c5d5478b2510b921e7d5739ded8791a932e8de0a6';\nexport const solScanUrl = 'https://solscan.io/tx/';\nexport function getConnection() {\n  if (connection) {\n    return connection;\n  }\n  (async function() {\n    const solanaWeb3 = await import('@solana/web3.js');\n    // connection = new Connection(solEndpoint, 'recent')\n    connection = new solanaWeb3.Connection(solEndpoint, 'finalized');\n  })();\n  return connection;\n}\n\nexport async function getSolFees() {\n  try {\n    const conn = getConnection();\n    const { feeCalculator } = await conn.getRecentBlockhash();\n    return {\n      totalFee: feeCalculator.lamportsPerSignature.toString() as string,\n    };\n  } catch (e) {\n    return { totalFee: '0' };\n  }\n}\n\nexport async function sendSolTx(\n  fromAddress: string,\n  toAddress: string,\n  amount: bigint, // bigint number\n  mintAddress?: string\n) {\n  try {\n    getConnection();\n    const solanaWeb3 = await import('@solana/web3.js');\n    const tx = new solanaWeb3.Transaction();\n    const PublicKey = solanaWeb3.PublicKey;\n    const fromPublicKey = new PublicKey(fromAddress);\n    const toPublicKey = new PublicKey(toAddress);\n    if (!tx.feePayer) {\n      tx.feePayer = fromPublicKey;\n    }\n    if (mintAddress) {\n      const tokenPublicKey = new PublicKey(mintAddress);\n      tx.recentBlockhash = (\n        await connection.getRecentBlockhash('max')\n      ).blockhash;\n      const solanaSpl = await import('@solana/spl-token');\n      tx.add(\n        solanaSpl.createTransferInstruction(\n          tokenPublicKey,\n          toPublicKey,\n          fromPublicKey,\n          amount\n        )\n      );\n    } else {\n      tx.recentBlockhash = (\n        await connection.getRecentBlockhash('max')\n      ).blockhash;\n      tx.add(\n        solanaWeb3.SystemProgram.transfer({\n          fromPubkey: fromPublicKey,\n          toPubkey: toPublicKey,\n          lamports: amount,\n        })\n      );\n    }\n    const txHex = tx\n      .serialize({ requireAllSignatures: false, verifySignatures: false })\n      .toString('hex');\n    return txHex;\n  } catch (e) {\n    return null;\n  }\n}\n\nexport const getSolTokenDetail = async (mintAddress: string) => {\n  try {\n    getConnection();\n    const TOKEN_LIST_URL =\n      'https://raw.githubusercontent.com/solana-labs/token-list/main/src/tokens/solana.tokenlist.json';\n    const response = await fetch(TOKEN_LIST_URL);\n    const tokenList = await response.json();\n    const tokenDetail = tokenList.tokens.find(\n      (token: any) => token.address === mintAddress\n    );\n    if (tokenDetail) {\n      console.log('Token Symbol:', tokenDetail.symbol);\n      console.log('Token Name:', tokenDetail.name);\n      console.log('Token Decimals:', tokenDetail.decimals);\n      return {\n        symbol: tokenDetail.symbol,\n        decimals: tokenDetail.decimals,\n      };\n    } else {\n      console.log('Token not found in Token List');\n      return null;\n    }\n  } catch (e) {\n    console.log(e);\n    return null;\n  }\n};\n\nasync function getTokenAmount(client: any, mint: any, owner: any) {\n  const solanaSpl = await import('@solana/spl-token');\n  const tokenAccount = await solanaSpl.getAssociatedTokenAddress(mint, owner);\n\n  const info = await client.getAccountInfo(tokenAccount);\n  if (info == null) {\n    return null;\n  } else {\n    return await client.getTokenAccountBalance(tokenAccount);\n  }\n}\nexport async function getSolTokenAccount(client: any, mint: any, owner: any) {\n  const solanaSpl = await import('@solana/spl-token');\n  const tokenAccount = await solanaSpl.getAssociatedTokenAddress(mint, owner);\n\n  return await client.getAccountInfo(tokenAccount);\n}\nexport const getSolBalance = async ({\n  address,\n  token,\n}: {\n  address: string | undefined;\n  token: string | undefined;\n}) => {\n  if (address) {\n    const PublicKey = (await import('@solana/web3.js')).PublicKey;\n    if (token) {\n      const connection = getConnection();\n      const owner = new PublicKey(address);\n      const mint = new PublicKey(token);\n\n      const tokenAccount = await getTokenAmount(connection, mint, owner);\n\n      if (tokenAccount == null) {\n        return {\n          amount: BigInt(0),\n          token,\n          format: '0',\n          decimals: undefined,\n        };\n      } else {\n        return {\n          amount: BigInt(tokenAccount.value.amount),\n          format: tokenAccount.value.uiAmountString,\n          decimals: tokenAccount.value.decimals,\n          token,\n        };\n      }\n    } else {\n      const connection = getConnection();\n      const publicKey = new PublicKey(address);\n      const balance = await connection.getBalance(publicKey);\n      if (!balance) {\n        return {\n          balance: '0',\n          formatted: '0',\n        };\n      }\n      const solBalance = {\n        balance: '' + balance,\n        formatted: '' + balance / 10 ** 9,\n      };\n      return solBalance;\n    }\n  }\n  return undefined;\n};\n\nfunction getInstructions(data: any) {\n  let instruction;\n  (async function() {\n    const solanaWeb3 = await import('@solana/web3.js');\n    const PublicKey = solanaWeb3.PublicKey;\n    instruction = new solanaWeb3.TransactionInstruction({\n      programId: new PublicKey(data.programId),\n      data: Buffer.from(data.data),\n      keys: [],\n    });\n    for (let j = 0; j < data.keys.length; j++) {\n      instruction.keys.push({\n        pubkey: new PublicKey(data.keys[j].pubkey),\n        isSigner: data.keys[j].isSigner,\n        isWritable: data.keys[j].isWritable,\n      });\n    }\n  })();\n  return instruction;\n}\n\n// @ts-ignore\nexport const ToSerializeTransaction = async (data: any) => {\n  const SolanaWeb3 = await import('@solana/web3.js');\n  const PublicKey = SolanaWeb3.PublicKey;\n  const txMsg = new SolanaWeb3.TransactionMessage({\n    recentBlockhash: data.tx.recentBlockhash,\n    payerKey: new PublicKey(data.tx.from),\n    instructions: [],\n  });\n\n  for (let i = 0; i < data.tx.instructions.length; i++) {\n    txMsg.instructions.push(getInstructions(data.tx.instructions[i]));\n  }\n\n  if (data.tx && data.tx.txType == 'LEGACY') {\n    const tx = SolanaWeb3.Transaction.populate(txMsg.compileToLegacyMessage());\n\n    data.tx.signatures.forEach((signature: any) => {\n      tx.addSignature(\n        new PublicKey(signature.publicKey),\n        Buffer.from(signature.signature)\n      );\n    });\n    // tx.message.recentBlockhash = recentBlockhash\n    return Buffer.from(tx.serialize({ requireAllSignatures: false })).toString(\n      'hex'\n    );\n  } else if (data.tx && data.tx.txType == 'VERSIONED') {\n    const tx = SolanaWeb3.VersionedTransaction.deserialize(\n      data.tx.serializedMessage\n    );\n    // const tx = new VersionedTransaction(data.tx.serializedMessage)\n    // data.tx.signatures.forEach(signature => {\n    //     tx.addSignature(new PublicKey(signature.publicKey), Buffer.from(signature.signature))\n    // });\n    // tx.feePayer = new PublicKey(data.tx.from)\n\n    return Buffer.from(tx.serialize()).toString('hex');\n  }\n};\n\nexport async function getSendSplToken(\n  mint: string | undefined,\n  from: string | undefined,\n  to: string | undefined,\n  amount: bigint | undefined\n) {\n  const connection = getConnection();\n  const SolanaWeb3 = await import('@solana/web3.js');\n  const PublicKey = SolanaWeb3.PublicKey;\n  const solanaSpl = await import('@solana/spl-token');\n\n  const mintPublicKey = mint && new PublicKey(mint);\n  const fromPublicKey = from && new PublicKey(from);\n  const toPublicKey = to && new PublicKey(to);\n\n  if (mintPublicKey && fromPublicKey && toPublicKey && amount) {\n    const fromATA = await solanaSpl.getAssociatedTokenAddress(\n      mintPublicKey,\n      fromPublicKey\n    );\n\n    const fromInfo = await connection.getAccountInfo(fromATA);\n\n    if (fromInfo == null) {\n      console.warn('from not token accmount');\n      return null;\n    }\n    const fromTokenAccount = await connection.getTokenAccountBalance(fromATA);\n    if (fromTokenAccount.value.amount < amount) {\n      return null;\n    }\n\n    const transaction = new SolanaWeb3.TransactionMessage({\n      payerKey: fromPublicKey,\n      recentBlockhash: (await connection.getLatestBlockhash()).blockhash,\n      instructions: [],\n    });\n\n    const toATA = await solanaSpl.getAssociatedTokenAddress(\n      mintPublicKey,\n      toPublicKey\n    );\n    const toInfo = await connection.getAccountInfo(toATA);\n    const TOKEN_PROGRAM_ID = new PublicKey(\n      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'\n    );\n\n    if (toInfo == null) {\n      const ASSOCIATED_TOKEN_PROGRAM_ID = new PublicKey(\n        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'\n      );\n      transaction.instructions.push(\n        solanaSpl.createAssociatedTokenAccountInstruction(\n          fromPublicKey,\n          toATA,\n          toPublicKey,\n          mintPublicKey,\n          TOKEN_PROGRAM_ID,\n          ASSOCIATED_TOKEN_PROGRAM_ID\n        )\n      );\n    }\n\n    transaction.instructions.push(\n      solanaSpl.createTransferCheckedInstruction(\n        fromATA,\n        mintPublicKey,\n        toATA,\n        fromPublicKey,\n        amount,\n        fromTokenAccount.value.decimals,\n        [],\n        TOKEN_PROGRAM_ID\n      )\n    );\n\n    const versionedTransaction = new SolanaWeb3.VersionedTransaction(\n      transaction.compileToV0Message()\n    );\n\n    // return base58.encode(versionedTransaction.serialize())\n    return Buffer.from(versionedTransaction.serialize()).toString('hex');\n  }\n\n  return undefined;\n}\nexport async function sendTransaction(rawTransaction: string) {\n  getConnection();\n  const result = await connection.sendRawTransaction(\n    Buffer.from(rawTransaction, 'hex')\n  );\n  return result;\n}\n","import TonWeb, { AddressType } from 'tonweb';\nimport { formatUnits } from 'viem';\nimport axios from 'axios';\nimport { Cell } from 'tonweb/dist/types/boc/cell';\nimport { SendMode } from '@ton/core';\n\nexport type TonSigningTransactionType = {\n  fromAddress: string;\n  publicKey: string;\n  value: bigint;\n  toAddress: string;\n  memo: string | Uint8Array | Cell;\n  tokenContractAddress?: string;\n  tokenPrecision?: number;\n};\n\nexport const mockTonChainId = 1100;\nexport const mockTonTestnetChainId = 1101;\nexport const tonDecimals = 9;\n\nconst apiKey: string =\n  '1b312c91c3b691255130350a49ac5a0742454725f910756aff94dfe44858388e';\nexport const tonRpc: string = 'https://toncenter.com/api/v2/jsonRPC';\nexport const hashHttp: string = 'https://toncenter.com/api/index/v1';\n\nasync function getTonWebProvider() {\n  return new TonWeb(new TonWeb.HttpProvider(tonRpc, { apiKey: apiKey }));\n}\n\nconst apiKeyTest: string =\n  '227f87a614319d10e4c20f0f485cd101eca12989bf59da0e33b3c3da8ad534b2';\nconst tonRpcTest: string = 'https://testnet.toncenter.com/api/v2/jsonRPC';\nconst hashHttpTest: string = 'https://testnet.toncenter.com/api/index/v1';\n\nasync function getTonTestWebProvider() {\n  return new TonWeb(\n    new TonWeb.HttpProvider(tonRpcTest, { apiKey: apiKeyTest })\n  );\n}\n\nexport const getTonBalance = async ({\n  tonAddress,\n  tokenContractAddress,\n  tokenPrecision,\n  chainId,\n}: {\n  tonAddress: string;\n  tokenContractAddress?: AddressType;\n  tokenPrecision?: number;\n  chainId?: number;\n}) => {\n  // get the decentralized RPC endpoint\n  const tonWeb =\n    chainId === mockTonTestnetChainId\n      ? await getTonTestWebProvider()\n      : await getTonWebProvider();\n  const wallet = tonWeb.wallet.create({ address: tonAddress }); // if your know only address at this moment\n  // const wallet = tonWeb.wallet.create({publicKey: TonWeb.utils.hexToBytes(publicKey)});\n\n  const address = await wallet.getAddress();\n  if (tokenContractAddress) {\n    // @ts-ignore\n    const jettonMinter = new TonWeb.token.jetton.JettonMinter(tonWeb.provider, {\n      address: tokenContractAddress,\n    });\n    const jettonWalletAddress = await jettonMinter.getJettonWalletAddress(\n      address\n    );\n    // console.log('My jetton wallet for ' + name + ' is ' + jettonWalletAddress.toString(true, true, true));\n    const jettonWallet = new TonWeb.token.jetton.JettonWallet(tonWeb.provider, {\n      address: jettonWalletAddress,\n    });\n    const balance = (await jettonWallet.getData()).balance;\n    return {\n      balance,\n      formatted: Number(balance.toString()) / 10 ** tokenPrecision,\n    };\n  }\n\n  const balance = await tonWeb.getBalance(address);\n  return { balance, formatted: TonWeb.utils.fromNano(balance) };\n};\n\n/**\n * build transfer signing message\n * @param transactionInfo  {publicKey: \"be91c0...\",value: 300000,toAddress: \"EQC4d8D4...\",memo: \"1111\"}\n * @returns\n */\nexport async function createSigningTransaction(\n  transactionInfo: TonSigningTransactionType\n) {\n  const amount = formatUnits(transactionInfo.value, tonDecimals);\n  const tonWeb = await getTonWebProvider();\n  const WalletClass = tonWeb.wallet.all['v4R2'];\n  //\n  const wallet = new WalletClass(tonWeb.provider, {\n    publicKey: tonWeb.utils.hexToBytes(transactionInfo.publicKey),\n    wc: 0,\n  });\n  //\n  const seqno = (await wallet.methods.seqno().call()) || 0;\n  let stateInit = null;\n  if (seqno == 0) {\n    const deploy = await wallet.createStateInit();\n    stateInit = deploy.stateInit;\n  }\n\n  let signingMessage;\n  let stateInitBoc;\n  let sendmode = SendMode.PAY_GAS_SEPARATELY + SendMode.IGNORE_ERRORS; // 3\n\n  if (\n    transactionInfo.tokenContractAddress &&\n    transactionInfo.tokenContractAddress.trim().length > 0 &&\n    transactionInfo.tokenPrecision\n  ) {\n    const jettonMinter = new TonWeb.token.jetton.JettonMinter(\n      tonWeb.provider,\n      // @ts-ignore\n      { address: transactionInfo.tokenContractAddress }\n    );\n    //\n    const walletAddress = await wallet.getAddress();\n    const jettonWalletAddress = await jettonMinter.getJettonWalletAddress(\n      walletAddress\n    );\n    //\n    const jettonWallet = new TonWeb.token.jetton.JettonWallet(tonWeb.provider, {\n      address: jettonWalletAddress.toString(true, true, false),\n    });\n\n    let comment;\n    if (typeof transactionInfo.memo === 'string') {\n      comment = new Uint8Array([\n        ...new TextEncoder().encode(transactionInfo.memo || '0'),\n      ]);\n    } else {\n      comment = transactionInfo.memo;\n    }\n\n    //\n    const tokenAmount = Number(amount) * 10 ** transactionInfo.tokenPrecision;\n    const convertedAmount = TonWeb.utils.toNano(\n      (tokenAmount / 10 ** 9).toString()\n    );\n    //\n    const transferBody = await jettonWallet.createTransferBody({\n      queryId: seqno,\n      // @ts-ignore\n      jettonAmount: convertedAmount,\n      toAddress: new TonWeb.utils.Address(transactionInfo.toAddress),\n      forwardPayload: comment,\n      forwardAmount: TonWeb.utils.toNano('0.0001'),\n      responseAddress: walletAddress,\n    });\n    //\n    const externalMessage = await wallet.createTransferMessage(\n      new Uint8Array(), //\n      jettonWalletAddress.toString(true, true, false),\n      TonWeb.utils.toNano('0.05'), //\n      seqno,\n      transferBody,\n      sendmode, //3, // sendmode\n      true, //\n      stateInit as any\n    );\n    /**\n         sendMode\n          0: Default Send Mode\n          1: Send as External Message\n          2: Send as Internal Message\n          3: Send as Bounceable Message\n          */\n\n    const cellBase64 = await externalMessage.signingMessage.toBoc(false);\n\n    if (stateInit) {\n      const cellBase641 = await stateInit.toBoc(false);\n      stateInitBoc = tonWeb.utils.bytesToHex(cellBase641);\n    }\n    signingMessage = tonWeb.utils.bytesToHex(cellBase64);\n    return {\n      signingMessageBoc: signingMessage,\n      stateInitBoc,\n    };\n  } else {\n    let toAddress: AddressType = new TonWeb.utils.Address(\n      transactionInfo.toAddress\n    ).toString(true, true, true);\n    const info = await tonWeb.provider.getAddressInfo(\n      transactionInfo.toAddress\n    );\n    if (info.state !== 'active') {\n      toAddress = new TonWeb.utils.Address(transactionInfo.toAddress).toString(\n        true,\n        true,\n        false\n      ); // convert to non-bounce\n    }\n\n    // const buffer = tonWeb.utils.base64ToBytes(transactionInfo.memo)\n    // const comment = tonWeb.boc.Cell.oneFromBoc(buffer)\n\n    const externalMessage = await wallet.createTransferMessage(\n      new Uint8Array(),\n      toAddress,\n      TonWeb.utils.toNano(amount),\n      seqno,\n      transactionInfo.memo, //\n      sendmode, //3,\n      true,\n      stateInit as any\n    );\n    const cellBase64 = await externalMessage.signingMessage.toBoc(false);\n    signingMessage = tonWeb.utils.bytesToHex(cellBase64);\n    // const hash = await externalMessage.signingMessage.hash();\n    if (stateInit) {\n      const cellBase641 = await stateInit.toBoc(false);\n      stateInitBoc = tonWeb.utils.bytesToHex(cellBase641);\n    }\n  }\n  return {\n    signingMessageBoc: signingMessage,\n    stateInitBoc,\n  };\n}\n\n// {'@type': 'ok', '@extra': '1724056253.9801953:10:0.38478557394306645', 'msgHash': ''};\nexport async function sendTransaction(\n  signedTransaction: string,\n  walletAddress?: string,\n  chainId?: number\n) {\n  const tonWeb =\n    chainId == mockTonTestnetChainId\n      ? await getTonTestWebProvider()\n      : await getTonWebProvider();\n\n  const cell = tonWeb.boc.Cell.fromBoc(\n    tonWeb.utils.base64ToBytes(signedTransaction)\n  )[0];\n  const msgHash = tonWeb.utils.bytesToBase64(await cell.hash());\n\n  let lt = '';\n  // if(walletAddress){\n  //   const addressInfo = await tonWeb.provider.getAddressInfo(walletAddress);\n  //   lt = addressInfo.last_transaction_id.lt || ''\n  // }\n\n  const result = await tonWeb.provider.sendBoc(signedTransaction);\n  return { ...result, msgHash, lt };\n}\n\n// {@extra: \"1723608477.1462789:0:0.6971379973574183\", @type: \"query.fees\", destination_fees: [], source_fees: {@type: \"fees\",fwd_fee: 0,gas_fee: 0,in_fwd_fee: 1006800,storage_fee:618}}\nexport async function sendMessageFee(\n  address: string,\n  signedTransaction: string\n) {\n  const tonWeb = await getTonWebProvider();\n  return tonWeb.provider.getEstimateFee({\n    address: address,\n    body: signedTransaction,\n  });\n}\n\nexport async function getTransactionsByInMessageHash(msg_hash: string) {\n  const transRes = await axios.get(\n    `${hashHttp}/getTransactionsByInMessageHash?msg_hash=${encodeURIComponent(\n      msg_hash\n    )}&include_msg_body=false&include_block=false`,\n    {\n      headers: {\n        'X-API-Key': apiKey,\n      },\n    }\n  );\n  return transRes?.data || [];\n}\n\nexport const tonRpcApiKey = apiKey;\n","import { useEffect, useState } from 'react';\n\nexport default class ProxyLocalStorage {\n  Telegram;\n  prefix: string = 'tomo-tg-wallet-sdk-';\n  userId: string = '';\n  constructor() {\n    if (typeof window != 'undefined') {\n      this.Telegram = window.Telegram;\n      if (!this.Telegram) {\n        throw `[TOMO] please include https://telegram.org/js/telegram-web-app.js in your project`;\n      }\n      const initDataUnsafe = this.Telegram.WebApp.initDataUnsafe || {\n        user: { id: '' },\n      };\n      const userId = initDataUnsafe?.user?.id || '';\n      this.userId = userId;\n    }\n  }\n  get(key, withTgUserId: boolean = true) {\n    if (typeof window === 'undefined') return null;\n    const oKey = withTgUserId\n      ? `${this.prefix}${key}_${this.userId}`\n      : `${this.prefix}${key}`;\n    try {\n      let value = localStorage.getItem(oKey);\n      return value ? JSON.parse(value) : null;\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n  }\n  set(key, value, withTgUserId: boolean = true) {\n    if (typeof window === 'undefined') return null;\n    const oKey = withTgUserId\n      ? `${this.prefix}${key}_${this.userId}`\n      : `${this.prefix}${key}`;\n    try {\n      localStorage.setItem(oKey, JSON.stringify(value));\n      return value;\n    } catch (error) {\n      return null;\n    }\n  }\n}\n\nexport function useProxyLocalStorage() {\n  const [storage, setStorage] = useState(({\n    get() {\n      console.warn('local storage proxy not created yet');\n      return '';\n    },\n    set() {\n      console.warn('local storage proxy not created yet');\n      return '';\n    },\n  } as unknown) as InstanceType<typeof ProxyLocalStorage>);\n\n  useEffect(() => {\n    setStorage(new ProxyLocalStorage());\n  }, []);\n\n  return storage;\n}\n","export const AppInfo = {\n  id: 'tomo',\n  version: '1.1.4',\n  name: 'Tomo Wallet',\n  homepage: 'https://tomo.inc',\n  logo: '',\n  description: 'Multi-Chain Wallet based on Telegram, by tomo team 🧑‍🤝‍🧑',\n  downloadLinks: {\n    android: '',\n    googlePlay: '',\n    ios: '',\n    appleStore: '',\n    testflight: '',\n    telegram: '',\n    browserExtension: {\n      chrome: '',\n      edge: '',\n    },\n  },\n  deepLinks: {\n    scheme: 'tomo://',\n    universallink: 'https://',\n    direct_link: 'https://t.me/tomowalletbot/tomo_wallet',\n  },\n};\n\n// Prod\nexport const BASE_URL = {\n  bridge: 'https://bridge.anyconn.org/v1/sub',\n  connect: 'https://tg.tomo.inc/bot-server/sdk/signature',\n  connect_direct_link: 'https://t.me/tomowalletbot/tomo_wallet',\n};\n\nexport const LOCALES = [\n  'en_US',\n  'ru_RU',\n  'zh_CN',\n  'zh',\n  'ar_AE',\n  'cs_CZ',\n  'de_DE',\n  'es_ES',\n  'es_LAT',\n  'fr_FR',\n  'id_ID',\n  'it_IT',\n  'nl_NL',\n  'pl_PL',\n  'pt_BR',\n  'pt_PT',\n  'ro_RO',\n  'tr_TR',\n  'uk_UA',\n  'vi_VN',\n];\n\nexport const supportedEvmChainIdDefault = [\n  1,\n  56,\n  42161,\n  10,\n  8453,\n  59144,\n  81457,\n  137,\n  43114,\n  5003,\n  11155111,\n  11155420,\n  331239,\n  534352,\n  8333,\n  324,\n  202105,\n  5545,\n  47763,\n  686868,\n  4200,\n  2649,\n  2648,\n  200901,\n  200810,\n  1513,\n  80084,\n  3636,\n  480,\n];\n","import { mockSolEvmChainId } from '../config/sol';\nimport { mockBtcEvmChainId } from '../config/btc';\nimport { mockTonChainId } from '../config/ton';\nexport const mockEvmChainIds = {\n  SOL: mockSolEvmChainId,\n  BTC: mockBtcEvmChainId,\n  TON: mockTonChainId,\n};\n\nexport enum CONNECT_MAP {\n  TOMO_MINI_APP = 'Tomo Mini App',\n  OKX_CONNECT = 'OKX Connect',\n  TON_CONNECT = 'TON Connect',\n  BITGET_WALLET = 'Bitget Wallet',\n  UXUY_WALLET = 'UXUY',\n}\n\nexport const ChainIdWithConnectsMap = {\n  SOL: [CONNECT_MAP.TOMO_MINI_APP],\n  BTC: [],\n  TON: [CONNECT_MAP.TOMO_MINI_APP, CONNECT_MAP.OKX_CONNECT, CONNECT_MAP.TON_CONNECT],\n  EVM: [CONNECT_MAP.TOMO_MINI_APP, CONNECT_MAP.OKX_CONNECT, CONNECT_MAP.BITGET_WALLET, CONNECT_MAP.UXUY_WALLET],\n};\n","import qs from 'qs';\nimport * as UUID from 'uuid';\n\nimport { LOCALES } from '../constant';\nimport { CONNECT_MAP } from '../../util/const';\n\nexport const tgUtils = {\n  decodeTelegramUrlParameters: function decodeTelegramUrlParameters(\n    encodedParameters,\n    isObject = true\n  ) {\n    const decodedParams = encodedParameters\n      .replaceAll('--', '%')\n      .replaceAll('__', '=')\n      .replaceAll('-', '&')\n      .replaceAll('%5F', '_')\n      .replaceAll('%2D', '-')\n      .replaceAll('%2E', '.');\n    if (isObject) return qs.parse(decodedParams);\n    return decodedParams;\n  },\n  stringify: function stringify(obj) {\n    const params = new URLSearchParams();\n\n    function buildParams(prefix, value) {\n      if (Array.isArray(value)) {\n        value.forEach((v, i) => {\n          if (/\\[\\]$/.test(prefix)) {\n            params.append(prefix, v);\n          } else {\n            buildParams(`${prefix}[${typeof v === 'object' ? i : ''}]`, v);\n          }\n        });\n      } else if (typeof value === 'object') {\n        for (const key in value) {\n          buildParams(`${prefix}[${key}]`, value[key]);\n        }\n      } else {\n        params.append(prefix, value);\n      }\n    }\n\n    for (const key in obj) {\n      buildParams(key, obj[key]);\n    }\n\n    return params.toString();\n  },\n  encodeTelegramUrlParameters: function encodeTelegramUrlParameters(\n    parameters,\n    isObject = true\n  ) {\n    if (isObject) {\n      parameters = tgUtils.stringify(parameters);\n      //  parameters = qs.stringify(parameters)\n    }\n    return parameters\n      .replaceAll('.', '%2E')\n      .replaceAll('-', '%2D')\n      .replaceAll('_', '%5F')\n      .replaceAll('&', '-')\n      .replaceAll('=', '__')\n      .replaceAll('%', '--');\n  },\n  opendeepLink: function opendeepLink(\n    paramsStr,\n    {\n      domain = 'tomowalletbot', //\n      appname = 'app',\n    }\n  ) {\n    var protoUrl = `tg:\\/\\/resolve?domain=${domain}&mode=compact&appname=${appname}&startapp=${paramsStr}`;\n    if (true) {\n      var iframeContEl =\n        document.getElementById('tgme_frame_cont') || document.body;\n      var iframeEl = document.createElement('iframe');\n      iframeContEl.appendChild(iframeEl);\n      var pageHidden = false;\n      window.addEventListener(\n        'visibilitychange',\n        function() {\n          pageHidden =\n            document.hidden ||\n            document.webkitHidden ||\n            document.mozHidden ||\n            document.msHidden;\n        },\n        false\n      );\n      window.addEventListener(\n        'pagehide',\n        function() {\n          pageHidden = true;\n        },\n        false\n      );\n      window.addEventListener(\n        'blur',\n        function() {\n          pageHidden = true;\n        },\n        false\n      );\n      if (iframeEl !== null) {\n        iframeEl.src = protoUrl;\n      }\n      !false &&\n        setTimeout(function() {\n          if (!pageHidden) {\n            (window as any).location = protoUrl;\n          }\n        }, 2000);\n    } else if (protoUrl) {\n      setTimeout(function() {\n        (window as any).location = protoUrl;\n      }, 100);\n    }\n  },\n  getDeepLink: function({\n    tMeUrl,\n    params,\n    mode = 'compact',\n  }: {\n    tMeUrl: string;\n    params?: any;\n    mode?: string;\n    compact;\n  }) {\n    const [, domain, appname] = tMeUrl.match(/t\\.me\\/([^\\/]+)\\/([^\\/]+)/);\n    const paramsStr = params ? this.encodeTelegramUrlParameters(params) : '';\n\n    const deepLink = `tg:\\/\\/resolve?domain=${domain}&mode=${mode}&appname=${appname}`;\n\n    return paramsStr ? deepLink + `&startapp=${paramsStr}` : deepLink;\n  },\n};\n\nexport function getUUid() {\n  return UUID.v4();\n}\n\nexport function isMobileDevice() {\n  return /Mobi|Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n    navigator.userAgent\n  );\n}\n\nexport const isIOS = () => {\n  return (\n    /iPad|iPhone|iPod/.test(navigator.userAgent) && !(window as any).MSStream\n  );\n};\n\nexport function isTelegramInAppBrowser() {\n  return /Telegram/i.test(navigator.userAgent);\n}\n\nexport function isPcBrowser() {\n  return !isMobileDevice() && !isTelegramInAppBrowser();\n}\n\nexport function getOkxLanguage(lang: string = 'en_US') {\n  return LOCALES.includes(lang) ? lang : 'en_US';\n}\n\nexport function getDisplayName(name: string) {\n  const nameMap: Record<CONNECT_MAP, string> & { [name: string]: string } = {\n    'Tomo Mini App': 'Tomo Wallet',\n    'OKX Connect': 'OKX Wallet',\n    'TON Connect': 'TON Wallets',\n    'EVM Connect': 'EVM Wallets',\n    [CONNECT_MAP.BITGET_WALLET]: 'Bitget Wallet',\n    [CONNECT_MAP.UXUY_WALLET]: 'UXUY Wallet',\n  };\n  return nameMap[name] || name;\n}\n\nexport function getDisplayDescription(name: string) {\n  const nameMap: Record<CONNECT_MAP, string> & { [name: string]: string } = {\n    'Tomo Mini App': 'Multichain',\n    'OKX Connect': 'TG & App',\n    'TON Connect': '',\n    'EVM Connect': '',\n    [CONNECT_MAP.BITGET_WALLET]: 'mini app',\n    [CONNECT_MAP.UXUY_WALLET]: 'mini app',\n  };\n  return nameMap[name] || '';\n}\n\nexport default {};\n","import { initOptions } from \"./types/types\";\n\nexport function getSyncSiteMetadata(metaData?:initOptions[\"metaData\"]) {\n\n    let hostname = window.location.hostname\n    try {\n        hostname =  new URL(metaData?.url || \"\")?.hostname || hostname\n    } catch (error) {\n        console.warn(`new URL(${metaData?.url}) error`)\n    }\n\n    \n\n    return {\n        url: metaData?.url || \"\",\n        hostname,\n        name: metaData?.name || 'DApp',\n        icon: metaData?.icon || getSyncSiteIcon(window),\n        direct_link: metaData?.direct_link,\n        description: metaData?.description\n\n    };\n}\n\n/**\n * Get site metadata.\n *\n * @returns The site metadata.\n */\nexport async function getSiteMetadata() {\n    return {\n        hostname: window.location.hostname,\n        name: getSiteName(window),\n        icon: await getSiteIcon(window),\n    };\n}\n\n/**\n * Extract a name for the site from the DOM.\n *\n * @param windowObject - The window object to extract the site name from.\n * @returns The site name.\n */\nfunction getSiteName(windowObject: typeof window): string {\n    const { document } = windowObject;\n\n    const siteName: HTMLMetaElement | null = document.querySelector(\n        'head > meta[property=\"og:site_name\"]',\n    );\n    if (siteName) {\n        return siteName.content;\n    }\n\n    const metaTitle: HTMLMetaElement | null = document.querySelector(\n        'head > meta[name=\"title\"]',\n    );\n    if (metaTitle) {\n        return metaTitle.content;\n    }\n\n    if (document.title && document.title.length > 0) {\n        return document.title;\n    }\n\n    return window.location.hostname;\n}\n\nfunction getSyncSiteIcon(\n    windowObject: typeof window,\n): String | null {\n    const { document } = windowObject;\n    const icons: NodeListOf<HTMLLinkElement> = document.querySelectorAll(\n        'head > link[rel~=\"icon\"]',\n    );\n    for (const icon of Array.from(icons)) {\n        if (icon) {\n            return icon.href;\n        }\n    }\n    return null;\n}\n\n\n/**\n * Extract an icon for the site from the DOM.\n *\n * @param windowObject - The window object to extract the site icon from.\n * @returns An icon URL, if one exists.\n */\nasync function getSiteIcon(\n    windowObject: typeof window,\n): Promise<string | null> {\n    const { document } = windowObject;\n\n    const icons: NodeListOf<HTMLLinkElement> = document.querySelectorAll(\n        'head > link[rel~=\"icon\"]',\n    );\n    for (const icon of Array.from(icons)) {\n        if (icon && (await imgExists(icon.href))) {\n            return icon.href;\n        }\n    }\n\n    return null;\n}\n\n\n/**\n * Return whether the given image URL exists.\n *\n * @param url - The url of the image.\n * @returns Whether the image exists.\n */\nasync function imgExists(url: string): Promise<boolean> {\n    return new Promise((resolve, reject) => {\n        try {\n            const img = document.createElement('img');\n            img.onload = () => resolve(true);\n            img.onerror = () => resolve(false);\n            img.src = url;\n        } catch (error) {\n            reject(error);\n        }\n    });\n}","// Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\n\nimport { Address } from '@ton/core';\n\ninterface Tag<T extends string, RealType> {\n  __tag__: T;\n  __realType__: RealType;\n}\n\nexport type OpaqueType<T extends string, U> = U & Tag<T, U>;\n\nexport function OpaqueType<T extends Tag<any, any>>() {\n  return (value: T extends Tag<any, infer U> ? U : never): T => value as T;\n}\n\nexport type HexString = OpaqueType<'HexString', string>;\nexport const HexString = OpaqueType<HexString>();\n\nexport type AddressString = OpaqueType<'AddressString', string>;\nexport const AddressString = OpaqueType<AddressString>();\n\nexport type BigIntString = OpaqueType<'BigIntString', string>;\nexport const BigIntString = OpaqueType<BigIntString>();\n\nexport type IntNumber = OpaqueType<'IntNumber', number>;\nexport function IntNumber(num: number): IntNumber {\n  return Math.floor(num) as IntNumber;\n}\n\nexport type RegExpString = OpaqueType<'RegExpString', string>;\nexport const RegExpString = OpaqueType<RegExpString>();\n\nexport type Callback<T> = (err: Error | null, result: T | null) => void;\n\nexport const PROVIDER_ALLIANCE = {\n  EVM: 'evm',\n  SOL: 'sol',\n  TON: 'ton',\n};\n\nexport type Account = {\n  address: string;\n  chainId?: string | number;\n  chainKey?: string;\n  alliance: string;\n  chainName?: string;\n  chainSymbol?: string;\n  name?: string;\n  symbol?: string;\n  publicKey?: string;\n};\n\nexport type SwitchEthereumChainParams = {\n  chainId: number;\n};\n\nexport type initOptions = {\n  bridge?: string;\n  chainId?: number;\n  connect?: string;\n  connect_direct_link?: string;\n  eventTimeout?: number;\n  injected?: boolean;\n  metaData: MetaData;\n};\n\nexport interface MetaData {\n  hostname?: string;\n  icon: string;\n  name: string;\n  url?: string;\n  direct_link?: string;\n  description?: string;\n}\nexport interface TomoOptions {\n  bridge?: string;\n  connect?: string;\n  connect_direct_link?: string;\n  metaData: MetaData;\n  injected: boolean;\n}\n\nexport interface TonTxParams {\n  valid_until?: number | bigint;\n  validUntil?: number | bigint;\n  network?: string;\n  from?: string;\n  messages: {\n    address: string;\n    amount: string;\n    stateInit?: string;\n    payload?: string;\n  }[];\n}\n\nexport enum TonTxBodyType {\n  JETTON_PAYLOAD_JSON_LEGACY = 'JETTON_PAYLOAD_JSON_LEGACY',\n  STANDARD = 'STANDARD',\n}\n\nexport interface TonTransferBodyLegacy {\n  from: string;\n  to: string | Address;\n  value: string | bigint | number;\n  memo?: string;\n  contractAddress?: string;\n  precision?: string;\n  forwardAmount?: string;\n  type?: TonTxBodyType.JETTON_PAYLOAD_JSON_LEGACY;\n  chainId?: number;\n  publicKey?: string;\n}\n\nexport interface TonTxRequestStandard {\n  type: TonTxBodyType.STANDARD;\n  jettonInfo: {\n    recipientAddress: string;\n    amount: string;\n    jettonMinterAddress: string;\n  };\n  body: TonTxParams;\n  chainId: number;\n  publicKey: string;\n}\n\nexport type TonTxRequest = TonTransferBodyLegacy | Partial<TonTxRequestStandard>;\n\ntype SendTransactionResponse =\n  | SendTransactionResponseSuccess\n  | SendTransactionResponseError;\n\ninterface SendTransactionResponseSuccess {\n  result: string;\n  id: string;\n}\n\ninterface SendTransactionResponseError {\n  error: { code: number; message: string };\n  id: string;\n}\n\nexport interface TonProvider {\n  connected: boolean;\n  account: {\n    address: string;\n    publicKey: string;\n  };\n  sendTransaction: (param: TonTxParams) => SendTransactionResponse;\n  disconnect: any;\n  getBalance: any;\n}\n\nexport type IWeb3Type = 'EVM' | 'SOL' | 'BTC' | 'SUI' | 'ALL' | 'TON';\n\nexport interface OutputDef {\n  config: {\n    accounts: Record<string, Account>;\n  };\n  hash: string;\n  salt: string;\n  signature: string;\n  id: string;\n  method: string;\n  params: any[];\n  result: any;\n  options: {\n    account: Account;\n    metaData: {\n      hostname: string;\n      icon: string;\n      name: string;\n      url: string;\n    };\n  };\n}\n\nexport type SupportedProvider = 'EVM' | 'TON' | 'Solana' | 'SUI';\nexport type ConnectType = 'OKX' | 'TOMO' | 'TON' | 'BITGET' | 'UXUY'\n\nexport enum TomoProviderEventName {\n  TOMO_EVM_PROVIDER_DISCONNECTED = 'TOMO_EVM_PROVIDER_DISCONNECTED',\n  TOMO_EVM_PROVIDER_CONNECTED = 'TOMO_EVM_PROVIDER_DISCONNECTED',\n}\n","\nexport const messages = {\n  errors: {\n    disconnected: () =>\n      'ToMoWallet: Disconnected from chain. Attempting to connect.',\n    permanentlyDisconnected: () =>\n      'ToMoWallet: Disconnected from ToMoWallet background. Page reload required.',\n    sendSiteMetadata: () =>\n      `ToMoWallet: Failed to send site metadata. This is an internal error, please report this bug.`,\n    unsupportedSync: (method: string) =>\n      `ToMoWallet: The ToMoWallet Ethereum provider does not support synchronous methods like ${method} without a callback parameter.`,\n    invalidDuplexStream: () => 'Must provide a Node.js-style duplex stream.',\n    invalidNetworkParams: () =>\n      'ToMoWallet: Received invalid network parameters. Please report this bug.',\n    invalidRequestArgs: () => `Expected a single, non-array, object argument.`,\n    invalidRequestMethod: () => `'args.method' must be a non-empty string.`,\n    invalidRequestParams: () =>\n      `'args.params' must be an object or array if provided.`,\n    invalidLoggerObject: () => `'args.logger' must be an object if provided.`,\n    invalidLoggerMethod: (method: string) =>\n      `'args.logger' must include required method '${method}'.`,\n    invalidChains: (chainId: string) =>\n      `'ToMoWallet: not supported chain with ID '${chainId}'. try connect wallet to supported chain.`,\n    timeOut: (method: string) =>\n      `'ToMoWallet: Timed out while waiting for response from '${method}'.`,\n\n  },\n  info: {\n    connected: (chainId: string) =>\n      `ToMoWallet: Connected to chain with ID \"${chainId}\".`,\n  },\n  warnings: {\n    // deprecated properties\n    chainIdDeprecation: `ToMoWallet: 'ethereum.chainId' is deprecated and may be removed in the future. Please use the 'eth_chainId' RPC method instead.`,\n    networkVersionDeprecation: `ToMoWallet: 'ethereum.networkVersion' is deprecated and may be removed in the future. Please use the 'net_version' RPC method instead.`,\n    selectedAddressDeprecation: `ToMoWallet: 'ethereum.selectedAddress' is deprecated and may be removed in the future. Please use the 'eth_accounts' RPC method instead.`,\n    // deprecated methods\n    enableDeprecation: `ToMoWallet: 'ethereum.enable()' is deprecated and may be removed in the future. Please use the 'eth_requestAccounts' RPC method instead.`,\n    sendDeprecation: `ToMoWallet: 'ethereum.send(...)' is deprecated and may be removed in the future. Please use 'ethereum.sendAsync(...)' or 'ethereum.request(...)' instead.`,\n    // deprecated events\n    events: {\n      close: `ToMoWallet: The event 'close' is deprecated and may be removed in the future. Please use 'disconnect' instead.`,\n      data: `ToMoWallet: The event 'data' is deprecated and will be removed in the future. Use 'message' instead.`,\n      networkChanged: `ToMoWallet: The event 'networkChanged' is deprecated and may be removed in the future. Use 'chainChanged' instead.`,\n      notification: `ToMoWallet: The event 'notification' is deprecated and may be removed in the future. Use 'message' instead.`,\n    },\n    rpc: {\n      ethDecryptDeprecation: `ToMoWallet: The RPC method 'eth_decrypt' is deprecated and may be removed in the future.`,\n      ethGetEncryptionPublicKeyDeprecation: `ToMoWallet: The RPC method 'eth_getEncryptionPublicKey' is deprecated and may be removed in the future.`,\n      walletWatchAssetNFTExperimental: `ToMoWallet: The RPC method 'wallet_watchAsset' is experimental for ERC721/ERC1155 assets and may change in the future.`,\n    },\n    // misc\n    experimentalMethods: `ToMoWallet: 'ethereum._ToMoWallet' exposes non-standard, experimental methods. They may be removed or changed without warning.`,\n  },\n\n};\nexport const errorCodes = {\n  rpc: {\n    timeoutRequest: -30008, // 超时\n    invalidInput: -32000,\n    resourceNotFound: -32001,\n    resourceUnavailable: -32002,\n    transactionRejected: -32003,\n    methodNotSupported: -32004,\n    limitExceeded: -32005,\n    parse: -32700,\n    invalidRequest: -32600,\n    methodNotFound: -32601,\n    invalidParams: -32602,\n    internal: -32603,\n  },\n  provider: {\n\n    unsupportedChain: 4002,\n    userRejectedRequest: 4001,\n    unauthorized: 4100,\n    unsupportedMethod: 4200,\n    disconnected: 4900,\n    chainDisconnected: 4901,\n  },\n};\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport const errorValues = {\n  '-32700': {\n    standard: 'JSON RPC 2.0',\n    message:\n      'Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text.',\n  },\n  '-32600': {\n    standard: 'JSON RPC 2.0',\n    message: 'The JSON sent is not a valid Request object.',\n  },\n  '-32601': {\n    standard: 'JSON RPC 2.0',\n    message: 'The method does not exist / is not available.',\n  },\n  '-32602': {\n    standard: 'JSON RPC 2.0',\n    message: 'Invalid method parameter(s).',\n  },\n  '-32603': {\n    standard: 'JSON RPC 2.0',\n    message: 'Internal JSON-RPC error.',\n  },\n  '-32000': {\n    standard: 'EIP-1474',\n    message: 'Invalid input.',\n  },\n  '-32001': {\n    standard: 'EIP-1474',\n    message: 'Resource not found.',\n  },\n  '-32002': {\n    standard: 'EIP-1474',\n    message: 'Resource unavailable.',\n  },\n  '-32003': {\n    standard: 'EIP-1474',\n    message: 'Transaction rejected.',\n  },\n  '-32004': {\n    standard: 'EIP-1474',\n    message: 'Method not supported.',\n  },\n  '-32005': {\n    standard: 'EIP-1474',\n    message: 'Request limit exceeded.',\n  },\n  '4001': {\n    standard: 'EIP-1193',\n    message: 'User rejected the request.',\n  },\n  '4100': {\n    standard: 'EIP-1193',\n    message:\n      'The requested account and/or method has not been authorized by the user.',\n  },\n  '4200': {\n    standard: 'EIP-1193',\n    message: 'The requested method is not supported by this Ethereum provider.',\n  },\n  '4900': {\n    standard: 'EIP-1193',\n    message: 'The provider is disconnected from all chains.',\n  },\n  '4901': {\n    standard: 'EIP-1193',\n    message: 'The provider is disconnected from the specified chain.',\n  },\n};\n\n\n\nexport const FALLBACK_MESSAGE = 'Unspecified error message. This is a bug, please report it.';\nexport const rpcErrors = {\n  // timeoutRequest: function ({ code, message, data }: { code?: number | string, message?: string, data?: any }) {\n  //   code = (code || errorCodes.rpc.invalidRequest).toString()\n  //   return {\n  //     code: errorCodes.rpc.invalidRequest,\n  //     message: message || errorValues[code as ErrorValueKey].message || FALLBACK_MESSAGE,\n  //     data\n  //   }\n  // },\n  invalidRequest: function ({ code, message, data }: { code?: number | string, message?: string, data?: any }) {\n    code = (code || errorCodes.rpc.invalidRequest).toString()\n    return {\n      code: code,\n      message: message || errorValues[code as ErrorValueKey].message || FALLBACK_MESSAGE,\n      data\n    }\n  },\n  methodNotSupported: function ({ code, message, data }: { code?: number, message?: string, data?: any }) {\n    return {\n      code: errorCodes.rpc.invalidRequest,\n      message: FALLBACK_MESSAGE || messages.errors.invalidRequestArgs,\n      data\n    }\n  }\n\n}\n\n\nexport type ErrorValueKey = keyof typeof errorValues\n\n","import { Account, IWeb3Type, OutputDef } from '../types/types';\n\nconst outputDef: OutputDef = {\n  config: {\n    accounts: {\n      eth: {\n        address: '',\n        alliance: 'evm',\n        name: '',\n        chainId: undefined,\n        symbol: '',\n      },\n    },\n  },\n  hash: '',\n  salt: '',\n  signature: '',\n  id: '',\n  method: '',\n  params: [],\n  result: [],\n  options: {\n    account: {\n      address: '',\n      alliance: 'evm',\n      name: '',\n      chainId: undefined,\n      symbol: '',\n      chainKey: '',\n      chainName: '',\n      chainSymbol: '',\n    },\n    metaData: {\n      hostname: '',\n      icon: '',\n      name: '',\n      url: '',\n    },\n  },\n};\nexport const loginDefineProperties = (\n  request: any,\n  response: any,\n  chain: IWeb3Type = 'EVM',\n  isTonProof = false\n) => {\n  const output = { ...outputDef }; //keep deep link\n  output.hash = request.hash;\n  output.salt = request.salt;\n  output.signature = request.signature;\n  output.id = request.id;\n  output.method = request.method;\n  output.params = request.params;\n  if (response.code === 10000) {\n    if (chain === 'EVM') {\n      output.config.accounts = {\n        eth: {\n          address:\n            response.result.defaultEthereumAddress ?? response.result.v2Address,\n          alliance: 'evm',\n          name: 'ethereum',\n          chainId: 1,\n          symbol: 'ETH',\n        },\n      };\n    } else {\n      const res = isTonProof ? response.result.user : response.result;\n      output.config.accounts = formatAccount(\n        chain,\n        res,\n        request.params?.[0]?.chainId\n      );\n    }\n\n    output.result =\n      chain === 'EVM'\n        ? [response.result.defaultEthereumAddress ?? response.result.v2Address]\n        : output.config.accounts[chain.toLowerCase()];\n\n    if (isTonProof) {\n      output.result.tonProof = response.result.tonProof;\n      output.result.stateInit = response.result.stateInit;\n    }\n  } else {\n    throw new Error(JSON.stringify(response));\n  }\n  output.options.account =\n    output.config.accounts[chain === 'EVM' ? 'eth' : chain.toLowerCase()];\n  return output;\n};\n\nexport const signDefineProperties = (\n  request: any,\n  response: any,\n  source: any,\n  chain: IWeb3Type = 'EVM'\n) => {\n  const output = { ...outputDef };\n  if (chain === 'EVM') {\n    output.config.accounts = {\n      eth: source,\n    };\n  } else {\n    output.config.accounts = {\n      [chain.toLowerCase()]: source,\n    };\n  }\n  output.hash = request.hash;\n  output.salt = request.salt;\n  output.signature = request.signature;\n  output.id = request.id;\n  output.method = request.method;\n  output.params = request.params;\n  output.result = response ?? {\n    code: -1,\n    message: 'Network error',\n    result: undefined,\n  };\n  output.options.account =\n    output.config.accounts[chain === 'EVM' ? 'eth' : chain.toLowerCase()];\n  return output;\n};\n\nexport const formatAccount = (\n  chain: IWeb3Type,\n  res,\n  chainId\n): Record<string, Account> => {\n  switch (chain) {\n    case 'BTC':\n      return {\n        btc: {\n          address: res.defaultBtcAddress,\n          alliance: 'btc',\n          name: 'bitcoin',\n          chainId: chainId || 0,\n          symbol: 'BTC',\n        },\n      };\n    case 'SOL':\n      return {\n        sol: {\n          address: res.solanaAddress,\n          alliance: 'sol',\n          name: 'solana',\n          chainId: chainId || 501,\n          symbol: 'SOL',\n        },\n      };\n    case 'TON':\n      return {\n        ton: {\n          // TODO: testnet address need to be changed\n          address: chainId === 1101 ? res.tonAddressTest : res.tonAddress,\n          publicKey: res.tonPublicKey,\n          alliance: 'ton',\n          name: 'ton',\n          chainId: chainId || 1100,\n          symbol: 'TON',\n        },\n      };\n    case 'SUI':\n      return {\n        sui: {\n          address: res.suiAddress,\n          alliance: 'sui',\n          name: 'sui',\n          chainId: chainId || 784,\n          symbol: 'SUI',\n        },\n      };\n    default:\n      return {\n        eth: {\n          address: res.defaultEthereumAddress ?? res.v2Address,\n          alliance: 'evm',\n          name: 'ethereum',\n          chainId: 1,\n          symbol: 'ETH',\n        },\n      };\n  }\n};\n","import { AppInfo } from '../constant';\nimport { getSyncSiteMetadata } from '../metaData';\nimport { Account, initOptions, PROVIDER_ALLIANCE } from '../types/types';\nimport ProxyLocalStorage from '../ProxyLocalStorage';\nimport EventEmitter from 'eventemitter3';\nimport axios from 'axios';\nimport { errorCodes, messages, rpcErrors } from '../message';\nimport { tgUtils } from '../utils/utils';\nimport {\n  loginDefineProperties,\n  signDefineProperties,\n} from '../utils/properties';\ninterface RequestOptions {\n  account: Account;\n  metaData: initOptions['metaData'];\n  timeStamp?: number;\n}\n\nfunction transfer16(val: string | number = 0) {\n  val = isNaN(Number(val)) ? 1 : Number(val);\n  return '0x' + val.toString(16);\n}\n\n/** for clear walletPromise when timeout or promise finally */\nconst walletPromiseTimeoutClear = (() => {\n  const walletPromiseMap: Map<string, Promise<Record<string, any>>> = new Map();\n\n  return (id, fn, timeout = 1000) => {\n    if (walletPromiseMap.has(id)) return walletPromiseMap.get(id);\n    const promise: Promise<Record<string, any>> = fn();\n    walletPromiseMap.set(id, promise);\n    setTimeout(() => {\n      walletPromiseMap.delete(id);\n    }, timeout);\n    return promise.finally(() => {\n      walletPromiseMap.delete(id);\n    });\n  };\n})();\n\nconst defaultAccount: Account = {\n  address: '',\n  chainId: '0x1',\n  chainKey: 'ethereum',\n  alliance: PROVIDER_ALLIANCE.EVM,\n  chainName: 'Ethereum netWork',\n  chainSymbol: 'ETH',\n};\n\nexport default class ProviderUtils extends EventEmitter {\n  eventTimeout: number;\n  storage: ProxyLocalStorage;\n  metaData: initOptions['metaData'];\n  connectUrl: string;\n  bridgeUrl: string;\n  connect_direct_link: string;\n  private _isRetryCount: number = 0;\n  get _lastTime() {\n    return isNaN(Number(this.storage.get('lastTime') || 0))\n      ? 0\n      : Number(this.storage.get('lastTime') || 0);\n  }\n  set _lastTime(value) {\n    this.storage.set('lastTime', value);\n  }\n\n  get _account() {\n    return this.storage.get('account') || defaultAccount;\n  }\n  set _account(account: Account | null) {\n    const oldAccount = { ...(this._account || defaultAccount) };\n\n    if (!account) {\n      account = {\n        ...oldAccount,\n        address: '',\n      };\n    }\n    this.storage.set('account', account);\n\n    if (transfer16(oldAccount?.chainId) != transfer16(account?.chainId)) {\n      this.emit('chainChanged', this?.chainId, account?.alliance, account);\n      this.emit('networkChanged', parseInt(this?.chainId), account?.alliance);\n    }\n    if (oldAccount?.address != account?.address) {\n      this.emit('accountsChanged', account?.address ? [account?.address] : []);\n    }\n  }\n\n  get _accounts() {\n    return (\n      this.storage.get(`accounts`) || {\n        ethereum: defaultAccount,\n      }\n    );\n  }\n  set _accounts(accounts: { [key: string]: Account }) {\n    this.storage.set(`accounts`, accounts);\n  }\n\n  get chainId() {\n    return this._account?.chainId ? transfer16(this._account?.chainId) : null;\n  }\n\n  constructor(options?: initOptions) {\n    super();\n    this.eventTimeout = options?.eventTimeout || 10 * 60 * 1000;\n    this.metaData = options?.metaData;\n    this.storage = new ProxyLocalStorage();\n    this.connectUrl = options.connect;\n    this.bridgeUrl = options.bridge;\n    this.connect_direct_link = options.connect_direct_link;\n  }\n\n  async request(payload: { method: string; params: any[] }) {\n    const { method, params = [] } = payload || {};\n\n    if (!payload || typeof payload !== 'object' || Array.isArray(payload)) {\n      throw rpcErrors.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: params,\n      });\n    }\n\n    if (typeof method !== 'string' || method.length === 0) {\n      throw rpcErrors.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: payload as any,\n      });\n    }\n\n    const requestKey = `${method}-${JSON.stringify(params || [])}`;\n    return walletPromiseTimeoutClear(requestKey, () =>\n      this.connectSse(method, params)\n    );\n  }\n\n  /** get sse token / add salt */\n  async getSseToken(method, params, options?: RequestOptions) {\n    const account = this._account;\n    const now = new Date().getTime();\n    this._lastTime = now;\n    options = {\n      account,\n      metaData: getSyncSiteMetadata(this.metaData),\n      ...options,\n      timeStamp: now,\n    };\n    const id =\n      new Date().getTime() + Math.floor(Math.random() * 1000).toString();\n\n    let salt = `salt-${Date.now()}-${id}`;\n    salt = Buffer.from(salt, 'utf-8')\n      .toString('base64')\n      .replace('==', '')\n      .replace('=', '');\n\n    const payload = {\n      id,\n      method,\n      params,\n      options,\n    };\n\n    // push参数\n    const publish_params = {\n      id: payload.id,\n      data: payload,\n      version: '1.0',\n      salt: salt,\n    };\n    const response = await axios.post(\n      this.connectUrl,\n      {\n        payload_base64: Buffer.from(\n          JSON.stringify(publish_params),\n          'utf-8'\n        ).toString('base64'),\n      },\n      {\n        headers: {\n          'X-Salt': salt,\n        },\n      }\n    );\n\n    const { hash, signature } = response.data;\n    return { hash, signature, salt };\n  }\n\n  /** connect sse */\n  async connectSse(method, params, options?: RequestOptions) {\n    // add salt\n    const { salt, hash, signature } = await this.getSseToken(\n      method,\n      params,\n      options\n    );\n    // deepLink param\n    const direct_params = {\n      method,\n      params: [salt, hash, signature],\n    };\n    const id =\n      new Date().getTime() + Math.floor(Math.random() * 1000).toString();\n    const request = {\n      id,\n      method,\n      params,\n      options,\n      hash,\n      signature,\n      salt,\n    };\n    return this.createEventSource(\n      hash,\n      signature,\n      salt,\n      direct_params,\n      request\n    );\n  }\n\n  /** create EventSource */\n  createEventSource(hash, signature, salt, direct_params, request) {\n    const eventSource = new EventSource(\n      `${this.bridgeUrl}?appid=${hash}&signature=${signature}&salt=${salt}`\n    );\n    return new Promise((resolve, reject) => {\n      const timer =\n        this.eventTimeout > 0\n          ? setTimeout(() => {\n              reject(\n                rpcErrors.invalidRequest({\n                  code: errorCodes?.rpc?.timeoutRequest,\n                  message: messages.errors.timeOut(request.method),\n                  data: request as any,\n                })\n              );\n              eventSource.close();\n            }, this.eventTimeout || 60000)\n          : null;\n\n      eventSource.addEventListener('message', event => {\n        if (event?.data === 'hi' || event?.data === 'close') return;\n        if (!event?.data) {\n          this._isRetryCount += 1;\n          eventSource.close();\n          clearTimeout(timer);\n          if (this._isRetryCount > 4) {\n            this._isRetryCount = 0;\n            throw new Error('Tomo Wallet Request error');\n          }\n          // retry, max 4 times\n          return this.createEventSource(\n            hash,\n            signature,\n            salt,\n            direct_params,\n            request\n          );\n        }\n\n        const [chain, operation] = request.method.split('_');\n\n        try {\n          const decodedString = atob(event?.data);\n          let data = JSON.parse(decodedString);\n\n          const source = this.storage.get('account');\n\n          if (operation.includes('connect')) {\n            const isTonProof = request.params[0]?.tonProof;\n            data = loginDefineProperties(request, data, chain.toUpperCase(), isTonProof);\n            this.storage.set('account', data.options.account);\n            // add useId in storage key\n            this.storage.set(`accounts`, {\n              ...(this.storage.get(`accounts`) || {}),\n              [chain.toLowerCase()]: data.options.account,\n            });\n          } else {\n            data = signDefineProperties(request, data, source, chain);\n          }\n\n          if (data?.id == request.id || salt == data?.salt) {\n            eventSource?.close();\n\n            clearTimeout(timer);\n            if (data.reConnect || !data.error) {\n              ProxyResponse.call(this, data);\n            }\n\n            this._isRetryCount = 0;\n            data.error ? reject(data.error) : resolve({ ...data.result });\n            return;\n          } else {\n            return console.log('Tomo wallet data error');\n          }\n        } catch (error) {\n          console.log(error);\n          reject(error)\n        }\n      });\n\n      this.openAuthBot(direct_params);\n    });\n  }\n\n  /** open auth bot */\n  openAuthBot(direct_params: { method: string; params: any[] }) {\n    let base64Content = { method: direct_params.method, params: direct_params.params };\n    let base64ContentStr = JSON.stringify(base64Content);\n    const utf8Array = new TextEncoder().encode(base64ContentStr);\n    const base64Encoded = btoa(String.fromCharCode(...utf8Array));\n\n    if (!this._isRetryCount) {\n      const Telegram = window.Telegram;\n      // check is tg web app sdk available\n      if (!Telegram) {\n        throw `[TOMO] please include https://telegram.org/js/telegram-web-app.js in your project`\n      }\n      const url = `${\n        this.connect_direct_link\n      }?startapp=${base64Encoded}&mode=compact`;\n      Telegram.WebApp.initData && Telegram?.WebApp?.openTelegramLink?.(url);\n\n      if (!Telegram.WebApp.initData) {\n        const match = this.connect_direct_link.match(\n          /t\\.me\\/([^\\/]+)\\/([^\\/]+)/\n        );\n        if (match[1] && match[2]) {\n          !Telegram.WebApp.initData &&\n            tgUtils.opendeepLink(base64Encoded, {\n              domain: match[1],\n              appname: match[2],\n            });\n        } else {\n          !Telegram.WebApp.initData && tgUtils.opendeepLink(base64Encoded, {});\n        }\n      }\n    }\n  }\n\n  /** get tomo bot app infp */\n  getAppInfo() {\n    return {\n      ...AppInfo,\n    };\n  }\n\n  removeAccount(chainType) {\n    this._accounts = { ...this._accounts, [chainType]: null };\n  }\n\n  getMethodInfo(methodString: string) {\n    return methodString.split('_') || [];\n  }\n}\n\nfunction ProxyResponse(reponsePayload) {\n  const { method, config, params, result } = reponsePayload || {};\n  const requestParams = config?.params?.[0] || {};\n  if (config) {\n    // console.log('ProxyResponse', reponsePayload);\n    const accounts = config?.accounts;\n    accounts && (this._accounts = { ...(this._accounts || {}), ...accounts });\n\n    return reponsePayload;\n  }\n}\n","\n//@ts-nocheck\n// todo  类型处理\ntype EIP712Types = {\n  [propsKey: string]: any\n}\nfunction _sanitizeData(data: EIP712Types) {\n  const TYPED_MESSAGE_SCHEMA = {\n      type: 'object',\n      properties: {\n          types: {\n              type: 'object',\n              additionalProperties: {\n                  type: 'array',\n                  items: {\n                      type: 'object',\n                      properties: {\n                          name: { type: 'string' },\n                          type: { type: 'string' },\n                      },\n                      required: ['name', 'type'],\n                  },\n              },\n          },\n          primaryType: { type: 'string' },\n          domain: { type: 'object' },\n          message: { type: 'object' },\n      },\n      required: ['types', 'primaryType', 'domain', 'message'],\n  };\n  const sanitizedData: EIP712Types = {};\n  for (const key in TYPED_MESSAGE_SCHEMA.properties) {\n      if (data[key]) {\n          sanitizedData[key] = data[key];\n      }\n  }\n  if ('types' in sanitizedData) {\n      sanitizedData.types = Object.assign({ EIP712Domain: [] }, sanitizedData.types);\n  }\n  return sanitizedData;\n}\n\n\n\n// eip712 过滤签名消息\nexport function vaildatorEIP712(EIP712Data: EIP712Types) {\n  try {\n      EIP712Data = typeof EIP712Data == 'string' ? JSON.parse(EIP712Data) : EIP712Data\n  } catch (error) {\n      console.log('EIP712Data is not a valid JSON string')\n  }\n  try {\n      // 保留标准结构\n      EIP712Data = _sanitizeData(EIP712Data)\n      // 生成真实签名数据\n      const extractedData: EIP712Types = {}\n      const realRequestFields = EIP712Data.types[EIP712Data.primaryType]\n      realRequestFields.map(({ name }: { name: any }) => {\n          extractedData[name] = EIP712Data.message[name]\n      })\n      EIP712Data.message = extractedData\n      return EIP712Data\n  } catch (err) {\n      console.error(\"parseEIP712 error\")\n  }\n  return EIP712Data\n\n}\n\n\n\n\nexport function resemblesEvmAddress(string = '') {\n  // hex prefix 2 + 20 bytes\n  return string.length === (2 + (20 * 2))\n}","// @ts-nocheck\nimport EventEmitter from 'eventemitter3';\n\nexport type AbstractAdapterOptions = {\n    protocol?: string\n}\nexport default class AbstractAdapter extends EventEmitter {\n  \n\n    constructor({protocol}: AbstractAdapterOptions) {\n        super();\n        this.protocol = protocol \n        this._initializeChannelMessage()\n    }\n\n    _initializeChannelMessage(){}\n}\n","/* eslint-disable @typescript-eslint/camelcase */\nimport axios from 'axios';\nimport { Buffer } from 'buffer';\nimport ProviderUtils from '../ProviderUtils';\nimport { BASE_URL } from '../../constant';\n\nimport {\n  Account,\n  MetaData,\n  PROVIDER_ALLIANCE,\n  SwitchEthereumChainParams,\n  TomoProviderEventName,\n  initOptions,\n} from '../../types/types';\nimport { messages, errorCodes, rpcErrors } from '../../message';\nimport { getSyncSiteMetadata } from '../../metaData';\nimport { vaildatorEIP712, resemblesEvmAddress } from '../../utils/validator';\nimport {\n  loginDefineProperties,\n  signDefineProperties,\n} from '../../utils/properties';\nimport { AppInfo } from '../../constant';\n\nimport AbstractProvider from '../AbstractProvider';\n\nfunction transfer16(val: string | number = 0) {\n  val = isNaN(Number(val)) ? 1 : Number(val);\n  return '0x' + val.toString(16);\n}\n\nconst defaultAccount: Account = {\n  address: '',\n  chainId: '0x1',\n  chainKey: 'ethereum',\n  alliance: PROVIDER_ALLIANCE.EVM,\n  chainName: 'Ethereum netWork',\n  chainSymbol: 'ETH',\n};\n\ninterface HttpProviderOptions {\n  chainId: string;\n  url: string;\n}\n\ninterface RequestOptions {\n  account: Account;\n  metaData: initOptions['metaData'];\n}\n\nasync function getChainList() {\n  return await axios.get(\n    'https://d13t1x9bdoguib.cloudfront.net/static/chainList.json'\n  );\n}\n\nclass HttpProvider {\n  options: HttpProviderOptions;\n  rpcMap: Map<number, string>;\n  peddingMap: Map<number, any>;\n  constructor(options?: HttpProviderOptions) {\n    this.options = options;\n    this.rpcMap = new Map();\n    this.peddingMap = new Map();\n    options?.chainId && this.setUrl(options.url, options.chainId);\n  }\n  setUrl(url, chainId) {\n    this.rpcMap.set(parseInt(chainId), url);\n  }\n  getUrl(chainId) {\n    return this.rpcMap.get(parseInt(chainId));\n  }\n\n  async send(\n    payload: {\n      method: string;\n      params: any[];\n      id?: number;\n    },\n    options: {\n      chainId: string;\n      chainKey?: string;\n      rpcUrl?: string;\n      account?: Account;\n    }\n  ) {\n    let { method, params, id } = payload;\n    const rpcUrl = options.rpcUrl || this.getUrl(options.chainId);\n    // const { chainId } = options\n    // const url = this.rpcMap.get(chainId)\n    const requestParams = {\n      jsonrpc: '2.0',\n      method,\n      params,\n      id: id || new Date().getTime(),\n    };\n\n    const response = await axios.post(rpcUrl, requestParams);\n\n    // return response.data\n    const { result, error } = response.data;\n    if (error) {\n      throw error;\n    }\n    return response.data.result;\n  }\n\n  async sendBatch(payloads, options = {}) {\n    const results = [];\n    for (const payload of payloads) {\n      const result = await this.send(payload, options as any);\n      results.push(result);\n    }\n    return results;\n  }\n}\n\nclass ProxyLocalStorage {\n  prefix = 'tomo-tg-wallet-';\n  constructor() {}\n  get(key) {\n    try {\n      let value = localStorage.getItem(`${this.prefix}${key}`);\n      return value ? JSON.parse(value) : null;\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n  }\n  set(key, value) {\n    try {\n      localStorage.setItem(`${this.prefix}${key}`, JSON.stringify(value));\n      return value;\n    } catch (error) {\n      return null;\n    }\n  }\n}\n\nfunction ProxyResponse(this: EthereumProvider, responsePayload) {\n  const { method, config, params, result } = responsePayload || {};\n  const requestParams = config?.params?.[0] || {};\n  if (config) {\n    const accounts = config?.accounts;\n    accounts && (this._accounts = accounts);\n\n    switch (method) {\n      case 'wallet_switchEthereumChain':\n      case 'wallet_addEthereumChain':\n        const isExist = Object.values(this._accounts || {}).find(\n          account =>\n            transfer16(account.chainId) === transfer16(requestParams.chainId)\n        );\n        if (isExist) {\n          this._account = {\n            ...isExist,\n          };\n        } else {\n          responsePayload.error = {\n            code: -32602,\n            message: `tomo wallet does not support  ${requestParams?.chainId}`,\n          };\n        }\n        break;\n      case 'eth_requestAccounts':\n        this._account =\n          this._accounts[this._account?.chainKey] ||\n          Object.values(this._accounts)[0];\n        break;\n      default:\n        break;\n    }\n    return responsePayload;\n  }\n}\n\nconst walletPromiseTimeoutClear = (() => {\n  const walletPromiseMap: Map<string, number> = new Map();\n\n  return (id, fn, timeout = 1000) => {\n    if (walletPromiseMap.has(id)) return walletPromiseMap.has(id);\n    const promise = fn();\n    walletPromiseMap.set(id, promise);\n    setTimeout(() => {\n      walletPromiseMap.delete(id);\n    }, timeout);\n    return promise.finally(() => {\n      walletPromiseMap.delete(id);\n    });\n  };\n})();\n\nconst isReConnect = (lastTime, timeout = 1000 * 60 * 15) => {\n  const now = new Date().getTime();\n  return now - lastTime > timeout;\n};\n\ninterface OverrideRpcUrl {\n  [chainId: number]: string;\n}\n\nexport class EthereumProvider extends AbstractProvider {\n  version: string;\n  // state: any\n  connectUrl: string;\n  bridgeUrl: string;\n  connect_direct_link: string;\n  httpProvider: HttpProvider;\n  storage: ProxyLocalStorage;\n  utils: ProviderUtils;\n  eventTimeout: number;\n  metaData: MetaData;\n\n  public autoRefreshOnNetworkChange = true;\n  public _isMetaMask = true;\n  public isMetaMask = true;\n  public _isConnected = false;\n  public isTomoWallet = true;\n  private _isRetryCount = 0;\n  private chainList: { id: number; name: string; rpcUrl }[] = [];\n  private overrideRpcUrl: OverrideRpcUrl = {};\n\n  // _accounts: {\n  //     [key: string]: Account\n  // }\n  // _account: Account | null\n  get _lastTime() {\n    return isNaN(Number(this.storage.get('lastTime') || 0))\n      ? 0\n      : Number(this.storage.get('lastTime') || 0);\n  }\n  set _lastTime(value) {\n    this.storage.set('lastTime', value);\n  }\n  get _account() {\n    return this.storage.get('evm_account') || defaultAccount;\n  }\n  set _account(account: Account | null) {\n    const oldAccount = { ...(this._account || defaultAccount) };\n\n    if (!account) {\n      account = {\n        ...oldAccount,\n        address: '',\n      };\n    }\n    this.storage.set('evm_account', account);\n\n    if (transfer16(oldAccount?.chainId) != transfer16(account?.chainId)) {\n      this.emit('chainChanged', this?.chainId, account?.alliance, account);\n      this.emit('networkChanged', parseInt(this?.chainId), account?.alliance);\n    }\n    if (oldAccount?.address != account?.address) {\n      this.emit('accountsChanged', account?.address ? [account?.address] : []);\n    }\n  }\n  get _accounts() {\n    return (\n      this.storage.get('evm_accounts') || {\n        ethereum: defaultAccount,\n      }\n    );\n  }\n  set _accounts(accounts: { [key: string]: Account }) {\n    this.storage.set('evm_accounts', accounts);\n  }\n\n  get networkVersion() {\n    return parseInt(this.chainId);\n  }\n\n  get chainId() {\n    const chainId = this.utils.storage.get('evm_chainId');\n    return transfer16(chainId);\n  }\n\n  get chainKey() {\n    return this._account?.chainKey || defaultAccount?.chainKey;\n  }\n\n  get connected() {\n    return this._account?.address ? true : false;\n  }\n  get selectedAddress() {\n    return this._account?.address || '';\n  }\n\n  constructor(options: initOptions & { overrideRpcUrl?: OverrideRpcUrl }) {\n    super({\n      protocol: PROVIDER_ALLIANCE.EVM,\n    });\n\n    if (options.overrideRpcUrl) this.overrideRpcUrl = options.overrideRpcUrl;\n\n    this.utils = new ProviderUtils({\n      ...BASE_URL,\n      ...options,\n    });\n\n    this.version = this.getAppInfo().version;\n\n    this.connectUrl = options.connect || BASE_URL.connect;\n    this.bridgeUrl = options.bridge || BASE_URL.bridge;\n    this.connect_direct_link =\n      options.connect_direct_link || BASE_URL.connect_direct_link;\n\n    this.eventTimeout = options?.eventTimeout || 10 * 60 * 1000;\n    this.metaData = options.metaData;\n\n    this.storage = new ProxyLocalStorage();\n    this.httpProvider = new HttpProvider({\n      chainId: '0x1',\n      url: 'https://rpc.ankr.com/eth',\n    });\n\n    this._initialize();\n    getChainList()\n      .then(response => (this.chainList = response.data as any))\n      .catch(() => {\n        // todo what if cannot fetch chain list\n      });\n    if (\n      typeof window !== 'undefined' &&\n      !window?.ethereum &&\n      options.injected\n    ) {\n      window.ethereum = this;\n      console.log('injected in evm provider');\n      dispatchEvent(new Event('ethereum#initialized'));\n    }\n  }\n\n  checkIsChainSupported(chainId: string | number) {\n    const chainIdNum = Number(chainId);\n    return !!this.chainList.find(c => c.id === chainIdNum);\n  }\n\n  _initialize() {\n    this.emit('connect', { chainId: this?.chainId });\n    this.emit('_initialized');\n  }\n\n  async _walletSwitchChain(payload: {\n    method: string;\n    params: Array<SwitchEthereumChainParams>;\n  }) {\n    const { method, params } = payload;\n    const requestParams = params[0];\n    let isExist = Object.values(this._accounts || {}).find(\n      account =>\n        transfer16(account.chainId) === transfer16(requestParams.chainId)\n    );\n    if (!isExist) {\n      await this.request({\n        method: 'eth_requestAccounts',\n      });\n      isExist = Object.values(this._accounts || {}).find(\n        account =>\n          transfer16(account.chainId) === transfer16(requestParams.chainId)\n      );\n      if (!isExist) {\n        throw rpcErrors.invalidRequest({\n          code: errorCodes.provider.unsupportedChain,\n          message: messages.errors.invalidChains(\n            requestParams?.chainId.toString()\n          ),\n          data: params,\n        });\n      }\n    }\n    this._account = isExist;\n    return null;\n  }\n\n  getAppInfo() {\n    return {\n      ...AppInfo,\n    };\n  }\n\n  async enable() {\n    return this.request({ method: 'eth_requestAccounts' });\n  }\n\n  get isConnected() {\n    return this.connected;\n  }\n\n  getRpcUrl() {\n    let rpcUrl = this.chainList.find(c => c.id === Number(this.chainId)).rpcUrl;\n    if (this.overrideRpcUrl[+this.chainId])\n      rpcUrl = this.overrideRpcUrl[+this.chainId];\n    return rpcUrl;\n  }\n\n  async request(payload: { method: string; params?: any[] }): Promise<any> {\n    const { method, params = [] } = payload || {};\n\n    if (!payload || typeof payload !== 'object' || Array.isArray(payload)) {\n      throw rpcErrors.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: params,\n      });\n    }\n\n    if (typeof method !== 'string' || method.length === 0) {\n      throw rpcErrors.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: payload as any,\n      });\n    }\n\n    try {\n      const requestKey = `${method}-${JSON.stringify(params || [])}`;\n\n      switch (method) {\n        case 'wallet_requestPermissions': // this is for rainbowkit\n          throw 'wallet_requestPermissions not supported';\n        case 'eth_requestAccounts':\n          const isRreConnected = isReConnect(this._lastTime, this.eventTimeout);\n          if (this?._account?.address && !isRreConnected) {\n            return [this._account.address];\n          }\n          return walletPromiseTimeoutClear(requestKey, () =>\n            this._request(method, params)\n          );\n        case 'eth_accounts':\n          return [this._account?.address];\n        case 'eth_chainId':\n          return this.chainId;\n        case 'wallet_switchEthereumChain':\n        case 'wallet_addEthereumChain': {\n          if (!this.connected) {\n            await this.request({\n              method: 'eth_requestAccounts',\n            });\n          }\n          const { chainId } = params[0] as any;\n          // const isChainSupported = this.checkIsChainSupported(chainId);\n          this.utils.storage.set('evm_chainId', chainId);\n          // if (!isChainSupported)\n          //  `chain ${chainId} is not supported`;\n          return null;\n        }\n        case 'wallet_watchAsset':\n        // case 'wallet_addSeed': // todo seems to be implemented already\n        case 'metamask_watchAsset':\n          return walletPromiseTimeoutClear(requestKey, () =>\n            this._request(method, params)\n          );\n        case 'personal_sign':\n        case 'eth_signETHTransaction':\n        case 'eth_signErc20Transaction':\n        case 'eth_signTypedData':\n        case 'eth_signTransaction':\n          if (!this.connected) {\n            await this.request({\n              method: 'eth_requestAccounts',\n            });\n          }\n          return walletPromiseTimeoutClear(requestKey, () =>\n            this._request(method, params)\n          );\n        case 'eth_sendTransaction': {\n          const param = params[0];\n          let { chainId: chainIdResolved } = param as any;\n          if (!chainIdResolved) chainIdResolved = this.chainId;\n          const signRes = await this.request({\n            method: 'eth_signTransaction',\n            params: [\n              {\n                ...param,\n                chainId: chainIdResolved,\n              },\n            ],\n          });\n\n          const rpc = this.getRpcUrl();\n          const signedTx = signRes.result;\n          return this.httpProvider.send(\n            {\n              method: 'eth_sendRawTransaction',\n              params: [signedTx],\n            },\n            {\n              chainId: chainIdResolved,\n              chainKey: this.chainKey,\n              rpcUrl: rpc, // TODO\n            }\n          );\n        }\n        case 'eth_signTypedData_v3':\n        case 'eth_signTypedData_v4':\n          if (!this.connected) {\n            await this.request({\n              method: 'eth_requestAccounts',\n            });\n          }\n          let signPersonalMessageV4 = payload.params[0];\n          if (\n            resemblesEvmAddress(payload.params[0]) &&\n            !resemblesEvmAddress(payload.params[1])\n          ) {\n            signPersonalMessageV4 = payload.params[1];\n          }\n          params[0] = vaildatorEIP712(signPersonalMessageV4);\n          return walletPromiseTimeoutClear(requestKey, () =>\n            this._request(method, params)\n          );\n        default: {\n          const rpcUrl = this.getRpcUrl();\n          return this.httpProvider.send(payload as any, {\n            chainId: this.chainId,\n            chainKey: this.chainKey,\n            rpcUrl, // TODO\n          });\n        }\n      }\n    } catch (error) {\n      console.log(error);\n      return Promise.reject(\n        typeof error == 'object'\n          ? error\n          : {\n              code: -32603,\n              message: error,\n            }\n      );\n    }\n  }\n\n  async _createEventSource(\n    hash,\n    signature,\n    salt: string,\n    direct_params: { method: string; params: any[] },\n    request\n  ) {\n    const eventSource = new EventSource(\n      `${this.bridgeUrl}?appid=${hash}&signature=${signature}&salt=${salt}`\n    );\n    return new Promise((resolve, reject) => {\n      const timer =\n        this.eventTimeout > 0\n          ? setTimeout(() => {\n              reject(\n                rpcErrors.invalidRequest({\n                  code: errorCodes?.rpc?.timeoutRequest,\n                  message: messages.errors.timeOut(direct_params.method),\n                  data: direct_params.params,\n                })\n              );\n              eventSource.close();\n            }, this.eventTimeout || 60000)\n          : null;\n      // @ts-ignore\n      eventSource.addEventListener('message', event => {\n        // @ts-ignore\n        if (event?.data === 'hi' || event?.data === 'close') return;\n        if (!event?.data) {\n          this._isRetryCount += 1;\n          eventSource.close();\n          clearTimeout(timer);\n          if (this._isRetryCount > 4) {\n            this._isRetryCount = 0;\n            throw new Error('Tomo Wallet Request error');\n          }\n          return this._createEventSource(\n            hash,\n            signature,\n            salt,\n            direct_params,\n            request\n          );\n        }\n        try {\n          const decodedString = atob(event?.data);\n          let data = JSON.parse(decodedString);\n          if (\n            request.method === 'eth_requestAccounts' ||\n            request.method === 'wallet_requestPermissions'\n          ) {\n            data = loginDefineProperties(request, data);\n          } else if (\n            request.method === 'eth_signETHTransaction' ||\n            request.method === 'eth_signTransaction'\n          ) {\n            const source = this._account;\n            data = signDefineProperties(request, data, source);\n          } else if (request.method === 'personal_sign') {\n            const source = this._account;\n            console.log('personal_sign data', data);\n            data = signDefineProperties(request, data.result, source);\n          } else if (request.method === 'eth_signErc20Transaction') {\n            const source = this._account;\n            data = signDefineProperties(request, data, source);\n          }\n          // not supposes to support\n          // else if (request.method === 'wallet_addSeed') {\n          // const source = this._account;\n          // data = signDefineProperties(request, data, source);\n          // const acc_ = this._accounts\n          // if (data.result.code === 10000) {\n          //   acc_.eth.account = data.result.result.wallet_address;\n          //   acc_.eth.address = data.result.result.wallet_address;\n          // this._accounts = acc_;\n          // this._account =  acc_.eth;\n          // }\n          // }\n          if (data?.id == request.id || salt == data?.salt) {\n            eventSource?.close();\n\n            clearTimeout(timer);\n            if (data.reConnect || !data.error) {\n              ProxyResponse.call(this, data);\n            }\n            this._isRetryCount = 0;\n            data.error ? reject(data.error) : resolve(data.result);\n          } else {\n            console.log('Tomo wallet data error');\n          }\n        } catch (error) {\n          console.log(error);\n        }\n      });\n\n      this.utils.openAuthBot(direct_params);\n    });\n  }\n\n  async _request(method, params, options?: RequestOptions) {\n    const account = this._account;\n    const now = new Date().getTime();\n    this._lastTime = now;\n    options = {\n      account: account,\n      metaData: getSyncSiteMetadata(this.metaData),\n      ...options,\n      timeStamp: now,\n    } as any;\n    const id =\n      new Date().getTime() + Math.floor(Math.random() * 1000).toString();\n\n    let salt = `salt-${Date.now()}-${id}`;\n    salt = Buffer.from(salt, 'utf-8')\n      .toString('base64')\n      .replace('==', '')\n      .replace('=', '');\n\n    const payload = {\n      id,\n      method,\n      params,\n      options,\n    };\n\n    // push参数\n    const publish_params = {\n      id: payload.id,\n      data: payload,\n      version: '1.0',\n      salt: salt,\n    };\n    const response = await axios.post(\n      this.connectUrl,\n      {\n        payload_base64: Buffer.from(\n          JSON.stringify(publish_params),\n          'utf-8'\n        ).toString('base64'),\n      },\n      {\n        headers: {\n          'X-Salt': salt,\n        },\n      }\n    );\n\n    const { hash, signature } = response.data;\n    //深度链参数\n    const direct_params = {\n      method,\n      params: [salt, hash, signature],\n    };\n    const request = {\n      ...payload,\n      hash,\n      signature,\n      salt,\n    };\n    return this._createEventSource(\n      hash,\n      signature,\n      salt,\n      direct_params,\n      request\n    );\n  }\n\n  disconnect() {\n    this._account = null;\n\n    this.emit('accountsChanged', []);\n    this.emit(TomoProviderEventName.TOMO_EVM_PROVIDER_DISCONNECTED, '');\n    // this.emit('close', \"\");\n  }\n}\n"],"names":["passkeyKey","persistedState","persist","set","deviceId","undefined","setDeviceId","user","setUser","transactions","setTransactions","name","useLocalStore","create","devtools","localStore","getUserToken","store","getState","_user$token","token","e","getDeviceId","successCode","api","index","bot","tomo","auth","pk","sun","init","endpoints","tmaid","tmakey","endPoints","axios","baseURL","forEach","apiItem","interceptors","request","use","config","Object","defineProperty","headers","value","writable","enumerable","configurable","passKey","getPassKey","mfa","url","Authorization","error","console","log","_error$response","response","status","Promise","reject","GatewayError","_Error","message","code","_this","call","constructor","_inheritsLoose","_wrapNativeSuper","Error","pkCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","callback","res","_err$response","_err$response2","_err$response3","wrap","_callee$","_context","prev","next","sent","data","abrupt","t0","stop","_x","apply","arguments","authCallback","_ref2","_callee2","_err$response4","_err$response5","_err$response6","_callee2$","_context2","_x2","sunCallback","_ref3","_callee3","_err$response7","_err$response8","_err$response9","_callee3$","_context3","_x3","tomoCallback","_ref4","_callee4","_callee4$","_context4","_x4","localStorage","getItem","loginApi","_ref5","_callee5","initData","_api$bot","_callee5$","_context5","get","_x5","checkLoginByCodeApi","_ref6","_callee6","session_code","_api$bot2","_callee6$","_context6","_x6","pkRegApi","_ref7","_callee8","device_no","_callee8$","_context8","_callee7","_api$pk","_callee7$","_context7","post","_x7","pkCreateApi","_ref9","_callee10","_callee10$","_context10","_callee9","_api$auth","_callee9$","_context9","_x8","pkCheckApi","_ref11","_callee12","_callee12$","_context12","_callee11","_api$auth2","_callee11$","_context11","_x9","pkSignApi","_ref13","_callee14","_context14","_callee13","_api$pk2","_callee13$","_context13","_x10","_x11","pkValidateApi","_ref15","_callee16","_context16","_callee15","_api$auth3","_callee15$","_context15","_x12","_x13","btcSignPsbtAndPush","_ref17","_callee18","params","_callee18$","_context18","_callee17","_api$tomo","_yield$api$tomo$post","_callee17$","_context17","_x14","sendEvmTransactionApi","_ref19","_callee20","_callee20$","_context20","_callee19","_api$tomo2","_callee19$","_context19","MFA","_x15","_x16","signEvmTransactionApi","_ref21","_callee22","_callee22$","_context22","_callee21","_api$tomo3","_callee21$","_context21","_x17","_x18","tonSignMessage","_ref23","_callee24","_callee24$","_context24","_callee23","_api$tomo4","_callee23$","_context23","_x19","_x20","solSignRawTransaction","_ref25","_callee26","_callee26$","_context26","_callee25","_api$tomo5","_yield$api$tomo$post2","_callee25$","_context25","_x21","btcCreateSendBtcPsbt","_ref27","_callee28","_callee28$","_context28","_callee27","_api$tomo6","_yield$api$tomo$post3","_callee27$","_context27","_x22","btcSignMessage","_ref29","_callee30","_callee30$","_context30","_callee29","_api$tomo7","_yield$api$tomo$post4","_callee29$","_context29","_x23","btcSignPsbt","_ref31","_callee32","_callee32$","_context32","_callee31","_api$tomo8","_yield$api$tomo$post5","_callee31$","_context31","_x24","decodeInfoByHex","_ref33","_callee34","_callee34$","_context34","_callee33","_api$tomo9","_yield$api$tomo$post6","_callee33$","_context33","_x25","v2PkRegApi","_ref35","_callee36","_callee36$","_context36","_callee35","_api$pk3","_callee35$","_context35","_x26","v2PkSignApi","_ref37","_callee38","_callee38$","_context38","_callee37","_api$pk4","_callee37$","_context37","_x27","v2PkValidateApi","_ref39","_callee40","_callee40$","_context40","_callee39","_api$auth4","_callee39$","_context39","_x28","v2PkCreateApi","_ref41","_callee42","_callee42$","_context42","_callee41","_api$auth5","_callee41$","_context41","_x29","v2PkCheckApi","_ref43","_callee44","_callee44$","_context44","_callee43","_api$auth6","_callee43$","_context43","_x30","checkPaymentPasswd","_ref45","_callee46","_callee46$","_context46","_callee45","_api$auth7","_callee45$","_context45","setPaymentPasswd","_ref47","_callee48","_callee48$","_context48","_callee47","_api$auth8","_callee47$","_context47","_x31","changePaymentPasswd","_ref49","_callee50","_callee50$","_context50","_callee49","_api$auth9","_callee49$","_context49","_x32","validatePaymentPasswd","_ref51","_callee52","_callee52$","_context52","_callee51","_api$auth10","_callee51$","_context51","_x33","bindEmailCodeVerify","_ref53","_callee54","_callee54$","_context54","_callee53","_api$tomo10","_yield$api$tomo$post7","_callee53$","_context53","_x34","bindEmailCodeSend","_ref55","_callee56","email","_callee56$","_context56","_callee55","_api$tomo11","_yield$api$tomo$get","_callee55$","_context55","_x35","getSwapAllTokens","_ref57","_callee58","_callee58$","_context58","_callee57","_api$tomo12","ret","_callee57$","_context57","getSwapAllTokensSearch","_ref59","_callee59","queryParameters","_callee59$","_context59","_x36","_x37","buildSwapTxApi","_ref60","_callee61","_callee61$","_context61","_callee60","_api$sun","_callee60$","_context60","_x38","getSystemTokens","_ref62","_callee63","_callee63$","_context63","_callee62","_api$auth11","_callee62$","_context62","_x39","v1AddAssetApi","_ref64","_callee65","_callee65$","_context65","_callee64","_api$auth12","_callee64$","_context64","_x40","v1AllAssetApi","_ref66","_callee67","_callee67$","_context67","_callee66","_api$auth13","_callee66$","_context66","_x41","mfaAuthVerificationApi","_ref68","_callee69","_callee69$","_context69","_callee68","_api$tomo13","_callee68$","_context68","_x42","getSwapAllTokensV3","_ref70","_callee71","_callee71$","_context71","_callee70","_api$tomo14","_callee70$","_context70","_x43","sendBindEmailCodeApi","_ref72","_callee73","_callee73$","_context73","_callee72","_api$tomo15","_callee72$","_context72","_x44","verifyBindEmailCodeApi","_ref74","_callee75","_callee75$","_context75","_callee74","_api$tomo16","_callee74$","_context74","_x45","getTelegramUserInfoApi","_ref76","_callee77","_callee77$","_context77","_callee76","_api$tomo17","_callee76$","_context76","getConfigChainsAll","_ref78","_callee78","_yield$axios$get","_callee78$","_context78","result","btcAddressTypeMaps","mockBtcEvmChainId","btcDecimals","sendTx","network","addressType","toAddress","amount","txInfo","networkType","connection","mockSolEvmChainId","solDecimals","solEndpoint","getConnection","solanaWeb3","Connection","sendSolTx","_sendSolTx","fromAddress","mintAddress","tx","PublicKey","fromPublicKey","toPublicKey","tokenPublicKey","solanaSpl","txHex","Transaction","feePayer","getRecentBlockhash","recentBlockhash","blockhash","add","createTransferInstruction","SystemProgram","transfer","fromPubkey","toPubkey","lamports","serialize","requireAllSignatures","verifySignatures","toString","getTokenAmount","_getTokenAmount","client","mint","owner","tokenAccount","info","getAssociatedTokenAddress","getAccountInfo","getTokenAccountBalance","getSolBalance","address","_connection","_connection2","publicKey","balance","solBalance","BigInt","format","decimals","uiAmountString","getBalance","formatted","Math","pow","getInstructions","instruction","j","TransactionInstruction","programId","Buffer","from","keys","length","push","pubkey","isSigner","isWritable","ToSerializeTransaction","SolanaWeb3","txMsg","i","_tx","TransactionMessage","payerKey","instructions","txType","populate","compileToLegacyMessage","signatures","signature","addSignature","VersionedTransaction","deserialize","serializedMessage","getSendSplToken","_getSendSplToken","to","mintPublicKey","fromATA","fromInfo","fromTokenAccount","transaction","toATA","toInfo","TOKEN_PROGRAM_ID","ASSOCIATED_TOKEN_PROGRAM_ID","versionedTransaction","warn","t1","getLatestBlockhash","t2","t3","t4","createAssociatedTokenAccountInstruction","createTransferCheckedInstruction","compileToV0Message","sendTransaction","_sendTransaction","rawTransaction","sendRawTransaction","mockTonChainId","mockTonTestnetChainId","tonDecimals","apiKey","tonRpc","hashHttp","getTonWebProvider","_getTonWebProvider","TonWeb","HttpProvider","apiKeyTest","tonRpcTest","getTonTestWebProvider","_getTonTestWebProvider","getTonBalance","tonAddress","tokenContractAddress","tokenPrecision","chainId","tonWeb","wallet","jettonMinter","jettonWalletAddress","jettonWallet","_balance","getAddress","jetton","JettonMinter","provider","getJettonWalletAddress","JettonWallet","getData","Number","utils","fromNano","createSigningTransaction","_createSigningTransaction","transactionInfo","WalletClass","seqno","stateInit","deploy","signingMessage","stateInitBoc","sendmode","walletAddress","comment","tokenAmount","convertedAmount","transferBody","externalMessage","cellBase64","cellBase641","_externalMessage","_cellBase","_cellBase2","formatUnits","all","hexToBytes","wc","methods","createStateInit","SendMode","PAY_GAS_SEPARATELY","IGNORE_ERRORS","trim","memo","Uint8Array","concat","TextEncoder","encode","toNano","createTransferBody","queryId","jettonAmount","Address","forwardPayload","forwardAmount","responseAddress","createTransferMessage","toBoc","bytesToHex","signingMessageBoc","getAddressInfo","state","signedTransaction","cell","msgHash","lt","boc","Cell","fromBoc","base64ToBytes","hash","bytesToBase64","sendBoc","_extends","getTransactionsByInMessageHash","_getTransactionsByInMessageHash","msg_hash","transRes","encodeURIComponent","ProxyLocalStorage","window","_initDataUnsafe$user","Telegram","initDataUnsafe","WebApp","id","userId","_proto","prototype","key","withTgUserId","oKey","prefix","JSON","parse","setItem","stringify","useProxyLocalStorage","_useState","useState","storage","setStorage","useEffect","AppInfo","version","homepage","logo","description","downloadLinks","android","googlePlay","ios","appleStore","testflight","telegram","browserExtension","chrome","edge","deepLinks","scheme","universallink","direct_link","BASE_URL","bridge","connect","connect_direct_link","LOCALES","mockEvmChainIds","SOL","BTC","TON","CONNECT_MAP","ChainIdWithConnectsMap","TOMO_MINI_APP","OKX_CONNECT","TON_CONNECT","EVM","BITGET_WALLET","UXUY_WALLET","tgUtils","decodeTelegramUrlParameters","encodedParameters","isObject","decodedParams","replaceAll","qs","obj","URLSearchParams","buildParams","Array","isArray","v","test","append","encodeTelegramUrlParameters","parameters","opendeepLink","paramsStr","domain","_ref$domain","_ref$appname","appname","protoUrl","iframeContEl","document","getElementById","body","iframeEl","createElement","appendChild","pageHidden","addEventListener","hidden","webkitHidden","mozHidden","msHidden","src","setTimeout","location","getDeepLink","tMeUrl","_ref2$mode","mode","_tMeUrl$match","match","deepLink","isMobileDevice","navigator","userAgent","isIOS","MSStream","isTelegramInAppBrowser","isPcBrowser","getOkxLanguage","lang","includes","getDisplayName","nameMap","_nameMap","getDisplayDescription","_nameMap2","getSyncSiteMetadata","metaData","hostname","_URL","URL","icon","getSyncSiteIcon","windowObject","icons","querySelectorAll","_i","_Array$from","href","OpaqueType","HexString","AddressString","BigIntString","IntNumber","num","floor","RegExpString","PROVIDER_ALLIANCE","TonTxBodyType","TomoProviderEventName","messages","errors","disconnected","permanentlyDisconnected","sendSiteMetadata","unsupportedSync","method","invalidDuplexStream","invalidNetworkParams","invalidRequestArgs","invalidRequestMethod","invalidRequestParams","invalidLoggerObject","invalidLoggerMethod","invalidChains","timeOut","connected","warnings","chainIdDeprecation","networkVersionDeprecation","selectedAddressDeprecation","enableDeprecation","sendDeprecation","events","close","networkChanged","notification","rpc","ethDecryptDeprecation","ethGetEncryptionPublicKeyDeprecation","walletWatchAssetNFTExperimental","experimentalMethods","errorCodes","timeoutRequest","invalidInput","resourceNotFound","resourceUnavailable","transactionRejected","methodNotSupported","limitExceeded","invalidRequest","methodNotFound","invalidParams","internal","unsupportedChain","userRejectedRequest","unauthorized","unsupportedMethod","chainDisconnected","errorValues","standard","FALLBACK_MESSAGE","rpcErrors","outputDef","accounts","eth","alliance","symbol","salt","options","account","chainKey","chainName","chainSymbol","loginDefineProperties","chain","isTonProof","output","_response$result$defa2","_response$result$defa","defaultEthereumAddress","v2Address","_request$params","formatAccount","toLowerCase","tonProof","signDefineProperties","source","_output$config$accoun","btc","defaultBtcAddress","sol","solanaAddress","ton","tonAddressTest","tonPublicKey","sui","suiAddress","_res$defaultEthereumA","transfer16","val","isNaN","walletPromiseTimeoutClear","walletPromiseMap","Map","fn","timeout","has","promise","defaultAccount","ProviderUtils","_EventEmitter","eventTimeout","connectUrl","bridgeUrl","_request","payload","_this2","_ref$params","requestKey","connectSse","getSseToken","_getSseToken","now","publish_params","_response$data","_account","Date","getTime","_lastTime","timeStamp","random","replace","payload_base64","_connectSse","_yield$this$getSseTok","direct_params","createEventSource","eventSource","EventSource","resolve","timer","_this3","_errorCodes$rpc","event","_isRetryCount","clearTimeout","_request$method$split","split","operation","_data","_data2","decodedString","atob","_request$params$","_extends2","toUpperCase","reConnect","ProxyResponse","openAuthBot","base64Content","base64ContentStr","utf8Array","base64Encoded","btoa","String","fromCharCode","_Telegram$WebApp","openTelegramLink","getAppInfo","removeAccount","chainType","_accounts","_extends3","getMethodInfo","methodString","_createClass","oldAccount","_account2","_account3","emit","parseInt","_account4","_account5","_account6","ethereum","_this$_account","_this$_account2","EventEmitter","reponsePayload","_sanitizeData","TYPED_MESSAGE_SCHEMA","type","properties","types","additionalProperties","items","required","primaryType","sanitizedData","assign","EIP712Domain","vaildatorEIP712","EIP712Data","extractedData","realRequestFields","map","err","resemblesEvmAddress","string","AbstractAdapter","protocol","_initializeChannelMessage","getChainList","_getChainList","rpcMap","peddingMap","setUrl","getUrl","send","_send","rpcUrl","requestParams","jsonrpc","sendBatch","_sendBatch","payloads","results","_iterator","_step","_createForOfIteratorHelperLoose","done","_proto2","responsePayload","_config$params","isExist","values","find","isReConnect","lastTime","EthereumProvider","_AbstractProvider","overrideRpcUrl","httpProvider","_initialize","then","chainList","_window","injected","dispatchEvent","Event","_proto3","checkIsChainSupported","chainIdNum","c","_walletSwitchChain","_walletSwitchChain2","enable","_enable","getRpcUrl","_request2","_this$_account3","_ref2$params","isRreConnected","param","chainIdResolved","signRes","signedTx","signPersonalMessageV4","_createEventSource","_createEventSource2","_this4","_request3","_response$data2","disconnect","TOMO_EVM_PROVIDER_DISCONNECTED","_this$_account4","_this$_account5","_this$_account6","AbstractProvider"],"mappings":"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"}