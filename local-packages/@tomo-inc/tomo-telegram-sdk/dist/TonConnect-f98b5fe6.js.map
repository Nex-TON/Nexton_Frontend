{"version":3,"file":"TonConnect-f98b5fe6.js","sources":["../src/components/TonConnect.tsx","../src/hooks/useTonConnect.ts"],"sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport useTonConnect from '../hooks/useTonConnect';\nimport { ConnectResult } from '../TomoContext';\n\n/**\n * useTonConnect hook --> TonConnect component\n * just for lazy load\n */\ninterface IProps {\n  closeModal: () => void;\n  setProviders: (providers: Record<string, any>) => void;\n  setConnectResult?: (result: ConnectResult) => void;\n  updateTonConnect: (obj: {\n    connect: (connectParams?: { tonProof?: string }) => Promise<string>;\n    connected: boolean;\n  }) => void;\n}\n\nconst TonConnect = ({\n  closeModal,\n  setProviders,\n  setConnectResult,\n  updateTonConnect,\n}: IProps) => {\n  const { connect, connected } = useTonConnect({\n    connectSuccess: closeModal,\n    setProviders,\n    setConnectResult,\n  });\n\n  useEffect(() => {\n    updateTonConnect({ connect, connected });\n  }, [connect, connected]);\n\n  // lazy load and connect immediately\n  useEffect(() => {\n    connect();\n  }, []);\n\n  return <></>;\n};\n\nexport default TonConnect;\n","import { useTonConnectModal, useTonConnectUI } from '@tonconnect/ui-react';\nimport { useEffect, useState } from 'react';\nimport { useProxyLocalStorage } from '../v2/ProxyLocalStorage';\nimport { getTonBalance } from '../config/ton';\nimport { ConnectResult } from '../TomoContext';\n\ninterface Option {\n  connectSuccess?: () => void;\n  connectError?: () => void;\n  setProviders: (providers: Record<string, any>) => void;\n  // chain?: string;\n  setConnectResult?: (result: ConnectResult) => void;\n}\n\nconst useTonConnect = (option: Option) => {\n  const { connectSuccess, connectError, setProviders, setConnectResult } =\n    option || {};\n  const [tonConnectUI] = useTonConnectUI();\n  const { open } = useTonConnectModal();\n\n  const storage = useProxyLocalStorage();\n\n  const connect = async (connectParams?: { tonProof?: string }) => {\n    if (connectParams?.tonProof) {\n      tonConnectUI.setConnectRequestParameters({\n        state: 'ready',\n        value: { tonProof: connectParams.tonProof },\n      });\n    }\n    open();\n    return 'connect';\n  };\n\n  const connectType = storage.get('connect_type');\n\n  useEffect(() => {\n    if (connectType === 'TON' && !tonConnectUI.connected) {\n      disconnect();\n    }\n  }, [tonConnectUI.connected, connectType]);\n\n  const disconnect = async () => {\n    setProviders(pre => ({ ...pre, tomo_ton: null }));\n    storage.set('accounts', {\n      ...(storage.get('accounts') || {}),\n      ton: undefined,\n    });\n    window.tomo_ton = null;\n    storage.set('connect_type', '');\n  };\n\n  useEffect(() => {\n    if (tonConnectUI.connected && tonConnectUI.account?.address) {\n      // is connected\n      connectSuccess && connectSuccess();\n      const account = tonConnectUI.account;\n      storage.set('accounts', {\n        ...(storage.get('accounts') || {}),\n        ton: account,\n      });\n      storage.set('connect_type', 'TON');\n      Object.defineProperty(tonConnectUI, 'getBalance', {\n        value: async () => getTonBalance({ tonAddress: account.address }),\n        writable: true,\n        enumerable: true,\n        configurable: false,\n      });\n      window.tomo_ton = tonConnectUI;\n      setProviders &&\n        setProviders(pre => ({\n          ...(pre || {}),\n          tomo_ton: tonConnectUI,\n        }));\n    }\n  }, [tonConnectUI.connected, tonConnectUI.account?.address]);\n\n  useEffect(() => {\n    const unsub = tonConnectUI.onStatusChange((wallet) => {\n      if (\n        wallet?.connectItems?.tonProof &&\n        \"proof\" in wallet.connectItems.tonProof\n      ) {\n        setConnectResult({\n          result: { tonProof: wallet.connectItems.tonProof },\n        });\n      }\n    });\n    return () => {\n      unsub()\n    }\n  }, [tonConnectUI]);\n\n  return {\n    connect,\n    disconnect,\n    connected: tonConnectUI?.connected || false,\n  };\n};\n\nexport default useTonConnect;\n"],"names":["_ref","updateTonConnect","_useTonConnect","option","connectSuccess","setProviders","setConnectResult","tonConnectUI","useTonConnectUI","open","useTonConnectModal","storage","useProxyLocalStorage","connect","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","connectParams","wrap","_context","prev","next","tonProof","setConnectRequestParameters","state","value","abrupt","stop","_x","apply","arguments","connectType","get","useEffect","connected","disconnect","_ref3","_callee2","_context2","pre","_extends","tomo_ton","set","ton","undefined","window","_value","_tonConnectUI$account","account","address","Object","defineProperty","_callee3","_context3","getTonBalance","tonAddress","writable","enumerable","configurable","_tonConnectUI$account2","unsub","onStatusChange","wallet","_wallet$connectItems","connectItems","result","useTonConnect","closeModal","React"],"mappings":"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"}