{"version":3,"file":"tomoWalletTgSdkV2.cjs.production.min.js","sources":["../src/v2/provider/BasicProvider.ts","../src/v2/provider/SolanaProvider/SolanaProvider.ts","../src/v2/utils/ton/index.ts","../src/v2/utils/hexToBase64.ts","../src/v2/utils/ton/jetton.ts","../src/v2/utils/base64toHex.ts","../src/v2/provider/TonProvider/TonProvider.ts","../src/v2/utils/isValidHex.ts","../src/config/sui.ts","../src/v2/provider/SuiProvider/SuiProvider.ts","../src/v2/index.ts"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { Account, initOptions } from '../types/types';\nimport ProviderUtils from './ProviderUtils';\nimport { BASE_URL } from '../constant';\n\nexport default class BasicProvider extends EventEmitter {\n  isConnected: boolean;\n  utils: ProviderUtils;\n  constructor(options?: initOptions) {\n    super();\n    this.utils = new ProviderUtils({\n      ...BASE_URL,\n      ...options,\n    });\n    this.isConnected = false;\n  }\n\n  async connect(\n    method: string,\n    params?: {\n      tonProof?: string;\n      email?: string;\n      domain?: string;\n      chainId?: number;\n    }\n  ) {\n    const [chainType, operation] = this.utils.getMethodInfo(method);\n    if (this.utils._accounts && this.utils._accounts[chainType]) {\n      const account = this.utils._accounts[chainType];\n      this.utils._account = account;\n      this.isConnected = true;\n      return account;\n    }\n    const res: Account = await this.utils.request({\n      method,\n      params: params ? [params] : [],\n    }) as any;\n    this.isConnected = true;\n    return res;\n  }\n\n  async disconnect(method: string) {\n    const [chainType, operation] = this.utils.getMethodInfo(method);\n    this.utils._account = null;\n    this.utils.removeAccount(chainType);\n    this.emit('accountsChanged', []);\n    this.emit('disconnect', '');\n  }\n}\n","import { Transaction, VersionedTransaction } from '@solana/web3.js';\nimport {\n  mockSolEvmChainId,\n  getSolBalance,\n  sendTransaction as sendTx,\n} from '../../../config/sol';\nimport { initOptions } from '../../types/types';\nimport BasicProvider from '../BasicProvider';\nimport PrioviderUtils from '../ProviderUtils';\n\ninterface SolTransferParam {\n  from: string;\n  to: string;\n  value: string;\n  // chainId: number;\n  contract?: string;\n}\n\nexport default class SolanaProvider extends BasicProvider {\n  isConnected: boolean = false;\n  utils: PrioviderUtils;\n  account: {\n    address: string;\n  };\n  chainId: number;\n\n  constructor(options: initOptions) {\n    super(options);\n    this.chainId = mockSolEvmChainId;\n    this.isConnected = false;\n    this._initialize();\n  }\n\n  private _initialize() {\n    const account = this.utils.storage.get(`accounts`)?.sol;\n    if (account) {\n      this.account = account;\n      this.isConnected = true;\n    }\n  }\n\n  async connectWallet(params?: { email: string }) {\n    const res = await super.connect('sol_connectWallet', params);\n    this.isConnected = true;\n    this.account = res as any;\n    return res;\n  }\n\n  async disconnectWallet() {\n    await this.disconnect();\n    this.isConnected = false;\n    return true;\n  }\n\n  async sendTransaction(tx: string) {\n    const res = await sendTx(tx);\n    return res;\n  }\n\n  async getBalance(address?: string) {\n    if (!address && !this.account?.address)\n      return { balance: '0', formatted: '0' };\n    const res = await getSolBalance({\n      address: address || this.account.address,\n      token: '',\n    });\n    return res;\n  }\n\n  async signMessage(message: string) {\n    const res = await this.utils.request({\n      method: 'sol_signMessage',\n      params: [message, this.getAddress()],\n    });\n    return res.result;\n  }\n\n  getAddress() {\n    return this.account?.address || '';\n  }\n\n  async signTransaction(tx: Transaction | SolTransferParam) {\n    // fall back to transfer\n    if (typeof (tx as any)?.serialize != 'function')\n    { \n      console.error(`warning: signTransaction using plain js object will be deprecated\\nsignTransaction will only accept a Transaction Instance in the future\\nfor simple transfer ops, please use 'transfer' method`);\n      return this.transfer(tx as SolTransferParam);\n    }\n    const txHex = (tx as Transaction)\n      .serialize({ requireAllSignatures: false, verifySignatures: false })\n      .toString('hex');\n\n    const res = await this.utils.request({\n      method: 'sol_signTx',\n      params: [{ chainId: this.chainId, txHex }],\n    });\n    return res.result;\n  }\n\n  async transfer(params: SolTransferParam) {\n    const param = {\n      method: 'sol_signTransaction', // 'sol_transfer'\n      params: [{ ...params, chainId: this.chainId }],\n    };\n    const res = await this.utils.request(param);\n    return res.result;\n  }\n\n  async transferToken(params: SolTransferParam) {\n    return this.transfer(params);\n  }\n\n  // TODO:\n  // async signTransactions(params: any[]) {\n  //   const res = await this.utils.request({\n  //     method: 'sol_signTransaction',\n  //     params: params,\n  //   });\n  //   return res.result;\n  // }\n\n  async disconnect() {\n    this.account = null;\n    super.disconnect('sol_disconnect');\n  }\n}\n","import { Cell } from '@ton/core';\nimport { hexToBase64 } from '../hexToBase64';\n\nexport function parsingTonTxPayload(payloadHex: string) {\n  const cell = Cell.fromBase64(hexToBase64(payloadHex));\n  const slice = cell.beginParse();\n  const operationCode = slice.loadUint(32);\n  const queryId = slice.loadUintBig(64);\n  const amount = slice.loadCoins();\n  const destination = slice.loadAddress();\n\n  return {\n    operationCode,\n    queryId,\n    amount,\n    destination,\n  };\n}\n\nexport async function getJettonMinterAddress(userAddress) {\n  const ton = await import('@ton/ton');\n  const client = new ton.TonClient({\n    endpoint: 'https://toncenter.com/api/v2/jsonRPC',\n  });\n  try {\n    const result = await client.runMethod(userAddress, 'get_wallet_data');\n    const slice = (result.stack as any).items[2].cell.beginParse();\n    const minterAddress = slice.loadAddress();\n\n    return minterAddress;\n  } catch (error) {\n    console.error('Can not get Jetton Minter Address:', error);\n    return '';\n  }\n}\n","export function hexToBase64(hex: string) {\n  // Convert hex to bytes\n  const bytes = Buffer.from(hex, 'hex');\n\n  // Encode bytes to Base64\n  return bytes.toString('base64');\n}\n","import TonWeb from 'tonweb';\nimport { tonRpc, tonRpcApiKey } from '../../../config/ton';\nimport { Address, Cell, Slice, fromNano } from '@ton/core';\n\nexport async function checkIsJettonWallet(jettonWalletAddress: string) {\n  const tonweb = new TonWeb(\n    new TonWeb.HttpProvider()\n  );\n  const jettonWallet = new TonWeb.token.jetton.JettonWallet(tonweb.provider, {\n    address: jettonWalletAddress,\n  } as any);\n  try {\n    const data = await jettonWallet.getData();\n    const jettonMinterAddress = data.jettonMinterAddress.toString(\n      true,\n      true,\n      true\n    );\n    console.log('Jetton Minter Address:', jettonMinterAddress);\n    console.log('This address is a valid Jetton Wallet address.');\n    return jettonMinterAddress\n  } catch (error) {\n    console.error(error)\n    console.log(`${jettonWalletAddress} doesn't seems to be a jetton`);\n    return false\n  }\n}\n\nexport function isJUSDT(address: string) {\n  const usdtAddress = 'EQCxE6mUtQJKFnGfaROTKOt1lZbDiiX1kCixRv7Nw2Id_sDs';\n  if (\n    usdtAddress === address ||\n    Address.parse(address).toString() ===\n      Address.parse(usdtAddress).toString() ||\n    Address.parse(usdtAddress).toString() === address ||\n    Address.parse(address).toString() === usdtAddress\n  ) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport function roughlyGuessJettonDecimal(address: string) {\n  return isJUSDT(address) ? 6 : 9;\n}\n","export function base64ToHex(base64: string) {\n  // Decode the Base64 string to a binary string\n  const binaryString = atob(base64)\n  let hexString = ''\n\n  // Convert each character in the binary string to hexadecimal\n  for (let i = 0; i < binaryString.length; i++) {\n    const hexChar = binaryString.charCodeAt(i).toString(16)\n    // Ensure two-digit representation\n    hexString += hexChar.length === 2 ? hexChar : '0' + hexChar\n  }\n\n  return hexString.toUpperCase() // Convert to uppercase for consistency\n}\n","import { fromNano } from '@ton/core';\nimport {\n  getTonBalance,\n  mockTonChainId,\n  mockTonTestnetChainId,\n  sendTransaction as sendTonTx,\n} from '../../../config/ton';\nimport {\n  initOptions,\n  TonTransferBodyLegacy,\n  TonTxBodyType,\n  TonTxParams,\n  TonTxRequestStandard,\n  TonTxRequest,\n} from '../../types/types';\nimport { parsingTonTxPayload } from '../../utils/ton';\nimport BasicProvider from '../BasicProvider';\nimport ProviderUtils from '../ProviderUtils';\nimport { checkIsJettonWallet } from '../../utils/ton/jetton';\nimport { isValidHex } from '../../utils/isValidHex';\nimport { base64ToHex } from '../../utils/base64toHex';\n\nexport class TonProvider extends BasicProvider {\n  utils: ProviderUtils;\n  account: {\n    address: string;\n    publicKey?: string;\n    tonProof?: any;\n  };\n  chainId: number;\n  isConnected: boolean;\n\n  constructor(options: initOptions) {\n    super(options);\n    this.chainId = mockTonChainId;\n    this.isConnected = false;\n    this._initialize();\n  }\n\n  private _initialize() {\n    const account = this.utils.storage.get(`accounts`)?.ton;\n    if (account) {\n      this.account = account;\n      this.isConnected = true;\n      this.chainId = account.chainId || mockTonChainId;\n    }\n  }\n\n  // @ts-ignore this is still not elegant\n  async connect(params?: {\n    tonProof?: string;\n    domain?: string;\n    chainId?: number;\n    email?: string;\n    workChain?: number;\n    network?: string;\n  }) {\n    if (params?.network === 'testnet') {\n      this.chainId = mockTonTestnetChainId;\n      params.chainId = mockTonTestnetChainId;\n    }\n    if (params?.tonProof) {\n      params.domain = params.domain || window.location.hostname;\n      params.workChain = params.workChain ?? 0;\n      params.chainId = mockTonChainId;\n    }\n\n    const res: any = (await super.connect('ton_connectWallet', params)) || {\n      address: '',\n    };\n\n    if (res.address) {\n      this.account = res;\n      this.isConnected = true;\n    }\n\n    return res;\n  }\n\n  get connected() {\n    return this.isConnected;\n  }\n\n  async restoreConnection() {\n    return this.getAddress();\n  }\n\n  getAddress() {\n    return this.account?.address || '';\n  }\n\n  async getBalance(address?: string) {\n    if (!address && !this.account?.address)\n      return { balance: '0', formatted: '0' };\n    const res = await getTonBalance({ tonAddress: address || this.account.address, chainId: this.chainId });\n    return res;\n  }\n\n  private async signTransaction(txs: TonTxRequest[]) {\n    const newTxs = txs.map(v => ({\n      chainId: this.chainId,\n      publicKey: this.account.publicKey,\n      ...v,\n    }));\n    const res = await this.utils.request({\n      method: 'ton_signTransaction',\n      params: [...newTxs],\n    });\n    return res;\n  }\n\n  private async signTx(txs: TonTxRequest[]) {\n    console.log('this.chainId', this.chainId);\n    const newTxs = txs.map(v => ({\n      chainId: this.chainId,\n      publicKey: this.account.publicKey,\n      ...v,\n    }));\n    const res = await this.utils.request({\n      method: 'ton_signTx',\n      params: [...newTxs],\n    });\n    return res;\n  }\n\n  async sendTransaction(params: TonTxParams) {\n    return this.sendTx(params);\n  }\n\n  async sendTx(params: TonTxParams) {\n    if (!params.from) params.from = this.getAddress();\n    const { messages, from } = params;\n    if (messages.length === 0) {\n      throw new Error('No messages');\n    }\n\n    const txParam = await this.parsePayloadAsStandard(params);\n    this.checkValue(txParam);\n    console.log({ txParam });\n    const signRes = await this.signTx([txParam]);\n    const res = await sendTonTx(signRes.result, '', this.chainId);\n    return res;\n  }\n\n  private checkValue(param: Partial<TonTxRequestStandard>) {\n    try {\n      fromNano(param.body.messages[0].amount);\n    } catch (e) {\n      throw new Error('amount must in the format of nanoTon');\n    }\n  }\n\n  /**\n   * @deprecated no longer maintained in the future\n   */\n  private parsePayloadAsJSON(\n    body: TonTransferBodyLegacy,\n    payload: string\n  ): TonTransferBodyLegacy {\n    const payloadObj = JSON.parse(payload);\n    const { contractAddr, precision, forwardAmount, memo } = payloadObj;\n    return {\n      ...body,\n      contractAddress: contractAddr,\n      precision,\n      forwardAmount,\n      memo,\n      type: TonTxBodyType.JETTON_PAYLOAD_JSON_LEGACY,\n    };\n  }\n\n  private async parsePayloadAsStandard(\n    tonTx: TonTxParams\n  ): Promise<Partial<TonTxRequestStandard>> {\n    const {\n      messages: [{ payload, address: toAddress }],\n    } = tonTx;\n\n    const result: Partial<TonTxRequestStandard> = {\n      type: TonTxBodyType.STANDARD,\n      body: tonTx,\n    };\n\n    if (!payload) return result;\n\n    let payloadHex = payload;\n    if (!isValidHex(payloadHex)) {\n      // auto convert base64 to hex\n      payloadHex = base64ToHex(payloadHex);\n      result.body.messages[0].payload = payloadHex;\n    }\n\n    const jettonMinterAddress = await checkIsJettonWallet(toAddress);\n    // check is jetton and try parse as jetton\n    if (!jettonMinterAddress) return result;\n    try {\n      const { amount, destination } = parsingTonTxPayload(payloadHex);\n\n      result.jettonInfo = {\n        recipientAddress: destination.toString(),\n        amount: amount.toString(),\n        jettonMinterAddress,\n      };\n    } catch (e) {\n      console.log('parse payload failed, pass');\n      // throw 'call contract other than jetton is not supported yet';\n    }\n\n    return result;\n  }\n\n  async disconnect() {\n    this.account = null;\n    super.disconnect('ton_disconnect');\n  }\n}\n","export function isValidHex(str) {\n  return /^[0-9A-Fa-f]+$/.test(str);\n}","import {\n  SuiClient,\n  SuiTransactionBlockResponse,\n} from '@mysten/sui/client';\nimport { SUI_TYPE_ARG } from '@mysten/sui/utils';\nconst suiEndPoint = 'https://fullnode.mainnet.sui.io:443';\nexport const SUI_TOKEN_ADDRESS = SUI_TYPE_ARG;\nlet suiClient: SuiClient = new SuiClient({ url: suiEndPoint });\nexport const suiScanUrl = 'https://suiscan.xyz/mainnet/tx/';\nexport const mockSuiEvmChainId = 784;\nexport function getSuiClient(): SuiClient {\n  if (suiClient) {\n    return suiClient;\n  }\n  const client = new SuiClient({ url: suiEndPoint });\n  suiClient = client;\n  return suiClient;\n}\n\nexport const sendSuiTx = async ({\n  bytes,\n  signature,\n}: {\n  bytes: Uint8Array;\n  signature: string;\n}): Promise<SuiTransactionBlockResponse> => {\n  const res = await suiClient.executeTransactionBlock({\n    transactionBlock: bytes,\n    signature: signature,\n  });\n  return res;\n};\n\n// only form send\nexport interface GetSuiSendGasType {\n  fromAddress: string;\n  toAddress: string;\n  amount: string;\n  coinType?: string;\n}","import { Transaction } from '@mysten/sui/transactions';\nimport {\n  sendSuiTx\n} from '../../../config/sui';\nimport { initOptions } from '../../types/types';\nimport BasicProvider from '../BasicProvider';\nimport PrioviderUtils from '../ProviderUtils';\n\n// txBytes与txSerialize为transactionBlock的序列化\n// 和transactionBlock传入一种即可无需同时传入\ninterface SuiSignTransactionBlockInput {\n  transactionBlock: Transaction;\n  chain: string;\n  txBytes?: Uint8Array;\n  txSerialize?: Uint8Array;\n  options?: {\n    showEffects: boolean;\n  };\n}\n\nexport default class SuiProvider extends BasicProvider {\n  isConnected: boolean = false;\n  utils: PrioviderUtils;\n  account: {\n    address: string;\n  };\n  chainId: number;\n\n  constructor(options: initOptions) {\n    super(options);\n    this.chainId = 784;\n    this.isConnected = false;\n    this._initialize();\n  }\n\n  private _initialize() {\n    const account = this.utils.storage.get(`accounts`)?.sui;\n    if (account) {\n      this.account = account;\n      this.isConnected = true;\n    }\n  }\n\n  // change name to connect? like okx? \n  async connectWallet(params?: { email: string }) {\n    const res = await super.connect('sui_connectWallet', params);\n    this.isConnected = true;\n    this.account = res as any;\n    console.log('sui connect res', res);\n    return res;\n  }\n\n  // change name to disconnect? like okx?\n  async disconnectWallet() {\n    await this.disconnect();\n    this.isConnected = false;\n    return true;\n  }\n\n  getAccount() {\n    return this.account;\n  }\n\n  // remove?\n  getAddress() {\n    return this.account?.address || '';\n  }\n\n  async sendTransaction(p: { bytes: Uint8Array, signature: string }) {\n    const res = await sendSuiTx(p);\n    return res;\n  }\n\n  // message type align with okx?\n  async signMessage(message: string) {\n    const res = await this.utils.request({\n      method: 'sui_signMessage',\n      params: [message],\n    });\n    return res.result;\n  }\n\n  // message type align with okx?\n  async signPersonalMessage(message: string) {\n    return this.signMessage(message);\n  }\n\n  async signTransaction(params: SuiSignTransactionBlockInput) {\n    const res = await this.utils.request({\n      method: 'sui_signTransaction',\n      params: [\n        { ...params, chainId: this.chainId },\n      ],\n    });\n    return res.result;\n  }\n\n  async signAndExecuteTransaction(params: SuiSignTransactionBlockInput) {\n    const tx = await this.signTransaction(params);\n    return this.sendTransaction({ bytes: params.txBytes, signature: tx });\n  }\n\n  async disconnect() {\n    this.account = null;\n    super.disconnect('sui_disconnect');\n  }\n}\n","import Eventemitter3 from 'eventemitter3';\nimport { AppInfo, BASE_URL } from './constant';\n\nimport { EthereumProvider } from './provider/EthereumProvider/EthereumProvider';\nimport SolanaProvider from './provider/SolanaProvider/SolanaProvider';\nimport { TonProvider } from './provider/TonProvider/TonProvider';\nimport SuiProvider from './provider/SuiProvider/SuiProvider';\nimport { TomoOptions } from './types/types';\n\nclass WalletTgSdk extends Eventemitter3 {\n  version = AppInfo.version;\n  ethereum: EthereumProvider;\n  solana: SolanaProvider;\n  tomo_ton: TonProvider;\n  tomo_sui: SuiProvider;\n  connectUrl: string;\n  bridgeUrl: string;\n  connect_direct_link: string;\n  injected: boolean;\n  metaData\n  getAppInfo = () => {\n    return {\n      ...AppInfo,\n    };\n  };\n  constructor(options?: TomoOptions) {\n    super();\n\n    const metaData = options?.metaData;\n    this.connectUrl = options?.connect || BASE_URL.connect;\n    this.bridgeUrl = options?.bridge || BASE_URL.bridge;\n    this.connect_direct_link =\n      options?.connect_direct_link || BASE_URL.connect_direct_link;\n    this.injected = options?.injected || false;\n    this.metaData = {\n      icon: metaData?.icon,\n      name: metaData?.name,\n      url: metaData?.url,\n      direct_link: metaData?.direct_link,\n      description: metaData?.description,\n    };\n    this._initialize();\n  }\n  _initialize() {\n    //initialize provider\n    this.ethereum = new EthereumProvider({\n      connect: this.connectUrl,\n      bridge: this.bridgeUrl,\n      connect_direct_link: this.connect_direct_link,\n      metaData: this.metaData,\n    });\n    this.solana = new SolanaProvider({\n      connect: this.connectUrl,\n      bridge: this.bridgeUrl,\n      connect_direct_link: this.connect_direct_link,\n      metaData: this.metaData,\n    });\n    this.tomo_ton = new TonProvider({\n      connect: this.connectUrl,\n      bridge: this.bridgeUrl,\n      connect_direct_link: this.connect_direct_link,\n      metaData: this.metaData,\n    });\n    this.tomo_sui = new SuiProvider({\n      connect: this.connectUrl,\n      bridge: this.bridgeUrl,\n      connect_direct_link: this.connect_direct_link,\n      metaData: this.metaData,\n    });\n    // this.bitcoin = new BitcoinProvider({\n    //   connect: this.connectUrl,\n    //   bridge: this.bridgeUrl,\n    //   connect_direct_link: this.connect_direct_link,\n    //   metaData: this.metaData,\n    // });\n    if (this.injected) {\n      if (!window.ethereum) {\n        window.ethereum = this.ethereum;\n        // window.tg_tomo_btc = this.bitcoin;\n        dispatchEvent(new Event('ethereum#initialized'));\n      }\n      if (!window.tomo_sol) {\n        window.tomo_sol = this.solana;\n        dispatchEvent(new Event('tomo_sol#initialized'));\n      }\n      if (!window.tomo_ton) {\n        window.tomo_ton = this.tomo_ton;\n        dispatchEvent(new Event('tomo_ton#initialized'));\n      }\n      if (!window.tomo_sui) {\n        window.tomo_sui = this.tomo_sui;\n        dispatchEvent(new Event('tomo_sui#initialized'));\n      }\n    }\n    this.emit('_initialized');\n  }\n}\n\nexport default WalletTgSdk;\n"],"names":["BasicProvider","_EventEmitter","options","_this","call","utils","ProviderUtils","_extends","BASE_URL","isConnected","_inheritsLoose","_proto","prototype","connect","_connect","_asyncToGenerator","_regeneratorRuntime","mark","_callee","method","params","_this$utils$getMethod","chainType","account","res","wrap","_context","prev","next","this","getMethodInfo","_accounts","_account","abrupt","request","sent","stop","_x","_x2","apply","arguments","disconnect","_disconnect","_callee2","_this$utils$getMethod2","_context2","removeAccount","emit","_x3","EventEmitter","SolanaProvider","_BasicProvider","chainId","mockSolEvmChainId","_initialize","_this$utils$storage$g","storage","get","sol","connectWallet","_connectWallet","disconnectWallet","_disconnectWallet","sendTransaction","_sendTransaction","_callee3","tx","_context3","sendTx","getBalance","_getBalance","_callee4","address","_this$account","_context4","balance","formatted","getSolBalance","token","signMessage","_signMessage","_callee5","message","_context5","getAddress","result","_x4","_this$account2","signTransaction","_signTransaction","_callee6","txHex","_context6","serialize","console","error","transfer","requireAllSignatures","verifySignatures","toString","_x5","_transfer","_callee7","param","_context7","_x6","transferToken","_transferToken","_callee8","_context8","_x7","_callee9","_context9","parsingTonTxPayload","payloadHex","slice","Cell","fromBase64","Buffer","from","beginParse","operationCode","loadUint","queryId","loadUintBig","amount","loadCoins","destination","loadAddress","checkIsJettonWallet","_checkIsJettonWallet","jettonWalletAddress","tonweb","jettonWallet","jettonMinterAddress","TonWeb","HttpProvider","jetton","JettonWallet","provider","getData","log","t0","base64ToHex","base64","binaryString","atob","hexString","i","length","hexChar","charCodeAt","toUpperCase","TonProvider","mockTonChainId","ton","_params$workChain","network","mockTonTestnetChainId","tonProof","domain","window","location","hostname","workChain","restoreConnection","_restoreConnection","getTonBalance","tonAddress","txs","newTxs","_this2","map","v","publicKey","concat","signTx","_signTx","_this3","_sendTx","txParam","signRes","messages","Error","parsePayloadAsStandard","checkValue","sendTonTx","fromNano","body","e","parsePayloadAsJSON","payload","payloadObj","JSON","parse","contractAddress","contractAddr","precision","forwardAmount","memo","type","TonTxBodyType","JETTON_PAYLOAD_JSON_LEGACY","_parsePayloadAsStandard","tonTx","_tonTx$messages$","toAddress","_parsingTonTxPayload","STANDARD","test","jettonInfo","recipientAddress","_createClass","key","suiClient","SuiClient","url","sendSuiTx","_ref2","_ref","bytes","signature","executeTransactionBlock","transactionBlock","SuiProvider","sui","getAccount","p","signPersonalMessage","_signPersonalMessage","signAndExecuteTransaction","_signAndExecuteTransaction","txBytes","_Eventemitter","WalletTgSdk","AppInfo","version","metaData","connectUrl","bridgeUrl","bridge","connect_direct_link","injected","icon","name","direct_link","description","ethereum","EthereumProvider","solana","tomo_ton","tomo_sui","dispatchEvent","Event","tomo_sol","Eventemitter3"],"mappings":"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"}